#pragma once

// Name: ArkUWP, Version: 1.0.0


/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class ShooterGame.PrimalDinoAIController
// 0x0318 (FullSize[0x08B8] - InheritedSize[0x05A0])
class APrimalDinoAIController : public AAIController
{
public:
	float                                              DieIfLeftWaterWanderMinimumWaterHeightMultiplier;          // 0x05A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DieIfLeftWaterReachedRadiusDistanceCheckMultiplier;        // 0x05A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DieIfLeftWaterTargetUnsubmergedTimeout;                    // 0x05A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandDinoMaxWaterTargetDepthCapsuleMultiplier;              // 0x05AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraCorpseTargetingRange;                                 // 0x05B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FleeFromAttackCoolDownTime;                                // 0x05B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FleeFromAttackTimeLimit;                                   // 0x05B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceFleeUnderHealthPercentage;                            // 0x05BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFleeOnCriticalHealth;                                     // 0x05C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2G9N[0x3];                                     // 0x05C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DieIfLeftWaterTargetingRequiresFreeDepth;                  // 0x05C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastBlockadeCheckTime;                                     // 0x05C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastMovingAroundBlockadeTime;                              // 0x05D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MovingAroundBlockadeDirection;                             // 0x05D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     MovingAroundBlockadePoint;                                 // 0x05DC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              LastBlockadeWidth;                                         // 0x05E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastBlockadeHitNormal;                                     // 0x05EC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastBlockadeHitLocation;                                   // 0x05F8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     StartMovingAroundBlockadeLocation;                         // 0x0604(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AActor*                                      LastMovingAroundBlockadeActor;                             // 0x0610(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bForcedAggro : 1;                                          // 0x0618(0x0001) BIT_FIELD (Edit, Transient, NoDestructor)
	unsigned char                                      UnknownData_RET9[0x7];                                     // 0x0619(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      ForceTargetActor;                                          // 0x0620(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AActor*                                      Target;                                                    // 0x0628(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              AttackDestinationOffset;                                   // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseOverlapTargetCheck;                                    // 0x0634(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNotifyNeighborsWithoutDamage;                             // 0x0635(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBPShouldNotifyNeighbor;                                // 0x0636(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBPShouldNotifyAnyNeighbor;                             // 0x0637(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bRequireAbsoluteDamageForNeighborNotification;             // 0x0638(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SJEV[0x3];                                     // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AboveDeltaZAttackRange;                                    // 0x063C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BelowDeltaZAttackRange;                                    // 0x0640(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WildAboveDeltaZTargetingRange;                             // 0x0644(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WildBelowDeltaZTargetingRange;                             // 0x0648(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bWildUseDeltaZTargetingForFlyerPawnOrBigDino;              // 0x064C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4Y85[0x13];                                    // 0x064D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDontWander;                                               // 0x0660(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlyOverlapTargetCorpsesUnlessHasTarget;                  // 0x0661(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_653X[0x2];                                     // 0x0662(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NaturalTargetingRange;                                     // 0x0664(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedTargetingRange;                                       // 0x0668(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedCorpseFoodTargetingRange;                             // 0x066C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderRandomDistanceAmount;                                // 0x0670(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingWanderFixedDistanceAmount;                           // 0x0674(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingWanderRandomDistanceAmount;                          // 0x0678(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxFlyingTargetDeltaZ;                                     // 0x067C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderFlyingZScaler;                                       // 0x0680(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderFlyingClampZHeightAboveGround;                       // 0x0684(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderFlyingMinZHeightAboveGround;                         // 0x0688(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderFixedDistanceAmount;                                 // 0x068C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseAggro;                                                 // 0x0690(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GXH9[0x3];                                     // 0x0691(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinAggroValue;                                             // 0x0694(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroToAddUponRemovingTarget;                              // 0x0698(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroToAddUponAcquiringTarget;                             // 0x069C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroFactorDecreaseSpeed;                                  // 0x06A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroFactorDecreaseGracePeriod;                            // 0x06A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroFactorDamagePercentageMultiplier;                     // 0x06A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroNotifyNeighborsMultiplier;                            // 0x06AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroNotifyNeighborsRange;                                 // 0x06B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroNotifyNeighborsRangeFalloff;                          // 0x06B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TargetingDistanceReductionFactorLinear;                    // 0x06B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TargetingDistanceReductionFactorExponent;                  // 0x06BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BeyondTargetingRangeAggroAddition;                         // 0x06C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AggroFactorDesirabilityMultiplier;                         // 0x06C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttackRange;                                               // 0x06C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttackInterval;                                            // 0x06CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttackRotationRangeDegrees;                                // 0x06D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttackRotationGroundSpeedMultiplier;                       // 0x06D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RangeTargetWildDinosMultiplier;                            // 0x06D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    AttackRotationRate;                                        // 0x06DC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bFocusOnTargetDuringAttack;                                // 0x06E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PYOM[0x3];                                     // 0x06E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     FlyingMoveTowardsTargetOffset;                             // 0x06EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CombatFlyingMoveTowardsTargetOffset;                       // 0x06F8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FlyingTargetFocalPositionOffset;                           // 0x0704(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingReachedDestinationThresholdOffset;                   // 0x0710(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SeekingIntervalCheckToFly;                                 // 0x0714(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SeekingPercentChanceToFly;                                 // 0x0718(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SeekingIntervalCheckToLand;                                // 0x071C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SeekingPercentChanceToLand;                                // 0x0720(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinimumWanderGroundNormalZ;                                // 0x0724(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FollowStoppingDistance;                                    // 0x0728(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseOverlapTargetCheckTraces;                              // 0x072C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseAlternateMovePoint;                                    // 0x072D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bTotallyIgnoreWaterTargets;                                // 0x072E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bWaterDinoAllowUnsubmergedTargets;                         // 0x072F(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LastCheckAttackRangePawnLocation;                          // 0x0730(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastCheckAttackRangeClosestPoint;                          // 0x073C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastCheckAttackRangeTargetLocation;                        // 0x0748(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_629H[0x4];                                     // 0x0754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      LastCheckAttackRangeTarget;                                // 0x0758(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               HasAttackPriority;                                         // 0x0760(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SPQP[0x7];                                     // 0x0761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      TamedAITargetingRangeMultipliers;                          // 0x0768(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MateBoostAggroNotifyNeighborsMultiplier;                   // 0x0778(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OJ75[0x4];                                     // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBehaviorTree*                               BehaviourTree;                                             // 0x0780(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               HasEnemyTree;                                              // 0x0788(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               BabyHasEnemyTree;                                          // 0x0790(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               ForcedAggroHasEnemyTree;                                   // 0x0798(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               NoEnemyTree;                                               // 0x07A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               FleeFromAttackTree;                                        // 0x07A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               TamedNoEnemyTree;                                          // 0x07B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                               MissionTree;                                               // 0x07B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AggroNotifyNeighborsClasses;                               // 0x07C0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bIgnoreMoveAroundBlockade : 1;                             // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bFlyingUseMoveAroundBlockade : 1;                          // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseGeometryInsteadOfStationObjForFreeDepthTest : 1;       // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bNotifyBPTargetSet : 1;                                    // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPSetupFindTarget : 1;                                 // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bNotAllowedToFindTargets : 1;                              // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowForceFleeToSameTargetingTeam : 1;                    // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPUpdateBestTarget : 1;                                // 0x07D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_HTRX[0x3];                                     // 0x07D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MoveAroundBlockadeAdditionalWidth;                         // 0x07D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MoveAroundObjectMaxVelocity;                               // 0x07D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ForcedAggroTimeCounter;                                    // 0x07DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedMaxFollowDistance;                                    // 0x07E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bTargetChanged : 1;                                        // 0x07E4(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bAttackForcesRunning : 1;                                  // 0x07E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseFlyingTargetOffsets : 1;                               // 0x07E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRidingDinoTargetPlayer : 1;                               // 0x07E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRidingPlayerTargetDino : 1;                               // 0x07E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreWaterOrAmphibiousTargets : 1;                       // 0x07E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPTargetingDesire : 1;                                 // 0x07E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisableForceFlee : 1;                                     // 0x07E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCombatMoveTowardsTargetOffset : 1;                     // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideIgnoredByWildDino : 1;                       // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanUseAttackStateOnTargetChange : 1;                      // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ZMQO : 1;                                      // 0x07E5(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceOnlyTargetingPlayerOrTamed : 1;                      // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTargetingAllStructures : 1;                          // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTargetDinoRider : 1;                                 // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerAllowWaterTargeting : 1;                             // 0x07E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPForceTargetDinoRider : 1;                            // 0x07E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysStartledWhenAggroedByNeighbor : 1;                  // 0x07E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceOnlyTargetingPlayers : 1;                            // 0x07E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsMissionDino : 1;                                        // 0x07E6(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseImprovedAggroFalloffBehavior : 1;                      // 0x07E6(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_JX9M[0x1];                                     // 0x07E7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseStructureTargetingDesire;                              // 0x07E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandDinoMaxFlyerTargetDeltaZ;                              // 0x07EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NaturalMaxDepthZ;                                          // 0x07F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       ForcedAttackTarget;                                        // 0x07F4(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ForcedAttackEnemyTeam;                                     // 0x07FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastForcedAttackEnemyTeamTime;                             // 0x0800(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CCM4[0x4];                                     // 0x0808(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForcedFleeDuration;                                        // 0x080C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinAttackIntervalForFleeing;                               // 0x0810(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinLocChangeIntervalForFleeing;                            // 0x0814(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PercentageTorporForFleeing;                                // 0x0818(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamagedForceAggroInterval;                                 // 0x081C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             ForceAggroUntilTime;                                       // 0x0820(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastExecutedAttackTime;                                    // 0x0828(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastForcedFleeTime;                                        // 0x0830(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastFleeLocCheckTime;                                      // 0x0838(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_349L[0xC];                                     // 0x0840(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumAlliesToAttack;                                         // 0x084C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FindLandingPositionZOffset;                                // 0x0850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedFollowAcceptanceRadiusOffset;                         // 0x0854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedFollowAcceptanceHeightOffset;                         // 0x0858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AIFlightMaxLandingZDistance;                               // 0x085C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             ForcedMoveToUntilTime;                                     // 0x0860(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MMET[0x8];                                     // 0x0868(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBP_TamedOverrideHorizontalLandingRange : 1;            // 0x0870(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerWanderDefaultToOrigin : 1;                           // 0x0870(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckBuffTargetingDesireOverride : 1;                     // 0x0870(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSwimWanderingForLandDinos : 1;                       // 0x0870(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SVSN[0x7];                                     // 0x0871(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              WildTargetingDesireMultiplierClasses;                      // 0x0878(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      WildTargetingDesireMultiplierValues;                       // 0x0888(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              TamedTargetingDesireMultiplierClasses;                     // 0x0898(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      TamedTargetingDesireMultiplierValues;                      // 0x08A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoAIController");
		return ptr;
	}



	bool WantsAttackPriority();
	void UpdateAggro();
	void StopBrainComponent(const struct FString& Reason);
	struct FVector STATIC_StaticGetRandomWanderDestination(class APrimalDinoCharacter* TargetCharacter, class APrimalDinoAIController* TargetAIController, const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation, float GroundCheckSpreadOverride);
	bool ShouldForceRunWhenAttacking();
	void SetTarget(class AActor* InTarget, bool bDontAddAggro, bool bOverlapFoundTarget);
	void SetHasAttackPriority(bool Value);
	void SetAttackRotationRate();
	void SetAttackGroundSpeed();
	void ResumeBrainComponent(const struct FString& Reason);
	void RestartBrainComponent();
	void ResetRotationUseAcceleration();
	void ResetRotationRate();
	void ResetGroundSpeed();
	void ResetAccelerationFollowsRotation();
	void RecoverMovement();
	void RebootBrainComponent();
	void PlayStartledAnim();
	void PauseBrainComponent(const struct FString& Reason);
	bool OrderedToLand();
	void OnLosingTargetEvent();
	bool IsWithinAttackRangeAndCalculateBestAttack(class AActor* Other, bool* bAttackChanged);
	bool IsWithinAttackRange(class AActor* Other, bool bForceUseLastAttackIndex);
	bool IsLogicPaused();
	bool IsForceTargetDinoRider(class AShooterCharacter* playerTarget);
	struct FVector GetWanderAroundActorDestination(class APrimalDinoCharacter* DinoCharacter, const struct FVector& originalDestination);
	class AActor* GetTarget();
	struct FVector GetRandomWanderDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation);
	float GetMinAttackRange();
	struct FVector GetLandingLocation();
	bool GetHasAttackPriority();
	unsigned char GetCurrentAttackIndex();
	class APawn* GetControllerPawn();
	class APrimalDinoCharacter* GetControlledDino();
	class UStaticMeshComponent* GetClosestTree(struct FOverlapResult* OutHit);
	struct FRotator GetAttackRotationRate();
	float GetAttackRotationRangeDegrees();
	float GetAttackRotationGroundSpeedMultiplier();
	float GetAttackRange();
	float GetAttackInterval();
	float GetAggroNotifyNeighborsRange();
	bool GetAggroEntry(int index, class AActor** OutAttacker, float* OutAggroFactor, double* OutLastAggroHitTime);
	int GetAggroEntriesCount();
	class AActor* GetAggroEntriesAttackerAtIndex(int index);
	float GetAggroDesirability(class AActor* InTarget);
	class AActor* FindTarget(bool bDontSet);
	class AActor* FindNewTarget(bool bDontSet);
	void ClearAggroEntries();
	void ChangedAITarget();
	bool CanLand();
	bool CalculateAndSetWonderingAIStateEvent(bool StateChanged);
	bool CalculateAndSetWonderingAIState(bool* StateChanged);
	class AActor* BPUpdateBestTarget(class AActor* bestTarget, bool dontSetIn, bool* dontSetOut);
	bool BPShouldNotifyNeighbor(class APrimalDinoCharacter* neighbor);
	bool BPShouldNotifyAnyNeighbor(class APrimalDinoCharacter* neighbor);
	void BPSetupFindTarget();
	bool BPOverrideIgnoredByWildDino(class AActor* wildDinoToIgnore);
	void BPOnFleeEvent();
	void BPNotifyTargetSet();
	float BPGetTargetingDesire(class AActor* forTarget, float ForTargetingDesireValue);
	bool BPForceTargetDinoRider(class AShooterCharacter* playerTarget);
	struct FVector2D BP_TamedOverrideHorizontalLandingRange();
	void AvoidOutOfWater();
	void AvoidGenericToPoint(const struct FVector& TargetDestination);
	void AddToAggro(class AActor* Attacker, float DamagePercent, bool bNotifyNeighbors, bool SetValue, bool bIsFromDamage, bool skipTeamCheck);
};

// Class ShooterGame.AIAttackCoordinator
// 0x0020 (FullSize[0x0490] - InheritedSize[0x0470])
class AAIAttackCoordinator : public AActor
{
public:
	int                                                MaxAttackersPerTarget;                                     // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UpdateInterval;                                            // 0x0474(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<TWeakObjectPtr<class APrimalDinoAIController>> Attackers;                                                 // 0x0478(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_IYAB[0x8];                                     // 0x0488(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AIAttackCoordinator");
		return ptr;
	}



	void UpdateAttackGroup(TArray<class APrimalDinoAIController*>* AttackGroup);
	void RemoveAttacker(class APrimalDinoAIController* Controller);
	int GetNumAttackersWithPriorityForTarget(class AActor* Target);
	int GetNumAttackersForTarget(class AActor* Target);
	void ClearAllAttackers();
	float CalculateAttackerPriorityWeight(class APrimalDinoAIController* Attacker);
	void AddAttackerCharacter(class APrimalDinoCharacter* Character);
	void AddAttacker(class APrimalDinoAIController* Controller);
};

// Class ShooterGame.CorruptedAvatarAttackCoordinator
// 0x0008 (FullSize[0x0498] - InheritedSize[0x0490])
class ACorruptedAvatarAttackCoordinator : public AAIAttackCoordinator
{
public:
	unsigned char                                      UnknownData_U5NN[0x8];                                     // 0x0490(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CorruptedAvatarAttackCoordinator");
		return ptr;
	}



};

// Class ShooterGame.PrimalGlobals
// 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
class UPrimalGlobals : public UObject
{
public:
	class UPrimalGameData*                             PrimalGameData;                                            // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UPrimalGameData*                             PrimalGameDataOverride;                                    // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       PrimalGameDataAsset;                                       // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FStringAssetReference>               PrimalGameDataAssetExtended;                               // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      RagdollKinematicActorClass;                                // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GlobalGenericConfirmationDialog;                           // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UObject*>                             ExtraResources;                                            // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAllowSingleplayer;                                        // 0x0078(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowNonDedicatedHost;                                    // 0x0079(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0JLX[0x6];                                     // 0x007A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             UIOnlyShowMapFileNames;                                    // 0x0080(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             UIOnlyShowModIDs;                                          // 0x0090(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bTotalConversionShowUnofficialServers;                     // 0x00A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5NI8[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CreditString;                                              // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                AlphaMissionColor;                                         // 0x00B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BetaMissionColor;                                          // 0x00C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GammaMissionColor;                                         // 0x00D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MissionCompleteMultiUseWheelTextColor;                     // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SKP1[0xC0];                                    // 0x00F8(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalGlobals");
		return ptr;
	}



	void OnConfirmationDialogClosed(bool bAccept);
	class ADayCycleManager* STATIC_GetDayCycleManager(class UWorld* World);
	void FinishedLoadingGameMedia();
};

// Class ShooterGame.DataListProviderInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataListProviderInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListProviderInterface");
		return ptr;
	}



};

// Class ShooterGame.PrimalGameData
// 0x2050 (FullSize[0x2078] - InheritedSize[0x0028])
class UPrimalGameData : public UObject
{
public:
	unsigned char                                      UnknownData_M3VQ[0x30];                                    // 0x0028(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ModName;                                                   // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ModDescription;                                            // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FPrimalCharacterStatusValueDefinition       StatusValueDefinitions[0xC];                               // 0x0078(0x0180) (Edit, DisableEditOnInstance)
	struct FPrimalCharacterStatusStateDefinition       StatusStateDefinitions[0xE];                               // 0x01F8(0x0460) (Edit, DisableEditOnInstance)
	struct FPrimalItemStatDefinition                   ItemStatDefinitions[0x8];                                  // 0x0658(0x00C0) (Edit, DisableEditOnInstance)
	struct FPrimalItemDefinition                       ItemTypeDefinitions[0x9];                                  // 0x0718(0x00D8) (Edit, DisableEditOnInstance)
	struct FPrimalEquipmentDefinition                  EquipmentTypeDefinitions[0xB];                             // 0x07F0(0x0108) (Edit, DisableEditOnInstance)
	TArray<class UClass*>                              MasterItemList;                                            // 0x08F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FPrimalItemQuality>                  ItemQualityDefinitions;                                    // 0x0908(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              EngramBlueprintClasses;                                    // 0x0918(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AdditionalEngramBlueprintClasses;                          // 0x0928(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              RemoveEngramBlueprintClasses;                              // 0x0938(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FStatusValueModifierDescription>     StatusValueModifierDescriptions;                           // 0x0948(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             PlayerSpawnRegions;                                        // 0x0958(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  TutorialDisplaySound;                                      // 0x0968(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_StartItemDrag;                                       // 0x0970(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_StopItemDrag;                                        // 0x0978(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PreventGrindingIcon;                                       // 0x0980(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_CancelPlacingStructure;                              // 0x0988(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ChooseStructureRotation;                             // 0x0990(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_FailPlacingStructure;                                // 0x0998(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ConfirmPlacingStructure;                             // 0x09A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_StartPlacingStructure;                               // 0x09A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_CorpseDecompose;                                     // 0x09B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ApplyLevelUp;                                        // 0x09B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ApplyLevelPoint;                                     // 0x09C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_LearnedEngram;                                       // 0x09C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ReconnectToCharacter;                                // 0x09D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_DropAllItems;                                        // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransferAllItemsToRemote;                            // 0x09E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransferAllItemsFromRemote;                          // 0x09E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransferItemToRemote;                                // 0x09F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransferItemFromRemote;                              // 0x09F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_AddItemToSlot;                                       // 0x0A00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_RemoveItemFromSlot;                                  // 0x0A08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ClearCraftQueue;                                     // 0x0A10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_AddToCraftQueue;                                     // 0x0A18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_SetRadioFrequency;                                   // 0x0A20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_AddPinToMap;                                         // 0x0A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_RemovePinFromMap;                                    // 0x0A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ApplyDye;                                            // 0x0A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ApplyPaint;                                          // 0x0A40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_SetTextGeneric;                                      // 0x0A48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_SplitItemStack;                                      // 0x0A50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_MergeItemStack;                                      // 0x0A58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_InputPinDigit;                                       // 0x0A60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_PinValidated;                                        // 0x0A68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_PinRejected;                                         // 0x0A70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TribeWarBegin;                                       // 0x0A78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TribeWarEnd;                                         // 0x0A80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_DropInventoryItem;                                   // 0x0A88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_RefillWaterContainer;                                // 0x0A90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FAppIDItem>                          CoreAppIDItems;                                            // 0x0A98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAppIDItem>                          AppIDItems;                                                // 0x0AA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UPrimalEngramEntry*>                  EngramBlueprintEntries;                                    // 0x0AB8(0x0010) (ZeroConstructor, Transient)
	TArray<class UPrimalDinoEntry*>                    DinoEntriesObjects;                                        // 0x0AC8(0x0010) (ZeroConstructor, Transient)
	TArray<class UGenericDataListEntry*>               ExplorerNoteEntriesObjects;                                // 0x0AD8(0x0010) (ZeroConstructor, Transient)
	TArray<class UGenericDataListEntry*>               HeadHairStylesEntriesObjects;                              // 0x0AE8(0x0010) (ZeroConstructor, Transient)
	TArray<class UGenericDataListEntry*>               FacialHairStylesEntriesObjects;                            // 0x0AF8(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      DefaultToolTipWidget;                                      // 0x0B08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      StarterNoteItem;                                           // 0x0B10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              PrimaryResources;                                          // 0x0B18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      GenericDroppedItemTemplate;                                // 0x0B28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          PostProcess_KnockoutBlur;                                  // 0x0B30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          AdditionalDeathPostProcessEffect;                          // 0x0B38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>                  BuffPostProcessEffects;                                    // 0x0B40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>                  AdditionalBuffPostProcessEffects;                          // 0x0B50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FRangedValues>                       EngramPointPurchaseRanges;                                 // 0x0B60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      GenericDroppedItemTemplateLowQuality;                      // 0x0B70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TR5A[0x10];                                    // 0x0B78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  UnknownIcon;                                               // 0x0B88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          UnknownMaterial;                                           // 0x0B90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  WhiteTexture;                                              // 0x0B98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BlueprintBackground;                                       // 0x0BA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BabyCuddleIcon;                                            // 0x0BA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ImprintedRiderIcon;                                        // 0x0BB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  WeaponAccessoryActivatedIcon;                              // 0x0BB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  EngramBackground;                                          // 0x0BC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  VoiceChatIcon;                                             // 0x0BC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  VoiceChatMutedIcon;                                        // 0x0BD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemButtonRecentlySelectedBackground;                      // 0x0BD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              DinoEntries;                                               // 0x0BE0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AdditionalDinoEntries;                                     // 0x0BF0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              GlobalGeneralArmorDegradationMultiplier;                   // 0x0C00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalSpecificArmorDegradationMultiplier;                  // 0x0C04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalSpecificArmorRatingMultiplier;                       // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalGeneralArmorRatingMultiplier;                        // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EnemyFoundationPreventionRadius;                           // 0x0C10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5GZ4[0x4];                                     // 0x0C14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FColorDefinition>                    ColorDefinitions;                                          // 0x0C18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             ExtraResources;                                            // 0x0C28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             BaseExtraResources;                                        // 0x0C38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  CombatMusicDay;                                            // 0x0C48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  CombatMusicNight;                                          // 0x0C50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  CombatMusicDay_Heavy;                                      // 0x0C58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  CombatMusicNight_Heavy;                                    // 0x0C60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LevelUpStingerSound;                                       // 0x0C68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  TrackMissionSound;                                         // 0x0C70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UntrackMissionSound;                                       // 0x0C78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FPlayerCharacterGenderDefinition            PlayerCharacterGenderDefinitions[0x2];                     // 0x0C80(0x0BE0) (Edit, DisableEditOnInstance)
	class UClass*                                      DefaultGameMode;                                           // 0x1860(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLevelExperienceRamp                        LevelExperienceRamps[0x4];                                 // 0x1868(0x0040) (Edit, DisableEditOnInstance)
	struct FLevelExperienceRamp                        SinglePlayerLevelExperienceRamps[0x4];                     // 0x18A8(0x0040) (Edit, DisableEditOnInstance)
	TArray<struct FNamedTeamDefinition>                NamedTeamDefinitions;                                      // 0x18E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        PlayerLevelEngramPoints;                                   // 0x18F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        PlayerLevelEngramPointsSP;                                 // 0x1908(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             PreventBuildStructureReasonStrings;                        // 0x1918(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FExplorerNoteAchievement>            ExplorerNoteAchievements;                                  // 0x1928(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_NPC;                                                 // 0x1938(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_SupplyCrates;                                        // 0x1948(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FActiveEventSupplyCrateWeight>       Remap_ActiveEventSupplyCrates;                             // 0x1958(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_ResourceComponents;                                  // 0x1968(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_NPCSpawnEntries;                                     // 0x1978(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_Engrams;                                             // 0x1988(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemapping>                     Remap_Items;                                               // 0x1998(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassAddition>                      AdditionalStructureEngrams;                                // 0x19A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBuffAddition>                       AdditionalDefaultBuffs;                                    // 0x19B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAvailableMission>                   AvailableMissions;                                         // 0x19C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	class UClass*                                      ActorToSpawnUponEnemyCoreStructureDeath;                   // 0x19D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AdditionalStructuresToPlace;                               // 0x19E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              MasterDyeList;                                             // 0x19F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_3VXE[0x10];                                    // 0x1A00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EnemyCoreStructureDeathActorRadiusBuildCheck;              // 0x1A10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RIEX[0x4];                                     // 0x1A14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DeathDestructionDepositInventoryClass;                     // 0x1A18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MateBoostIcon;                                             // 0x1A20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  EggBoostIcon;                                              // 0x1A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MatingIcon;                                                // 0x1A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  NearFeedIcon;                                              // 0x1A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BuffedIcon;                                                // 0x1A40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TethererdIcon;                                             // 0x1A48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonTop;                                      // 0x1A50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonBottom;                                   // 0x1A58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonLeft;                                     // 0x1A60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonRight;                                    // 0x1A68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FooterTemplate;                                            // 0x1A70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TribeXPSharePercent;                                       // 0x1A78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                OverrideServerPhysXSubsteps;                               // 0x1A7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OverrideServerPhysXSubstepsDeltaTime;                      // 0x1A80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bInitialized;                                              // 0x1A84(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YY7F[0x53];                                    // 0x1A85(0x0053) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  Sound_TamedDinos[0x3];                                     // 0x1AD8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ItemStartCrafting;                                   // 0x1AF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ItemFinishCrafting;                                  // 0x1AF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ItemStartRepairing;                                  // 0x1B00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ItemFinishRepairing;                                 // 0x1B08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NotifClass;                                                // 0x1B10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      StructureDefaultOverlayToolTipWidget;                      // 0x1B18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MeleeHitColorizeStructuresUI;                              // 0x1B20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinPaintDurationConsumption;                               // 0x1B28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxPaintDurationConsumption;                               // 0x1B2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinDinoRadiusForPaintConsumption;                          // 0x1B30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDinoRadiusForPaintConsumption;                          // 0x1B34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FDinoBabySetup>                      DinoBabySetups;                                            // 0x1B38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDinoBabySetup>                      DinoGestationSetups;                                       // 0x1B48(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      SoapItemTemplate;                                          // 0x1B58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  NameTagWildcardAdmin;                                      // 0x1B60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  NameTagServerAdmin;                                        // 0x1B68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  NameTagTribeAdmin;                                         // 0x1B70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UTexture2D*>                          BadgeGroupsNameTag;                                        // 0x1B78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             AchievementIDs;                                            // 0x1B88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_0T0Y[0x50];                                    // 0x1B98(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      AdditionalEggWeightsToSpawn;                               // 0x1BE8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AdditionalEggItemsToSpawn;                                 // 0x1BF8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      FertilizedAdditionalEggWeightsToSpawn;                     // 0x1C08(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              FertilizedAdditionalEggItemsToSpawn;                       // 0x1C18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemAchievementsName;                                      // 0x1C28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ItemAchievementsList;                                      // 0x1C38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              GlobalCuddleFoodList;                                      // 0x1C48(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMultiAchievement>                   MultiAchievements;                                         // 0x1C58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  DinoIncrementedImprintingSound;                            // 0x1C68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  HitMarkerCharacterSound;                                   // 0x1C70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  HitMarkerStructureSound;                                   // 0x1C78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialParameterCollection*                FOVScaleMaterialParamCollection;                           // 0x1C80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FNPCSpawnEntriesContainerAdditions>  TheNPCSpawnEntriesContainerAdditions;                      // 0x1C88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                          PostProcess_ColorLUT;                                      // 0x1C98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DefaultStructureSettings;                                  // 0x1CA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_DossierUnlocked;                                     // 0x1CA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_ItemUseOnItem;                                       // 0x1CB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_RemoveItemSkin;                                      // 0x1CB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_RemoveClipAmmo;                                      // 0x1CC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FExplorerNoteEntry>                  ExplorerNoteEntries;                                       // 0x1CC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ExplorerNoteXPGain;                                        // 0x1CD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FWGT[0x4];                                     // 0x1CDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  BuffTypeBackgrounds[0x3];                                  // 0x1CE0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BuffTypeForegrounds[0x3];                                  // 0x1CF8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ExplorerNoteXPBuff;                                        // 0x1D10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SpecialExplorerNoteXPBuff;                                 // 0x1D18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PerMapExplorerNoteLockedIcon;                              // 0x1D20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TamedDinoUnlockedIcon;                                     // 0x1D28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TamedDinoLockedIcon;                                       // 0x1D30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OverrideAutoGenerateTerainActorTemplate;                   // 0x1D38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FUnlockableEmoteEntry>               UnlockableEmotes;                                          // 0x1D40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEmoteGroup>                         EmoteGroups;                                               // 0x1D50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemappingWeight>               GlobalNPCRandomSpawnClassWeights;                          // 0x1D60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  DinoOrderIcon;                                             // 0x1D70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DinoOrderEffect_MoveTo;                                    // 0x1D78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DinoOrderEffect_AttackTarget;                              // 0x1D80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FObjectCorrelation>                  AdditionalHumanMaleAnimSequenceOverrides;                  // 0x1D88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FObjectCorrelation>                  AdditionalHumanFemaleAnimSequenceOverrides;                // 0x1D98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FObjectCorrelation>                  AdditionalHumanMaleAnimMontagesOverrides;                  // 0x1DA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FObjectCorrelation>                  AdditionalHumanFemaleAnimMontagesOverrides;                // 0x1DB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FOverrideAnimBlueprintEntry>         AdditionalHumanMaleOverrideAnimBlueprints;                 // 0x1DC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FOverrideAnimBlueprintEntry>         AdditionalHumanFemaleOverrideAnimBlueprints;               // 0x1DD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ServerExtraWorldSingletonActorClasses;                     // 0x1DE8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bForceServerUseDinoList;                                   // 0x1DF8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LR5R[0x7];                                     // 0x1DF9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ExtraStackedGameDataClasses;                               // 0x1E00(0x0010) (ZeroConstructor, Transient)
	TArray<struct FHairStyleDefinition>                HeadHairStyleDefinitions;                                  // 0x1E10(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FHairStyleDefinition>                FacialHairStyleDefinitions;                                // 0x1E20(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FHairStyleDefinition>                AdditionalHeadHairStyleDefinitions;                        // 0x1E30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FHairStyleDefinition>                AdditionalFacialHairStyleDefinitions;                      // 0x1E40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  GenericWaterPostprocessAmbientSound;                       // 0x1E50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OverridePlayerDataClass;                                   // 0x1E58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               AllDinosAchievementNameTags;                               // 0x1E60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  GenericArrowPickedUpSound;                                 // 0x1E70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  UnlockIcon;                                                // 0x1E78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      WheelFolderColor;                                          // 0x1E80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      WheelBackColor;                                            // 0x1E84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             CorpseLocatorEffect;                                       // 0x1E88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MaxInventoryIcon;                                          // 0x1E90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemSkinIcon;                                              // 0x1E98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<TEnumAsByte<Engine_ECollisionChannel>>      SkeletalPhysCustomBodyAdditionalIgnores;                   // 0x1EA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  ActionWheelClickSound;                                     // 0x1EB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_GenericBoardPassenger;                               // 0x1EB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_GenericUnboardPassenger;                             // 0x1EC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_CraftingTabToggle;                                   // 0x1EC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             LockedToSeatingStructureParticle;                          // 0x1ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GenericBatteryItemClass;                                   // 0x1ED8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OQOM[0x50];                                    // 0x1EE0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              GenesisSeasonPassItems;                                    // 0x1F30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      SimpleDestroyedMeshActorClass;                             // 0x1F40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              DefaultTradableOptions;                                    // 0x1F48(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              AdditionalTradableOptions;                                 // 0x1F58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    AlwaysAllowBuffClasses;                                    // 0x1F68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrinderItemReplacer>                GrinderReplacements;                                       // 0x1F78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FInvalidReferenceRedirector>         InvalidReferenceRedirects;                                 // 0x1F88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FInvalidReferenceRedirector>         AdditionalInvalidReferenceRedirects;                       // 0x1F98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bWantsToRunMissions;                                       // 0x1FA8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I5GY[0x7];                                     // 0x1FA9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CoreWorldBuffDefinitions;                                  // 0x1FB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AdditionalWorldBuffDefinitions;                            // 0x1FB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UPrimalWorldBuffData*                        WorldBuffData;                                             // 0x1FC8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PointOfInterest_IndicatorColor_Default;                    // 0x1FD0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PointOfInterest_IndicatorColor_ObjectiveComplete;          // 0x1FE0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PointOfInterest_ProgressBarColor_TamingAffinity;           // 0x1FF0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PointOfInterest_Icon_TamingInProgress;                     // 0x2000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PointOfInterest_Icon_TamingComplete;                       // 0x2008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GlobalUIDataClass;                                         // 0x2010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FWorldDefaultItemSet>                DefaultMapItemSets;                                        // 0x2018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWorldDefaultItemSet>                AdditionalDefaultMapItemSets;                              // 0x2028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FExtraEggItem>                       ExtraEggItems;                                             // 0x2038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FExtraEggItem>                       AdditionalExtraEggItems;                                   // 0x2048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UStaticMesh*                                 CopySettingsVisualIndicatorMesh;                           // 0x2058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          CopySettingsVisualIndicatorMaterial;                       // 0x2060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FSlateColor>                         SubtitleColors;                                            // 0x2068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalGameData");
		return ptr;
	}



	void TickedWorld(class UWorld* TheWorld, float DeltaTime);
	bool STATIC_LocalIsPerMapExplorerNoteUnlocked(int ExplorerNoteIndex);
	bool STATIC_LocalIsGlobalExplorerNoteUnlocked(int ExplorerNoteIndex);
	void LoadedWorld(class UWorld* TheWorld);
	float GetXPMax(TEnumAsByte<ShooterGame_ELevelExperienceRampType> levelType);
	class UClass* GetRedirectedClassFromRedirector(const struct FInvalidReferenceRedirector& Redirector);
	class UClass* GetRedirectedClass(const struct FString& Key, class UObject* WorldContextObject);
	float GetLevelXP(TEnumAsByte<ShooterGame_ELevelExperienceRampType> levelType, int forLevel);
	int GetLevelMax(TEnumAsByte<ShooterGame_ELevelExperienceRampType> levelType);
	struct FLevelExperienceRamp GetLevelExperienceRamp(TEnumAsByte<ShooterGame_ELevelExperienceRampType> levelType);
	class USoundBase* GetGenericCombatMusic(class APrimalCharacter* forCharacter, class APrimalCharacter* forEnemy);
	struct FString GetExplorerNoteDescription(int ExplorerNoteIndex);
	class UClass* GetDinoEntry(class UClass* DinoClass);
	struct FLinearColor GetColorForDefinition(int DefinitionIndex);
	void BPMergeModGameData(class UPrimalGameData* AnotherGameData);
	void BPInitializeGameData();
	int BPGetItemQualityIndex(float ItemRating);
	class UPrimalGameData* STATIC_BPGetGameData();
};

// Class ShooterGame.DataListEntryInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataListEntryInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryInterface");
		return ptr;
	}



};

// Class ShooterGame.PrimalItem
// 0x0AB0 (FullSize[0x0AD8] - InheritedSize[0x0028])
class UPrimalItem : public UObject
{
public:
	unsigned char                                      UnknownData_4D0D[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCanBuildStructures : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bAllowEquppingItem : 1;                                    // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bPreventEquipOnTaxidermyBase : 1;                          // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowInventoryItem : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsRepairing : 1;                                          // 0x0050(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bEquippedItem : 1;                                         // 0x0050(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bCanSlot : 1;                                              // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bUseItemColors : 1;                                        // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInitItemColors : 1;                                  // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRefreshOnDyeUsed : 1;                                     // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPostAddBuffToGiveOwnerCharacter : 1;                 // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDediAttachments : 1;                                 // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowCustomColors : 1;                                    // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowRemovalWhenDead : 1;                            // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoCraftBlueprint : 1;                                   // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideFromInventoryDisplay : 1;                             // 0x0051(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bUseItemStats : 1;                                         // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSpawnActorWhenRiding : 1;                              // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSpawnActor : 1;                                        // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDefaultCharacterAttachment : 1;                      // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseItemDurability : 1;                                    // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNewWeaponAutoFillClipAmmo : 1;                            // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyBrokenItem : 1;                                    // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsMisssionItem : 1;                                       // 0x0052(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bThrowOnHotKeyUse : 1;                                     // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBlueprint : 1;                                          // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bCanBeBlueprint : 1;                                       // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUpload : 1;                                        // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsEngram : 1;                                             // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bIsCustomRecipe : 1;                                       // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bIsFoodRecipe : 1;                                         // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bTekItem : 1;                                              // 0x0053(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowUseInInventory : 1;                                  // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemoteUseInInventory : 1;                            // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBlueprintEquippedNotifications : 1;                    // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseInWaterRestoreDurability : 1;                          // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bValidCraftingResource : 1;                                // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSetupHUDIconMaterial : 1;                            // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipRequiresDLC_ScorchedEarth : 1;                       // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipRequiresDLC_Aberration : 1;                          // 0x0054(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipRequiresDLC_Extinction : 1;                          // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipRequiresDLC_Genesis : 1;                             // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDurabilityRequirementIgnoredInWater : 1;                  // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRepair : 1;                                          // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCustomBrokenIcon : 1;                                     // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemovalFromInventory : 1;                            // 0x0055(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bFromSteamInventory : 1;                                   // 0x0055(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bIsFromAllClustersInventory : 1;                           // 0x0055(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bConsumeItemOnUse : 1;                                     // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnItemConsumed : 1;                                  // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConfirmBeforeUsing : 1;                                   // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyCanUseInWater : 1;                                    // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanUseSwimming : 1;                                       // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDescriptionOnlyItem : 1;                                // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRestoreDurabilityWhenColorized : 1;                       // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAppendPrimaryColorToName : 1;                             // 0x0056(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseScaleStatEffectivenessByDurability : 1;                // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesCreationTime : 1;                                     // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowUseWhileRiding : 1;                                  // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCraftingResourceAtFullDurability : 1;              // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGiveItemWhenUsedCopyItemStats : 1;                        // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideFromRemoteInventoryDisplay : 1;                       // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bAutoDecreaseDurabilityOverTime : 1;                       // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDragOntoOtherItemIfSameCustomData : 1;             // 0x0057(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOnItemWeaponRemoveClipAmmo : 1;                        // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOnItemSetIndexAsDestinationItemCustomData : 1;         // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportDragOntoOtherItem : 1;                             // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsItemSkin : 1;                                           // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontResetAttachmentIfNotUpdatingItem : 1;                 // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinIgnoreSkinIcon : 1;                               // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPickupEggAlertsDinos : 1;                                 // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideCustomDescription : 1;                                // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCopyCustomDescriptionIntoSpoiledItem : 1;                 // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCopyDurabilityIntoSpoiledItem : 1;                        // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCraftedRequestCustomItemDescription : 1;                  // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowCustomItemDescription : 1;                      // 0x0059(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_RNJZ : 4;                                      // 0x0059(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPPreventUseOntoItem : 1;                              // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSkinDisableWhenSubmerged : 1;                             // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsAbstractItem : 1;                                       // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventItemSkins : 1;                                     // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyCanUseInFalling : 1;                                  // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDropDestruction : 1;                                 // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBeArkTributeItem : 1;                                  // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowInvalidItemVersion : 1;                              // 0x005A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSpawnActorRelativeLoc : 1;                             // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSpawnActorTakeOwnerRotation : 1;                       // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseEquippedItemBlueprintTick : 1;                         // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseEquippedItemNativeTick : 1;                            // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSpawnActorOnWaterOnly : 1;                                // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoTameSpawnedActor : 1;                                 // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowItemRatingAsPercent : 1;                              // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventArmorDurabiltyConsumption : 1;                     // 0x005B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsEgg : 1;                                                // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsCookingIngredient : 1;                                  // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDragClearDyedItem : 1;                                    // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeprecateItem : 1;                                        // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_R33S : 1;                                      // 0x005C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bItemSkinKeepOriginalWeaponTemplate : 1;                   // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinKeepOriginalIcon : 1;                             // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinReceiveOwnerEquippedBlueprintEvents : 1;          // 0x005C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinReceiveOwnerEquippedBlueprintTick : 1;            // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinAllowEquipping : 1;                               // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDisplayInInventory : 1;                              // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDroppedItemAllowDinoPickup : 1;                           // 0x005D(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCraftDontActuallyGiveItem : 1;                            // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUseWhenSleeping : 1;                               // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideRepairingRequirements : 1;                        // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bScaleOverridenRepairingRequirements : 1;                  // 0x005D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUseItemAddCharacterStatsOnDinos : 1;                 // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyEquipWhenUnconscious : 1;                             // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventConsumableWhileHandcuffed : 1;                // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideExactClassCraftingRequirement : 1;                // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventConsumeItemOnDrag : 1;                             // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowGrinding : 1;                                   // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventGrinding : 1;                                 // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bDeprecateBlueprint : 1;                                   // 0x005E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDinoAutoConsume : 1;                               // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDinoAutoHealingItem : 1;                                // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPAllowRemoteAddToInventory : 1;                          // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPAllowRemoteRemoveFromInventory : 1;                     // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentHatHideItemHeadHair : 1;                         // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentHatHideItemFacialHair : 1;                       // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentForceHairHiding : 1;                             // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemoveFromSteamInventory : 1;                        // 0x005F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPInventoryNotifyCraftingFinished : 1;                    // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckBPAllowCrafting : 1;                                 // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowAddToInventory : 1;                             // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventItemBlueprint : 1;                                 // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUseByDinos : 1;                                    // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUseByHumans : 1;                                   // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPCanUse : 1;                                             // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowOverrideItemAutoDecreaseDurability : 1;              // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCopyItemDurabilityFromCraftingResource : 1;               // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsInitialItem : 1;                                        // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bPickupEggForceAggro : 1;                                  // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClearSkinOnInventoryRemoval : 1;                          // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomAutoDecreaseDurabilityPerInterval : 1;         // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomInventoryWidgetText : 1;                       // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomInventoryWidgetTextColor : 1;                  // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomInventoryWidgetTextForBlueprint : 1;           // 0x0061(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSkinnedBPCustomInventoryWidgetText : 1;                // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomDurabilityText : 1;                            // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomDurabilityTextColor : 1;                       // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInitFromItemNetInfo : 1;                             // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInitializeItem : 1;                                  // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemNetInfo : 1;                                  // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bItemSkinKeepOriginalItemName : 1;                         // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUploadingWeaponClipAmmo : 1;                       // 0x0062(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventNativeItemBroken : 1;                              // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bResourcePreventGivingFromDemolition : 1;                  // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNameForceNoStatQualityRank : 1;                           // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysLearnedEngram : 1;                                  // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreMinimumUseIntervalForDinoAutoEatingFood : 1;        // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUnappliedItemSkinIgnoreItemAttachments : 1;               // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideMoreOptionsIfNonRemovable : 1;                        // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemDescription : 1;                              // 0x0063(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCrafted : 1;                                         // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemName : 1;                                     // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUseAtTameLimit : 1;                                // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDivideTimeToCraftByGlobalCropGrowthSpeed : 1;             // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCheatGive : 1;                                     // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsingRequiresStandingOnSolidGround : 1;                   // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAddedAttachments : 1;                                // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPConsumeProjectileImpact : 1;                         // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideProjectileType : 1;                          // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsableWithTekGrenadeLauncher : 1;                         // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyDropped : 1;                                   // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bThrowUsesSecondaryActionDrop : 1;                         // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemIcon : 1;                                     // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSlottedTick : 1;                                       // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPDrawItemIcon : 1;                                    // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPForceAllowRemoteAddToInventory : 1;                  // 0x0065(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSkinAddWeightToSkinnedItem : 1;                           // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsValidForCrafting : 1;                              // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideCraftingConsumption : 1;                     // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMergeCustomDataFromCraftingResources : 1;                 // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDrawingItemButtonIcon : 1;                          // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCensoredItemSkin : 1;                                     // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemDurabilityPercentage : 1;                     // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPEquippedItemOnXPEarning : 1;                         // 0x0066(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysTriggerTributeDownloaded : 1;                       // 0x0067(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeferWeaponBeginPlayToAssociatedItemSetTime : 1;          // 0x0067(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsSPlusItem : 1;                                          // 0x0067(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventRemovingClipAmmo : 1;                              // 0x0067(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCustomBrokenOverlayIcon : 1;                              // 0x0067(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	class USkeletalMesh*                               CostumeDinoSaddleOverrideMesh;                             // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoAutoHealingThresholdPercent;                           // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoAutoHealingUseTimeInterval;                            // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ArkTributeVersion;                                         // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0JBX[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              EquipRequiresExplicitOwnerClasses;                         // 0x0080(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               EquipRequiresExplicitOwnerTags;                            // 0x0090(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      BuffToGiveOwnerWhenEquipped;                               // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     BuffToGiveOwnerWhenEquipped_BlueprintPath;                 // 0x00A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_J3HG[0x4];                                     // 0x00B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ExpirationTimeUTC;                                         // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                BlueprintAllowMaxCraftings;                                // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CYCG[0x4];                                     // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     AbstractItemCraftingDescription;                           // 0x00C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ItemSkinUseOnItemClasses;                                  // 0x00D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ItemSkinPreventOnItemClasses;                              // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  ItemBrokenSound;                                           // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   UseItemSound;                                              // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  EquipSound;                                                // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UnEquipSound;                                              // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UsedOnOtherItemSound;                                      // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  RemovedFromOtherItemSound;                                 // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomChanceToBeBlueprint;                                 // 0x0128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A336[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FActorClassAttachmentInfo>           ActorClassAttachmentInfos;                                 // 0x0130(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	unsigned char                                      UnknownData_O47F[0x18];                                    // 0x0140(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemAttachmentInfo>                 ItemSkinAddItemAttachments;                                // 0x0158(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	TEnumAsByte<ShooterGame_EPrimalItemType>           MyItemType;                                                // 0x0168(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EPrimalConsumableType>     MyConsumableType;                                          // 0x0169(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EPrimalEquipmentType>           MyEquipmentType;                                           // 0x016A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9L9G[0x1];                                     // 0x016B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ExtraItemCategoryFlags;                                    // 0x016C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ItemIconScale;                                             // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     BlockingShieldFPVTranslation;                              // 0x0174(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    BlockingShieldFPVRotation;                                 // 0x0180(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShieldBlockDamagePercentage;                               // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShieldDamageToDurabilityRatio;                             // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1UH0[0x4];                                     // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                PlayAnimationOnUse;                                        // 0x0198(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHideDuringEquipAnimation;                                 // 0x01A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MDE8[0x7];                                     // 0x01A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                ShowAnimationMale;                                         // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ShowAnimationFemale;                                       // 0x01B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                HideAnimationMale;                                         // 0x01B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                HideAnimationFemale;                                       // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CraftingMinLevelRequirement;                               // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CraftingCooldownInterval;                                  // 0x01CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CraftingActorToSpawn;                                      // 0x01D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BlueprintBackgroundOverrideTexture;                        // 0x01D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     CraftItemButtonStringOverride;                             // 0x01E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      UseSpawnActorClass;                                        // 0x01F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     UseSpawnActorLocOffset;                                    // 0x01F8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SlotIndex;                                                 // 0x0204(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FItemNetID                                  ItemId;                                                    // 0x0208(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                ItemCustomData;                                            // 0x0210(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G1W5[0x4];                                     // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ItemCustomClass;                                           // 0x0218(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                ItemSkinTemplateIndex;                                     // 0x0220(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NCYB[0x4];                                     // 0x0224(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ItemSkinTemplate;                                          // 0x0228(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              ItemRating;                                                // 0x0230(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	uint16_t                                           CraftQueue;                                                // 0x0234(0x0002) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VEWF[0x2];                                     // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CraftingSkill;                                             // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BUCX[0x4];                                     // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomItemName;                                            // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	struct FString                                     CustomItemDescription;                                     // 0x0250(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	TArray<struct FColor>                              CustomColors;                                              // 0x0260(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	TArray<struct FCraftingResourceRequirement>        CustomResourceRequirements;                                // 0x0270(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	double                                             NextCraftCompletionTime;                                   // 0x0280(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class UPrimalInventoryComponent>    OwnerInventory;                                            // 0x0288(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      ItemQualityIndex;                                          // 0x0290(0x0001) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UNLX[0x7];                                     // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SupportDragOntoItemClass;                                  // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              SupportDragOntoItemClasses;                                // 0x02A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              SkinWeaponTemplates;                                       // 0x02B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              SupportAmmoItemForWeaponSkin;                              // 0x02C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              SkinWeaponTemplatesForAmmo;                                // 0x02D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      AmmoSupportDragOntoWeaponItemWeaponTemplate;               // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AmmoSupportDragOntoWeaponItemWeaponTemplates;              // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUseItemAddCharacterStatusValue>     UseItemAddCharacterStatusValues;                           // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              Ingredient_WeightIncreasePerQuantity;                      // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Ingredient_FoodIncreasePerQuantity;                        // 0x030C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Ingredient_HealthIncreasePerQuantity;                      // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Ingredient_WaterIncreasePerQuantity;                       // 0x0314(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Ingredient_StaminaIncreasePerQuantity;                     // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5XTP[0x4];                                     // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DescriptiveNameBase;                                       // 0x0320(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemDescription;                                           // 0x0330(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DurabilityStringShort;                                     // 0x0340(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DurabilityString;                                          // 0x0350(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     CustomRepairText;                                          // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DroppedItemLifeSpanOverride;                               // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K56Z[0x4];                                     // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 DroppedMeshOverride;                                       // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          DroppedMeshMaterialOverride;                               // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     DroppedMeshOverrideScale3D;                                // 0x0388(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VR48[0x4];                                     // 0x0394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SpoilingItem;                                              // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              UseRequiresOwnerActorClasses;                              // 0x03A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      PreservingItemClass;                                       // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreservingItemSpoilingTimeMultiplier;                      // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SpoilingTime;                                              // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CraftingConsumesDurability;                                // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RepairResourceRequirementMultiplier;                       // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseItemWeight;                                            // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityIncreaseMultiplier;                              // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NewItemDurabilityOverride;                                 // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityDecreaseMultiplier;                              // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseDecreaseDurability;                                     // 0x03D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AutoDurabilityDecreaseInterval;                            // 0x03DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AutoDecreaseMinDurability;                                 // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AutoDecreaseDurabilityAmountPerInterval;                   // 0x03E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseDecreaseDurabilityMin;                                  // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseMinDurabilityRequirement;                               // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceRarity;                                            // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BlueprintTimeToCraft;                                      // 0x03F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinBlueprintTimeToCraft;                                   // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BlueprintWeight;                                           // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinimumUseInterval;                                        // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeForFullRepair;                                         // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseCraftingXP;                                            // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseRepairingXP;                                           // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FCraftingResourceRequirement>        BaseCraftingResourceRequirements;                          // 0x0410(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCraftingResourceRequirement>        OverrideRepairingRequirements;                             // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FItemStatInfo                               ItemStatInfos[0x8];                                        // 0x0430(0x0120) (Edit, DisableEditOnInstance)
	uint16_t                                           ItemStatValues[0x8];                                       // 0x0550(0x0010) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	uint32_t                                           WeaponClipAmmo;                                            // 0x0560(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              WeaponFrequency;                                           // 0x0564(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastTimeToShowInfo;                                        // 0x0568(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      ItemVersion;                                               // 0x0570(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UD9J[0x3];                                     // 0x0571(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ItemDurability;                                            // 0x0574(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MinItemDurability;                                         // 0x0578(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SavedDurability;                                           // 0x057C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      WeaponTemplate;                                            // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BrokenIcon;                                                // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  CustomBrokenOverlayIcon;                                   // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemIcon;                                                  // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  AlternateItemIconBelowDurability;                          // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AlternateItemIconBelowDurabilityValue;                     // 0x05A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityNotifyThresholdValue;                            // 0x05AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          ItemIconMaterialParent;                                    // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int16_t                                            ItemColorID[0x6];                                          // 0x05B8(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int16_t                                            PreSkinItemColorID[0x6];                                   // 0x05C4(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseItemColor[0x6];                                        // 0x05D0(0x0006) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H8SL[0x2];                                     // 0x05D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      RandomColorSet;                                            // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ItemIconMaterial;                                          // 0x05E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    HUDIconMaterial;                                           // 0x05E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ItemQuantity;                                              // 0x05F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	int                                                MaxItemQuantity;                                           // 0x05F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<TEnumAsByte<Engine_EPrimalEquipmentType>>   EquippedHideOtherEquipmentAttachTypes;                     // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<uint64_t>                                   SteamItemUserIDs;                                          // 0x0608(0x0010) (ZeroConstructor)
	class UClass*                                      StructureToBuild;                                          // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GiveItemWhenUsed;                                          // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              CraftingRequiresInventoryComponent;                        // 0x0628(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      DroppedItemTemplateOverride;                               // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DroppedItemTemplateForSecondryAction;                      // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffToGiveOwnerCharacter;                                  // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviewCameraRotation;                                     // 0x0650(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviewCameraPivotOffset;                                  // 0x065C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDistanceScaleFactor;                          // 0x0668(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDefaultZoomMultiplier;                        // 0x066C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraMaxZoomMultiplier;                            // 0x0670(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G5U4[0x44];                                    // 0x0674(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             CreationTime;                                              // 0x06B8(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastAutoDurabilityDecreaseTime;                            // 0x06C0(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastUseTime;                                               // 0x06C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y3EH[0x8];                                     // 0x06D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxCustomItemDescriptionLength;                            // 0x06D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                TempSlotIndex;                                             // 0x06DC(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                LastSlotIndex;                                             // 0x06E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AShooterWeapon>               AssociatedWeapon;                                          // 0x06E4(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RUF9[0x4];                                     // 0x06EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalItem*                                 MyItemSkin;                                                // 0x06F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UPrimalItem*                                 SkinnedOntoItem;                                           // 0x06F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AShooterCharacter>            LastOwnerPlayer;                                           // 0x0700(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FCropItemPhaseData>                  CropPhasesData;                                            // 0x0708(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              CropGrowingFertilizerConsumptionRate;                      // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropMaxFruitFertilizerConsumptionRate;                     // 0x071C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropGrowingWaterConsumptionRate;                           // 0x0720(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropMaxFruitWaterConsumptionRate;                          // 0x0724(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CropMaxFruits;                                             // 0x0728(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropNoFertilizerOrWaterCacheReductionRate;                 // 0x072C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FertilizerEffectivenessMultiplier;                         // 0x0730(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggAlertDinosAggroAmount;                                  // 0x0734(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggAlertDinosAggroRadius;                                  // 0x0738(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1RCT[0x4];                                     // 0x073C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               EggAlertDinosAggroTags;                                    // 0x0740(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              EggAlertDinosForcedAggroTime;                              // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggMaximumDistanceFromOriginalDropToAlertDinos;            // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      BrokenGiveItemClass;                                       // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClearColorDurabilityThreshold;                             // 0x0760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IGUR[0x4];                                     // 0x0764(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ItemClassToUseAsInitialCustomData;                         // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     OriginalItemDropLocation;                                  // 0x0770(0x000C) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DurabilityBarColorForeground;                              // 0x077C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DurabilityBarColorBackground;                              // 0x078C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G9QD[0x4];                                     // 0x079C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      OverrideCooldownTimeItemClass;                             // 0x07A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinDurabilityForCraftingResource;                          // 0x07A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceRequirementIncreaseRatingPower;                    // 0x07AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceRequirementRatingScale;                            // 0x07B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceRequirementRatingIncreasePercentage;               // 0x07B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             NextSpoilingTime;                                          // 0x07B8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastSpoilingTime;                                          // 0x07C0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             DefaultFolderPaths;                                        // 0x07C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemRatingString;                                          // 0x07D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DefaultWeaponMeshName;                                     // 0x07E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KXV7[0x8];                                     // 0x07F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EngramRequirementItemClassOverride;                        // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U2QV[0x10];                                    // 0x0800(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  ExtraThrowItemSound;                                       // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SpawnOnWaterEncroachmentBoxExtent;                         // 0x0818(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_49QA[0x4];                                     // 0x0824(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              OnlyUsableOnSpecificClasses;                               // 0x0828(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSaddlePassengerSeatDefinition>      SaddlePassengerSeats;                                      // 0x0838(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       SaddleOverrideRiderSocketName;                             // 0x0848(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EggDinoClassToSpawn;                                       // 0x0850(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      EggNumberOfLevelUpPointsApplied[0xC];                      // 0x0858(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              EggTamedIneffectivenessModifier;                           // 0x0864(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      EggColorSetIndices[0x6];                                   // 0x0868(0x0006) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CY0Q[0x2];                                     // 0x086E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                EggGenderOverride;                                         // 0x0870(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              EggLoseDurabilityPerSecond;                                // 0x0874(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraEggLoseDurabilityPerSecondMultiplier;                 // 0x0878(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggMinTemperature;                                         // 0x087C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggMaxTemperature;                                         // 0x0880(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggDroppedInvalidTempLoseItemRatingSpeed;                  // 0x0884(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ShieldHitSound;                                            // 0x0888(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RecipeCraftingSkillScale;                                  // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CustomItemID;                                              // 0x0894(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              AddDinoTargetingRange;                                     // 0x0898(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageTorpidityArmorRating;                                // 0x089C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IndirectTorpidityArmorRating;                              // 0x08A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0ZHB[0x4];                                     // 0x08A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      UseParticleEffect;                                         // 0x08A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UseParticleEffectSocketName;                               // 0x08B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseGiveDinoTameAffinityPercent;                            // 0x08B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L4GC[0x4];                                     // 0x08BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              CraftingAdditionalItemsToGive;                             // 0x08C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                LastValidItemVersion;                                      // 0x08D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalTameAffinityMultiplier;                              // 0x08D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CraftingGiveItemCount;                                     // 0x08D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CraftingGivesItemQuantityOverride;                         // 0x08DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UseItemOnItemSound;                                        // 0x08E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UseUnlocksEmoteName;                                       // 0x08E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AQBA[0x8];                                     // 0x08F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoAncestorsEntry>                 EggDinoAncestors;                                          // 0x08F8(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<struct FDinoAncestorsEntry>                 EggDinoAncestorsMale;                                      // 0x0908(0x0010) (ZeroConstructor, Transient, SaveGame)
	int                                                EggRandomMutationsFemale;                                  // 0x0918(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                EggRandomMutationsMale;                                    // 0x091C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              EquippingRequiresEngrams;                                  // 0x0920(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCustomItemData>                     CustomItemDatas;                                           // 0x0930(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	struct FString                                     OverrideUseString;                                         // 0x0940(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      SendToClientClassOverride;                                 // 0x0950(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     CrafterCharacterName;                                      // 0x0958(0x0010) (ZeroConstructor, Transient, SaveGame)
	struct FString                                     CrafterTribeName;                                          // 0x0968(0x0010) (ZeroConstructor, Transient, SaveGame)
	float                                              CraftedSkillBonus;                                         // 0x0978(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CraftingSkillQualityMultiplierMin;                         // 0x097C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CraftingSkillQualityMultiplierMax;                         // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SinglePlayerCraftingSpeedMultiplier;                       // 0x0984(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NoLevelEngramSortingPriority;                              // 0x0988(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CustomFlags;                                               // 0x098C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CustomTag;                                                 // 0x0990(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EquippedReduceDurabilityInterval;                          // 0x0998(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NBFH[0x4];                                     // 0x099C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastEquippedReduceDurabilityTime;                          // 0x09A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EquippedReduceDurabilityPerInterval;                       // 0x09A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ItemStatClampsMultiplier;                                  // 0x09AC(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              MaxDurabiltiyOverride;                                     // 0x09B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PQUB[0x14];                                    // 0x09B4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NextRepairPercentage;                                      // 0x09C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HHXY[0x4];                                     // 0x09CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 NetDroppedMeshOverride;                                    // 0x09D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          NetDroppedMeshMaterialOverride;                            // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     NetDroppedMeshOverrideScale3D;                             // 0x09E0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bNonBlockingShield : 1;                                    // 0x09EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetInfoFromClient : 1;                                    // 0x09EC(0x0001) BIT_FIELD (SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_EUF2 : 1;                                      // 0x09EC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisableItemUITooltip : 1;                                 // 0x09EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDepositDropping : 1;                               // 0x09EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowSkinColorization : 1;                           // 0x09EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ACQT[0x3];                                     // 0x09ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSlateBrush                                 WidgetCustomBrokenOverlayStyleBrush;                       // 0x09F0(0x0078) (Edit, BlueprintVisible)
	struct FColor                                      CustomBrokenBorderColor;                                   // 0x0A68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QE0Q[0x4];                                     // 0x0A6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMesh*                               DyePreviewMeshOverrideSK;                                  // 0x0A70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 DyePreviewMeshOverrideSM;                                  // 0x0A78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  AccessoryActivatedIconOverride;                            // 0x0A80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CustomItemTooltipOverride;                                 // 0x0A88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBlueprintAnimNotifications;                            // 0x0A90(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPPreventUpload;                                       // 0x0A91(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1O2P[0x2];                                     // 0x0A92(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       EquippingCosmeticRequiresUnlockedEmoteName;                // 0x0A94(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CustomInventoryWidgetTextVerticalOffset;                   // 0x0A9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseCustomContextMenuOptions;                              // 0x0AA0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QT6D[0x7];                                     // 0x0AA1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TopLevelCustomContextMenuOptions;                          // 0x0AA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCustomContextSubmenu>               CustomContextSubMenus;                                     // 0x0AB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCustomContextMenuData>              CustomContextOptionData;                                   // 0x0AC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItem");
		return ptr;
	}



	bool UseItemOntoItem(class UPrimalItem* DestinationItem, int AdditionalData);
	void Use(bool bOverridePlayerInput);
	void UpdatedItem(bool ResetUploadTime);
	void UnequipWeapon(bool bDelayedUnequip);
	bool STATIC_StaticGetItemNameAndIcon(class UClass* ItemType, struct FString* OutItemName, class UTexture2D** OutItemIcon, bool bShortName, class AShooterPlayerController* ForPC);
	int STATIC_StaticGetDinoColorSetIndexForItemColorID(int ID);
	struct FLinearColor STATIC_StaticGetColorForItemColorID(int ID);
	void SlottedTick(float DeltaSeconds);
	void SkinEquippedBlueprintTick(class UPrimalItem* OwnerItem, float DeltaSeconds);
	void SetUnreplicatedEggData(const struct FUnreplicatedEggData& EggData);
	void SetQuantity(int NewQuantity, bool ShowHUDNotification);
	void SetItemStatValues(int idx, int val);
	void SetItemStatInfo(int idx, const struct FItemStatInfo& val);
	void SetItemColors(TArray<int> ColorIDs);
	void SetCustomItemData(const struct FCustomItemData& InData);
	void ServerUpdatedWeaponClipAmmo();
	void ServerSendItemExecCommandToPlayer(class AShooterPlayerController* ToPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendItemExecCommandToEveryone(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerRemoveWeaponAccessoryOnly();
	void ServerRemoveItemSkinOnly();
	void ServerRemoveItemSkin();
	void SelectedCustomContextMenuItem(const struct FName& ContextItem, class AShooterPlayerController* ForPC);
	void RepairItem(bool bIgnoreInventoryRequirement, float UseNextRepairPercentage, float RepairSpeedMultiplier);
	void RemoveWeaponAccessory();
	void RemoveFromSlot(bool bForce);
	void RemovedSkinFromItem(class UPrimalItem* FromOwnerItem, bool bIsFirstTime);
	void RemoveCustomItemData(const struct FName& CustomDataName);
	void RemoveClipAmmo(bool bDontUpdateItem);
	void RefreshAttachments(bool bRefreshDefaultAttachments, bool isShieldSpecificRefresh, bool bIsFromUpdateItem);
	void OverrideItemRating(float rating);
	class USoundBase* OverrideCrouchingSound(class USoundBase* InSound, bool bIsProne, int soundState);
	void NotifyEditText(class AShooterPlayerController* PC);
	TArray<struct FCustomItemData> STATIC_MergeCustomItemDatas(TArray<struct FCustomItemData> DataSet1, TArray<struct FCustomItemData> DataSet2);
	bool MeetRepairingRequirements(class UPrimalInventoryComponent* compareInventoryComp, bool bIsForCraftQueueAddition);
	struct FString STATIC_MakeRepairingRequirementsString(class UPrimalInventoryComponent* compareInventoryComp, TArray<struct FCraftingResourceRequirement> InRepairingRequirements);
	void LocalUse(class AShooterPlayerController* ForPC);
	bool IsValidForCrafting();
	bool IsUsableConsumable();
	bool IsOwnerInWater();
	bool IsOwnerInNoPainWater();
	bool IsCustomContextMenuItemEnabled(const struct FName& ContextItem);
	bool IsCooldownReadyForUse();
	bool IsBroken();
	bool IsActiveEventItem(class UWorld* World);
	void InitNewItem(float ItemQuality, class UPrimalInventoryComponent* toInventory, float MaxItemDifficultyClamp, float MinRandomQuality);
	void InitializeItem(bool bForceReinit, class UWorld* OptionalInitWorld);
	int IncrementItemQuantity(int amount, bool bRepicateToClient, bool bDontUpdateWeight, bool bIsFromUseConsumption, bool bIsArkTributeItem, bool bIsFromCraftingConsumption);
	bool HasCustomItemData(const struct FName& CustomDataName);
	bool HasBuffToGiveOwnerWhenEquipped();
	float HandleShieldDamageBlocking(class AShooterCharacter* ForShooterCharacter, float DamageIn, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	class UClass* GetWeaponTemplateMeleeDamageType();
	float GetWeaponTemplateMeleeDamageAmount();
	class UClass* GetWeaponTemplateHarvestDamageType();
	float GetWeaponTemplateHarvestDamageMultiplier();
	float GetWeaponTemplateDurabilityToConsumePerMeleeHit();
	int GetWeaponClipAmmo();
	float GetUseItemAddCharacterStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	void GetUnreplicatedEggData(struct FUnreplicatedEggData* EggData);
	float GetSpoilingTime();
	struct FString GetRepairingRequirementsString(class UPrimalInventoryComponent* compareInventoryComp, bool bUseBaseRequeriments, float OverrideRepairPercent);
	float GetRemainingCooldownTime();
	class UClass* STATIC_GetProjectileType(class UClass* ItemType);
	class AShooterCharacter* GetOwnerPlayer();
	int GetMaxItemQuantity(class UObject* WorldContextObject);
	int GetMaximumAdditionalCrafting(class UPrimalInventoryComponent* forComp, class AShooterPlayerController* PC);
	float GetItemWeight(bool bJustOneQuantity, bool bForceNotBlueprintWeight);
	int GetItemStatValues(int idx);
	struct FString GetItemStatString(TEnumAsByte<ShooterGame_EPrimalItemStat> statType);
	float GetItemStatModifier(TEnumAsByte<ShooterGame_EPrimalItemStat> statType);
	struct FItemStatInfo GetItemStatInfo(int idx);
	struct FString GetItemShortName();
	struct FItemNetInfo GetItemNetInfo(bool bIsForSendingToClient);
	TArray<struct FLinearColor> GetItemDyeColors();
	bool GetItemCustomColor(int ColorRegion, struct FLinearColor* outColor);
	int STATIC_GetItemColorIDFromDyeItemID(int MasterItemListIndex);
	int GetItemColorID(int theRegion);
	void GetItemBytes(TArray<unsigned char>* Bytes);
	struct FString GetInventoryIconDisplayText();
	class UPrimalInventoryComponent* GetInitializeItemOwnerInventory();
	class UMaterialInterface* GetHUDIconMaterial();
	int GetEngramRequirementLevel();
	float GetEggHatchTimeRemaining(class UWorld* TheWorld, float additionalMultiplier);
	float GetDurabilityPercentage();
	bool GetCustomItemData(const struct FName& CustomDataName, struct FCustomItemData* OutData);
	int GetCraftingResourceRequirement(int CraftingResourceIndex);
	TArray<struct FCraftingResourceRequirement> GetCraftingRequirements(TArray<struct FCraftingResourceRequirement>* CombinedRequirements, float Percent);
	class UActorComponent* GetComponentToAttach(int attachmentIndex, class AActor* UseOtherActor);
	class UClass* GetBuffToGiveOwnerWhenEquipped(bool bForceResolveSoftRef);
	int GetAttachedComponentsNum();
	class UActorComponent* GetAttachedComponent(int attachmentIndex, class AActor* UseOtherActor);
	TEnumAsByte<Engine_EPrimalEquipmentType> GetActualEquipmentType(bool bGetBaseValue);
	void FinishRepairing();
	void EquippedBlueprintTick(float DeltaSeconds);
	bool DoesItemUseColorRegion(int RegionIndex);
	class UPrimalItem* STATIC_CreateItemFromNetInfo(const struct FItemNetInfo& newItemInfo);
	class UPrimalItem* STATIC_CreateFromBytes(TArray<unsigned char> Bytes);
	void Crafted(bool bWasCraftedFromEngram);
	void CraftBlueprint(bool bConsumeResources);
	void ClientUpdatedWeaponClipAmmo();
	void ClampStats(class UPrimalInventoryComponent* inventory);
	bool CheckForInventoryDupes();
	bool CanUseWithItemSource(class UPrimalItem* DestinationItem);
	bool CanUseWithItemDestination(class UPrimalItem* SourceItem);
	bool CanUse(bool bIgnoreCooldown);
	bool CanSpoil();
	bool CanRepair(bool bIgnoreInventoryRequirement);
	bool CanFullyCraft();
	bool CanDrop();
	bool CanCraft();
	void BPUsedOntoItem(class UPrimalItem* DestinationItem, int AdditionalData);
	void BPTributeItemUploaded(class UObject* ContextObject);
	void BPTributeItemDownloaded(class UObject* ContextObject);
	bool BPSupportUseOntoItem(class UPrimalItem* DestinationItem);
	void BPSetWeaponClipAmmo(int NewClipAmmo);
	void BPSetupHUDIconMaterial(class UMaterialInstanceDynamic* theMID);
	void BPServerVerifyStructurePlacementData();
	void BPServerHandleItemNetExecCommand(class AShooterPlayerController* ForPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	bool BPProcessEditText(class AShooterPlayerController* ForPC, const struct FString& TextToUse);
	bool BPPreventWeaponEquip();
	bool BPPreventUseOntoItem(class UPrimalItem* DestinationItem);
	bool BPPreventUpload();
	bool BPPreventEquip(class UPrimalInventoryComponent* toInventory);
	void BPPreUseItem();
	void BPPreInitializeItem(class UWorld* OptionalInitWorld);
	void BPPostInitializeItem(class UWorld* OptionalInitWorld);
	void BPPostAddBuffToGiveOwnerCharacter(class APrimalCharacter* OwnerCharacter, class APrimalBuff* Buff);
	class UClass* BPOverrideProjectileType();
	void BPOverrideCraftingConsumption(int AmountToConsume);
	void BPOnItemConsumed(class UPrimalInventoryComponent* inventory, int remainingQuantity);
	void BPNotifyDropped(class APrimalCharacter* FromCharacter, bool bWasThrown);
	bool BPMatchesItemID(int ItemID1, int ItemID2);
	struct FItemNetID STATIC_BPMakeItemID(int TheItemID1, int TheItemID2);
	void BPItemBroken();
	void BPItemBelowDurabilityThreshold();
	bool BPIsValidForCrafting();
	void BPInitItemColors(TArray<int>* ColorIDs);
	void BPInitIconMaterial();
	void BPInitFromItemNetInfo();
	struct FString BPGetSkinnedCustomInventoryWidgetText();
	int BPGetItemStatRandomValue(float QualityLevel, int idx);
	float BPGetItemStatModifier(int idx, int ItemStatValue);
	void BPGetItemNetInfo();
	struct FString BPGetItemName(const struct FString& ItemNameIn, class AShooterPlayerController* ForPC);
	void BPGetItemID(int* ItemID1, int* ItemID2);
	class UTexture2D* BPGetItemIcon(class AShooterPlayerController* ForPC);
	float BPGetItemDurabilityPercentage();
	struct FString BPGetItemDescription(const struct FString& InDescription, bool bGetLongDescription, class AShooterPlayerController* ForPC);
	class UParticleSystem* BPGetFuelParticleSystemOverride(class APrimalStructure* ForStructure);
	class USoundBase* BPGetFuelAudioOverride(class APrimalStructure* ForStructure);
	struct FColor BPGetCustomInventoryWidgetTextColor();
	struct FString BPGetCustomInventoryWidgetText();
	class UMaterialInterface* BPGetCustomIconMaterialParent();
	struct FColor BPGetCustomDurabilityTextColor();
	struct FString BPGetCustomDurabilityText();
	float BPGetCustomAutoDecreaseDurabilityPerInterval();
	bool BPForceAllowRemoteAddToInventory(class UPrimalInventoryComponent* toInventory);
	void BPEquippedItemOnXPEarning(class APrimalCharacter* forChar, float howMuchXP, TEnumAsByte<ShooterGame_EXPType> TheXPType);
	void BPDrawItemIcon(class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize, const struct FVector2D& ItemCanvasScale, bool bItemEnabled, const struct FLinearColor& TheTintColor);
	void BPCrafted();
	bool BPConsumeProjectileImpact(class AShooterProjectile* theProjectile, const struct FHitResult& HitResult);
	void BPClientHandleItemNetExecCommand(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, class AShooterPlayerController* ForPC);
	bool BPCanUse(bool bIgnoreCooldown);
	bool BPCanAddToInventory(class UPrimalInventoryComponent* toInventory);
	void STATIC_BPBreakItemID(const struct FItemNetID& ItemNetID, int* TheItemID1, int* TheItemID2);
	void BPAnimNotifyCustomState_End(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	bool BPAllowRemoteRemoveFromInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
	bool BPAllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
	struct FString BPAllowCrafting(class AShooterPlayerController* ForPC);
	void BPAddedAttachments();
	void BlueprintUsed();
	void BlueprintUnequipped();
	void BlueprintOwnerPosssessed(class AController* PossessedByController);
	void BlueprintEquipped(bool bIsFromSaveGame);
	void ApplyingSkinOntoItem(class UPrimalItem* ToOwnerItem, bool bIsFirstTime);
	void ApplyColorsToMesh(class UMeshComponent* mComp);
	void ApplyColorsFromStructure(class APrimalStructure* theStructure);
	bool AllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
	bool AllowEquipItem(class UPrimalInventoryComponent* toInventory);
	void AddToSlot(int theSlotIndex, bool bForce);
	class UPrimalItem* STATIC_AddNewItem(class UClass* ItemArchetype, class UPrimalInventoryComponent* GiveToInventory, bool bEquipItem, bool bDontStack, float ItemQuality, bool bForceNoBlueprint, int quantityOverride, bool bForceBlueprint, float MaxItemDifficultyClamp, bool CreateOnClient, class UClass* ApplyItemSkin, float MinRandomQuality, bool ClampStats, bool bIgnoreAbsoluteMaxInventory);
	void AddItemDurability(float durabilityToAdd);
};

// Class ShooterGame.AllClustersInventory
// 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
class UAllClustersInventory : public UObject
{
public:
	unsigned char                                      UnknownData_9IE1[0xC0];                                    // 0x0028(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AllClustersInventory");
		return ptr;
	}



	void OnSaveItemsFinished__DelegateSignature(bool Success, const struct FString& UserId);
	void OnRemoveAllClusterInventoryItemsFinished__DelegateSignature(bool Success, const struct FString& UserId, TArray<struct FItemNetID> ItemsIds);
	void OnReadLockFinished__DelegateSignature(bool Success, const struct FString& UserId, bool Locked);
	void OnLoadItemsFinished__DelegateSignature(bool Success, const struct FString& UserId, TArray<struct FItemNetInfo>* Items);
	void OnFinishedSaveForChangingItems(bool Success, const struct FString& UserId);
	void OnFinishedReadLockForCreateLock(bool Success, const struct FString& UserId, bool Locked);
	void OnFinishedLoadForChangingItems(bool Success, const struct FString& UserId, TArray<struct FItemNetInfo>* ArkItems);
	void OnFinishedCreateLockForChangingItems(bool Success, const struct FString& UserId);
	void OnFinishedClearLockForChangingItems(bool Success, const struct FString& UserId);
	void OnCreateLockFinished__DelegateSignature(bool Success, const struct FString& UserId);
	void OnClearLockFinished__DelegateSignature(bool Success, const struct FString& UserId);
	void OnAddAllClustersInventoryItemsFinished__DelegateSignature(bool Success, const struct FString& UserId, TArray<int> MasterIndexNum);
};

// Class ShooterGame.AnimInstance_DinoBlueprintBase
// 0x0090 (FullSize[0x03D0] - InheritedSize[0x0340])
class UAnimInstance_DinoBlueprintBase : public UAnimInstance
{
public:
	bool                                               bAllowNativeAnimations;                                    // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableBlueprint;                                         // 0x0341(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y1NA[0x2];                                     // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    RootRotationOffset;                                        // 0x0344(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RootLocationOffset;                                        // 0x0350(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSkipAnimGraph;                                            // 0x035C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X6H6[0x3];                                     // 0x035D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementAnimRate;                                          // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovementAnimRatePower;                                     // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinMovementAnimRate;                                       // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxMovementAnimRate;                                       // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingAnimSpeedTreshold;                                   // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsMoving;                                                 // 0x0374(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseAimOffset;                                             // 0x0375(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MNXC[0x2];                                     // 0x0376(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AimPitch;                                                  // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimYaw;                                                    // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBlinking;                                              // 0x0380(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KZWQ[0x3];                                     // 0x0381(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BlinkBlend;                                                // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseTurning;                                               // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseTurnInPlaceAnimation;                                  // 0x0389(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BKZS[0x2];                                     // 0x038A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TurningEnabledBlendTime;                                   // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDisabledBlendTime;                                  // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDirectionBlendTime;                                 // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTurnRateForTurnAnimation;                               // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsTurning;                                                // 0x039C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bTurningRight;                                             // 0x039D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseSwimming;                                              // 0x039E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0HYI[0x1];                                     // 0x039F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SwimmingMovingAnimSpeedThreshold;                          // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsSwimming;                                               // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseRunning;                                               // 0x03A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseRunningMovementAnimRate;                               // 0x03A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3GMJ[0x1];                                     // 0x03A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RunningMovementAnimRate;                                   // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsRunning;                                                // 0x03AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseSleepingAnim;                                          // 0x03AD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R450[0x2];                                     // 0x03AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     SleepingAnimTranslationOffset;                             // 0x03B0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsSleeping;                                               // 0x03BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseFalling;                                               // 0x03BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XERX[0x2];                                     // 0x03BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FallingAnimPlayRate;                                       // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendInTime;                                        // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendOutTime;                                       // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsFalling;                                                // 0x03CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QOHE[0x3];                                     // 0x03CD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimInstance_DinoBlueprintBase");
		return ptr;
	}



};

// Class ShooterGame.AnimInstance_DinoRootBoneName
// 0x00C0 (FullSize[0x0400] - InheritedSize[0x0340])
class UAnimInstance_DinoRootBoneName : public UAnimInstance
{
public:
	bool                                               bAllowNativeAnimations;                                    // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableBlueprint;                                         // 0x0341(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SK9U[0x2];                                     // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    RootRotationOffset;                                        // 0x0344(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RootLocationOffset;                                        // 0x0350(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IKAlpha;                                                   // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableIK;                                                // 0x0360(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableIKWhenFalling;                                     // 0x0361(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSleepingEnableIK;                                         // 0x0362(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSkipAnimGraph;                                            // 0x0363(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MovementAnimRate;                                          // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovementAnimRatePower;                                     // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinMovementAnimRate;                                       // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxMovementAnimRate;                                       // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingAnimSpeedTreshold;                                   // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingBlendInTime;                                         // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingBlendOutTime;                                        // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsMoving;                                                 // 0x0380(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseAimOffset;                                             // 0x0381(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C816[0x2];                                     // 0x0382(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AimPitch;                                                  // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimYaw;                                                    // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimOffsetPitchScale;                                       // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimOffsetYawScale;                                         // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseAlignGround;                                           // 0x0394(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QX0Z[0x3];                                     // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlignGroundAlpha;                                          // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBlinking;                                              // 0x039C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TVBR[0x3];                                     // 0x039D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BlinkBlend;                                                // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseTurning;                                               // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseTurnInPlaceAnimation;                                  // 0x03A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CEGQ[0x2];                                     // 0x03A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TurningEnabledBlendTime;                                   // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDisabledBlendTime;                                  // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDirectionBlendTime;                                 // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTurnRateForTurnAnimation;                               // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsTurning;                                                // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bTurningRight;                                             // 0x03B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseSwimming;                                              // 0x03BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U7OR[0x1];                                     // 0x03BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SwimmingMovingAnimSpeedThreshold;                          // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsSwimming;                                               // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseRunning;                                               // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseRunningMovementAnimRate;                               // 0x03C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R7OG[0x1];                                     // 0x03C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RunningMovementAnimRate;                                   // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RunningBlendInTime;                                        // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RunningBlendOutTime;                                       // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsRunning;                                                // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseSleepingAnim;                                          // 0x03D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H9AX[0x2];                                     // 0x03D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     SleepingAnimTranslationOffset;                             // 0x03D4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsSleeping;                                               // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseFalling;                                               // 0x03E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CU9P[0x2];                                     // 0x03E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FallingAnimPlayRate;                                       // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendInTime;                                        // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendOutTime;                                       // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsFalling;                                                // 0x03F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IEF5[0xF];                                     // 0x03F1(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimInstance_DinoRootBoneName");
		return ptr;
	}



};

// Class ShooterGame.AnimInstance_DinoRootTransform
// 0x00F0 (FullSize[0x0430] - InheritedSize[0x0340])
class UAnimInstance_DinoRootTransform : public UAnimInstance
{
public:
	bool                                               bAllowNativeAnimations;                                    // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableBlueprint;                                         // 0x0341(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OP33[0x2];                                     // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    RootRotationOffset;                                        // 0x0344(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RootLocationOffset;                                        // 0x0350(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DGHB[0x4];                                     // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct UObject_FTransform                          RootOffsetTransform;                                       // 0x0360(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                               bSkipAnimGraph;                                            // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DAVL[0x3];                                     // 0x0391(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementAnimRate;                                          // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovementAnimRatePower;                                     // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinimumMovementSpeed;                                      // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingBlendInTime;                                         // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MovingBlendOutTime;                                        // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsMoving;                                                 // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H0TU[0x3];                                     // 0x03A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinimumMovementSpeedFlying;                                // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingMoveBlendIn;                                         // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingMoveBlendOut;                                        // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsFlying;                                                 // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseFlyingOffset;                                          // 0x03B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6RCF[0x2];                                     // 0x03BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     FlyingOffset;                                              // 0x03BC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CurrentFlyingOffset;                                       // 0x03C8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	struct FVector                                     LandedOffset;                                              // 0x03D4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseAimOffset;                                             // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UVZR[0x3];                                     // 0x03E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AimPitch;                                                  // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimYaw;                                                    // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimOffsetPitchScale;                                       // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimOffsetYawScale;                                         // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBlinking;                                              // 0x03F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XDW8[0x3];                                     // 0x03F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BlinkBlend;                                                // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseTurning;                                               // 0x03FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WVI8[0x3];                                     // 0x03FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TurningEnabledBlendTime;                                   // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDisabledBlendTime;                                  // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TurningDirectionBlendTime;                                 // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTurnRateForTurnAnimation;                               // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsTurning;                                                // 0x0410(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bTurningRight;                                             // 0x0411(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseRunning;                                               // 0x0412(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsRunning;                                                // 0x0413(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseSleepingAnim;                                          // 0x0414(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsSleeping;                                               // 0x0415(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bUseFalling;                                               // 0x0416(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8LCF[0x1];                                     // 0x0417(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FallingAnimPlayRate;                                       // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendInTime;                                        // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingBlendOutTime;                                       // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsFalling;                                                // 0x0424(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bUseMounted;                                               // 0x0425(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsMounted;                                                // 0x0426(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EUOL[0x9];                                     // 0x0427(0x0009) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimInstance_DinoRootTransform");
		return ptr;
	}



};

// Class ShooterGame.AnimNotify_CustomEvent
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UAnimNotify_CustomEvent : public UAnimNotify
{
public:
	struct FName                                       EventName;                                                 // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSendNotifyToWeapon;                                       // 0x0040(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSendNotifyToArmorSlot;                                    // 0x0041(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EPrimalEquipmentType>           ArmorSlotToSendNotify;                                     // 0x0042(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bLockHeadPositionNormalized;                               // 0x0043(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TimeToLockHeadPosition;                                    // 0x0044(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUnlockHeadPositionNormalized;                             // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZMCH[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimNotify_CustomEvent");
		return ptr;
	}



};

// Class ShooterGame.AnimNotify_StopSound
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UAnimNotify_StopSound : public UAnimNotify
{
public:
	class USoundBase*                                  SoundToStop;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutTime;                                               // 0x0040(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NYPL[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimNotify_StopSound");
		return ptr;
	}



};

// Class ShooterGame.AnimNotifyState_Custom
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UAnimNotifyState_Custom : public UAnimNotifyState
{
public:
	struct FName                                       EventName;                                                 // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSendNotifyToWeapon;                                       // 0x0038(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSendNotifyToArmorSlot;                                    // 0x0039(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EPrimalEquipmentType>           ArmorSlotToSendNotify;                                     // 0x003A(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AOT0[0x5];                                     // 0x003B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AnimNotifyState_Custom");
		return ptr;
	}



};

// Class ShooterGame.FogOfWar
// 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
class UFogOfWar : public UObject
{
public:
	struct FString                                     MapName;                                                   // 0x0028(0x0010) (ZeroConstructor, Transient)
	class UTexture2D*                                  Texture;                                                   // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bVisible : 1;                                              // 0x0040(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_BAL2[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpolationSpeed;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SizeX;                                                     // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SizeY;                                                     // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeOrigin;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeScale;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeOrigin;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeScale;                                            // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0LG9[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  BrushTexture;                                              // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TArray<unsigned char>                              VisibilityBuffer;                                          // 0x0070(0x0010) (ZeroConstructor, Transient, Protected)
	TArray<unsigned char>                              BrushTextureData;                                          // 0x0080(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_TIPR[0x38];                                    // 0x0090(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.FogOfWar");
		return ptr;
	}



};

// Class ShooterGame.PrimalLocalProfile
// 0x0220 (FullSize[0x0248] - InheritedSize[0x0028])
class UPrimalLocalProfile : public UObject
{
public:
	unsigned char                                      UnknownData_RO78[0x20];                                    // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FEngramCustomFolder>                 CustomFolders;                                             // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              UnlockedDinoEntries;                                       // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimalMapMarkerEntryData>           MapMarkers;                                                // 0x0068(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        DisplayedTutorials;                                        // 0x0078(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FArkInventoryData                           MyArkData;                                                 // 0x0088(0x0030) (NativeAccessSpecifierPublic)
	TArray<uint64_t>                                   SpectatorSavedIds;                                         // 0x00B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             SpectatorPositions;                                        // 0x00C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                            SpectatorRotations;                                        // 0x00D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FavoriteServersNames;                                      // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             RecentlyJoinedServersNames;                                // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             UnlockedAchievements;                                      // 0x0108(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              AchievementItemsCollectedList;                             // 0x0118(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             UnlockedAchievementsList;                                  // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32_t>                                   GlobalExplorerNoteUnlocks;                                 // 0x0138(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FName>                               TamedDinoTags;                                             // 0x0148(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFogOfWarInfoStruct>                 PerMapFogOfWars;                                           // 0x0158(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMapMarkerPerMapInfo>                MapMarkersPerMaps;                                         // 0x0168(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              MapMarkersColorSliderPercent;                              // 0x0178(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstThatchCraft;                     // 0x017C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstJumpPadCraft;                    // 0x017D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstOceanPlatformCraft;              // 0x017E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstPressurePlateCraft;              // 0x017F(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstFishingNetCraft;                 // 0x0180(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstMiningDrillCraft;                // 0x0181(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstShoulderCannonCraft;             // 0x0182(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekGrenadeLauncherCraft;         // 0x0183(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekCruiseMissileCraft;           // 0x0184(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstLaserTripWireCraft;              // 0x0185(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekClawsCraft;                   // 0x0186(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstHoverSkiffCraft;                 // 0x0187(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstShapeshifterTransform;           // 0x0188(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstShapeshifterRevert;              // 0x0189(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstShapeshifterBloodlust;           // 0x018A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstExoSuit;                         // 0x018B(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekBow;                          // 0x018C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekPistol;                       // 0x018D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstTekCropPlot;                     // 0x018E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstHoversail;                       // 0x018F(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstPlantSpeciesR;                   // 0x0190(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToGen2BossBattleAvailable;              // 0x0191(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstGen2ExplorerNoteFound;           // 0x0192(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               CompanionHasReactedToFirstGen2DispatcherEncountered;       // 0x0193(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                NumRespawns;                                               // 0x0194(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_IKIR[0xB0];                                    // 0x0198(0x00B0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalLocalProfile");
		return ptr;
	}



	void SaveProfile(bool bAllowForcedItemDownload);
	void OnSaveArkTributeFinished__DelegateSignature(bool Success);
	void OnLoadArkTributePlayersDataFinished__DelegateSignature(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int FailureResponseCode);
	void OnFinishedLoadingAllClustersItems(bool Success, const struct FString& UserId, TArray<struct FItemNetInfo>* ArkItems);
	void OnAllClustersItemsRemoved(bool Success, const struct FString& UserId, TArray<struct FItemNetID> ItemsIds);
};

// Class ShooterGame.ArkCloudInventoryData
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UArkCloudInventoryData : public UObject
{
public:
	struct FArkInventoryData                           MyArkData;                                                 // 0x0028(0x0030) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ArkCloudInventoryData");
		return ptr;
	}



};

// Class ShooterGame.BaseBoxTrigger
// 0x0018 (FullSize[0x0488] - InheritedSize[0x0470])
class ABaseBoxTrigger : public AActor
{
public:
	class USceneComponent*                             SceneComp;                                                 // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UBoxComponent*                               TriggerBox;                                                // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPOnTriggerBeginOverlap : 1;                           // 0x0480(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnTriggerEndOverlap : 1;                             // 0x0480(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QJ0N[0x7];                                     // 0x0481(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BaseBoxTrigger");
		return ptr;
	}



	void OnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool IsCharacterTouchingTrigger(class APrimalCharacter* Character);
	void GetAllCharactersTouchingTrigger(TArray<class APrimalCharacter*>* OutCharacters);
	void BPOnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void BPOnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};

// Class ShooterGame.HazardTrigger
// 0x0020 (FullSize[0x04A8] - InheritedSize[0x0488])
class AHazardTrigger : public ABaseBoxTrigger
{
public:
	struct FVector                                     Bounds;                                                    // 0x0488(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsActive;                                                 // 0x0494(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7GLQ[0x3];                                     // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastActivationTime;                                        // 0x0498(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               bConformToTerrain;                                         // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T0K5[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HazardTrigger");
		return ptr;
	}



	void OnDeactivated();
	void OnCharacterExit(class APrimalCharacter* Character);
	void OnCharacterEnter(class APrimalCharacter* Character);
	void OnActivated();
	bool FindFloor(const struct FVector& TestLocation, struct FFloorSlopeData* FloorSlope, float DepthOverride, bool UseActorNormal);
	void Deactivate();
	void ClientActivation(bool bActivate);
	bool CanActivate();
	void Activate();
};

// Class ShooterGame.HazardTrigger_Slide
// 0x00E8 (FullSize[0x0590] - InheritedSize[0x04A8])
class AHazardTrigger_Slide : public AHazardTrigger
{
public:
	class UAudioComponent*                             SoundToPlay;                                               // 0x04A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	TArray<class USplineComponent*>                    Splines;                                                   // 0x04B0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class UParticleSystem*>                     SlideFX;                                                   // 0x04C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              FinalEmitter;                                              // 0x04D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              WarningEmitter;                                            // 0x04E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ImpactEmitter;                                             // 0x04F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  SlideSound;                                                // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                StructureDamage;                                           // 0x0508(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6CS3[0x4];                                     // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      StructureDamageType;                                       // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SplineSeparation;                                          // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinTimeBetweenActivations;                                 // 0x051C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SlideSpeed;                                                // 0x0520(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WaveWidth;                                                 // 0x0524(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Impulse;                                                   // 0x0528(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinWarningInterval;                                        // 0x052C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxWarningInterval;                                        // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ActivationChance;                                          // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ActivationIncrement;                                       // 0x0538(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinProjectileInterval;                                     // 0x053C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxProjectileInterval;                                     // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ImpulseVelocityLimit;                                      // 0x0544(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      ProjectileClass;                                           // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WarningTimer;                                              // 0x0550(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CurrentActivationChance;                                   // 0x0554(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              ProjectileTimer;                                           // 0x0558(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M6B4[0x4];                                     // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSlideData>                          SlideComponents;                                           // 0x0560(0x0010) (ZeroConstructor, SaveGame, ContainsInstancedReference)
	TArray<struct FVector>                             SlidePositions;                                            // 0x0570(0x0010) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData_1SHO[0x10];                                    // 0x0580(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HazardTrigger_Slide");
		return ptr;
	}



	void SpawnWarningFX();
	void SpawnProjectile(const struct FVector& Location, const struct FVector& Heading);
	void RebuildSplines();
};

// Class ShooterGame.PrimalStaticData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPrimalStaticData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStaticData");
		return ptr;
	}



	class UPrimalStaticData* STATIC_GetPrimalStaticData(class UClass* DataType);
};

// Class ShooterGame.PointOfInterestInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPointOfInterestInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PointOfInterestInterface");
		return ptr;
	}



	void ViewPoint(class AActor* ViewedByActor);
	void UnviewPoint(class AActor* UnviewedByActor);
	void SetPointTagUniqueState(bool bNewUniqueState);
	struct FPointOfInterestData GetPointOfInterestData();
	class UClass* GetPointCustomData();
	bool CanBeViewed(class AActor* ByActor);
};

// Class ShooterGame.PointOfInterestCompanionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPointOfInterestCompanionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PointOfInterestCompanionInterface");
		return ptr;
	}



	struct FPointOfInterestCompanionBehavior GetPointCompanionBehaviorData();
};

// Class ShooterGame.MissionTrigger
// 0x0448 (FullSize[0x08D0] - InheritedSize[0x0488])
class AMissionTrigger : public ABaseBoxTrigger
{
public:
	unsigned char                                      UnknownData_QVC0[0x10];                                    // 0x0488(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TriggerKey;                                                // 0x0498(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TriggerOrder;                                              // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CustomDataInt;                                             // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CustomDataFloat;                                           // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WF5X[0x4];                                     // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      CustomDataFloatArray;                                      // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector                                     CustomDataVector;                                          // 0x04C0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZZ56[0x4];                                     // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomDataString;                                          // 0x04D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FPointOfInterestData                        MyPointOfInterestData;                                     // 0x04E0(0x0140) (Edit, Protected)
	struct FPointOfInterestCompanionBehavior           MyPointOfInterestCompanionBehavior;                        // 0x0620(0x02B0) (Edit, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionTrigger");
		return ptr;
	}



	bool IsPointOfInterestValid();
	struct FPointOfInterestData GetMyPointOfInterestData();
	struct FPointOfInterestCompanionBehavior GetMyPointOfInterestCompanionBehavior();
};

// Class ShooterGame.BasePlayerController
// 0x0028 (FullSize[0x0838] - InheritedSize[0x0810])
class ABasePlayerController : public APlayerController
{
public:
	unsigned char                                      UnknownData_ITPE[0x28];                                    // 0x0810(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BasePlayerController");
		return ptr;
	}



	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ServerCheat(const struct FString& Msg);
	void Say(const struct FString& Msg);
	void ClientStartOnlineGame();
	void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientGameStarted();
	void ClientEndOnlineGame();
};

// Class ShooterGame.RadialSelectorHUD
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class URadialSelectorHUD : public UObject
{
public:
	int                                                NumDivisions;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              InnerDistance;                                             // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              OuterDistance;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              OuterDistanceScaleCountOffset;                             // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              BaseUISizeY;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              SelectionDistanceOffset;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              CenterImageSizeX;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              CenterImageSizeY;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstance*                           MI;                                                        // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  CenterImage;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  SegmentTexture;                                            // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  SelectedTexture;                                           // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstance*                           RadialMaterial;                                            // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UFont*                                       TextFont;                                                  // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	int                                                CurrentSelection;                                          // 0x0078(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	int                                                TargetSelection;                                           // 0x007C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              SelectionTime;                                             // 0x0080(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_NZ7W[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      DivisionAlpha;                                             // 0x0088(0x0010) (ZeroConstructor, Transient, Protected)
	TArray<struct FString>                             ActionNames;                                               // 0x0098(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	class UMaterialInstanceDynamic*                    Segment_SelectedDynamicMI;                                 // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    Segment_UnselectedDynamicMI;                               // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_P8O8[0x20];                                    // 0x00B8(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RadialSelectorHUD");
		return ptr;
	}



};

// Class ShooterGame.RadialSelectorHUD_Custom
// 0x0068 (FullSize[0x0140] - InheritedSize[0x00D8])
class URadialSelectorHUD_Custom : public URadialSelectorHUD
{
public:
	unsigned char                                      UnknownData_ZJGH[0x60];                                    // 0x00D8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TextScaleCountOffset;                                      // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W5OK[0x4];                                     // 0x013C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RadialSelectorHUD_Custom");
		return ptr;
	}



};

// Class ShooterGame.ShooterHUD
// 0x0600 (FullSize[0x0B58] - InheritedSize[0x0558])
class AShooterHUD : public AHUD
{
public:
	class UClass*                                      HurtCameraShake;                                           // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UUI_SavingOverlay*                           SavingOverlay;                                             // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDamageCameraShakeScale;                                 // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDamageCameraShakeSpeedInverse;                          // 0x056C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowAllPlayersWhenSpectating;                             // 0x0570(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bShowAllPlayersWhenSpectatingLocal;                        // 0x0571(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GM2H[0xE];                                     // 0x0572(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlayerInfoRequestTimeInterval;                             // 0x0580(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_32F4[0x14];                                    // 0x0584(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPlayerHUDUI*                                MyPlayerHUD;                                               // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHUDCustomStatusWidget*                      MyPlayerCustomStatusHUD;                                   // 0x05A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHUDActiveMissionWidget*                     MyPlayerActiveMissionHUD;                                  // 0x05A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHUDPointsOfInterestContainer*               MyPlayerPointsOfInterestHUD;                               // 0x05B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHUDPingsContainer*                          MyPlayerPingHUD;                                           // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_LeaderboardWidget*                       MyPlayerLeaderboardHUD;                                    // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_Subtitles*                               MySubtitlesHUD;                                            // 0x05C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_HudOverlay*                              MyOverlayHUD;                                              // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_HudOverlay*                              MyTopOverlayHUD;                                           // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_ChatBox*                                 ChatBoxUI;                                                 // 0x05E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      HubUITemplate;                                             // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SurvivorProfileUITemplate;                                 // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ChangeFrequencyUITemplate;                                 // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerHUDUITemplate;                                       // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerHUDCustomStatusTemplate;                             // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerHUDActiveMissionTemplate;                            // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerHUDPointsOfInterestTemplate;                         // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      LeaderboardsUITemplate;                                    // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SubtitlesUITemplate;                                       // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SavingOverlayUITemplate;                                   // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OverlayHUDUITemplate;                                      // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TopOverlayHUDUITemplate;                                   // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      InventoryUITemplate;                                       // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionListUITemplate;                                     // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AdminMangmentUITemplate;                                   // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ConsoleDedicatedUITemplate;                                // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeManagerUITemplate;                                    // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeWarUITemplate;                                        // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PinEntryUITemplate;                                        // 0x0678(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TextEntryUITemplate;                                       // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MapMarkersUITemplate;                                      // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SpawnUITemplate;                                           // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AllPlayersListTemplate;                                    // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ChatBoxUITemplate;                                         // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TutorialUITemplate;                                        // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowChatBoxByDefault;                                     // 0x06B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QPG0[0x7];                                     // 0x06B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      InventoryRadialSelectorTemplate;                           // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MultiUseRadialSelectorTemplate;                            // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerActionRadialSelectorTemplate;                        // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      WhistleRadialSelectorTemplate;                             // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EmoteRadialSelectorTemplate;                               // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CustomRadialSelectorTemplate;                              // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD*                          CurrentRadialSelector;                                     // 0x06E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_Inventory*                InventoryRadialSelector;                                   // 0x06F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_MultiUse*                 MultiUseRadialSelector;                                    // 0x06F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_PlayerAction*             PlayerActionRadialSelector;                                // 0x0700(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_PlayerAction*             WhistleRadialSelector;                                     // 0x0708(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_PlayerAction*             EmoteRadialSelector;                                       // 0x0710(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class URadialSelectorHUD_Custom*                   CustomRadialSelector;                                      // 0x0718(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XVKW[0x8];                                     // 0x0720(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFont*                                       BigFont;                                                   // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFont*                                       NormalFont;                                                // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFont*                                       SmallFont;                                                 // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  HitNotifyTexture;                                          // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  HUDMainTextureAtlas;                                       // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  HUDAssets02TextureAtlas;                                   // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  LowHealthOverlayTexture;                                   // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  HitMarkerTexture;                                          // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MultiUseUITemplate;                                        // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeToHideChat;                                            // 0x0770(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T36U[0x4];                                     // 0x0774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  DeathIcon;                                                 // 0x0778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  KilledIcon;                                                // 0x0780(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChatPopupInterval;                                         // 0x0788(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TMRN[0x4];                                     // 0x078C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  SpeechBubble;                                              // 0x0790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EV86[0x30];                                    // 0x0798(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCanvasIcon                                 HitNotifyIcon[0x8];                                        // 0x07C8(0x00C0)
	struct FCanvasIcon                                 Crosshair[0x5];                                            // 0x0888(0x0078)
	struct FCanvasIcon                                 HitNotifyCrosshair;                                        // 0x0900(0x0018)
	unsigned char                                      UnknownData_NTNR[0x150];                                   // 0x0918(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bHudHidden;                                                // 0x0A68(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bShowChatPopup;                                            // 0x0A69(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L279[0x2E];                                    // 0x0A6A(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UUI_Inventory*                               CurrentOpenedInventory;                                    // 0x0A98(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUI_Hub*                                     CurrentlyOpenedHubUI;                                      // 0x0AA0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bMultiUseIsDrawingUIHUD;                                   // 0x0AA8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GSZ1[0xF];                                     // 0x0AA9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AActor>                       LastTargetedActor;                                         // 0x0AB8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FHintReplacementKeysForKeyboardControls> GenericGamepadReplacementsForKeyboardControls;             // 0x0AC0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_072V[0x78];                                    // 0x0AD0(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UUI_Tutorial*                                TutorialUI;                                                // 0x0B48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EN72[0x8];                                     // 0x0B50(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterHUD");
		return ptr;
	}



	bool StartCustomWheelRadialSelector(const struct FCustomWheelSettings& WheelSettings, TArray<struct FCustomWheelEntry> Entries, bool bFromGamepad, class UObject* ForcedEntryTarget);
	void ShowSpawnUI(class APrimalStructure* FastTravelIgnoreBed);
	void ShowPinEntryUI(class AActor* aTargetable, bool bIsSetting, int CustomIndex);
	void ShowMultiUseUIFor(class AActor* anActor, bool bFromGamepad);
	class UUI_MissionList* ShowMissionList(class UObject* FromDispatcher);
	void ShowMissionAlert(TEnumAsByte<ShooterGame_EMissionAlertType> AlertType, const struct FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop);
	class UUI_Inventory* ShowInventory(class UPrimalInventoryComponent* InventoryComp);
	class UUI_EngramsMenu* ShowEngramsMenu(bool bInputDelay);
	void ShowChatBox(bool bShow, bool bIsFromNewChat);
	void SetAllowShowChatBox(bool bAllow);
	struct FString ReplaceKeyboardControlsTextWithXboxControlIconPaths(const struct FString& ActionKey);
	void NotifyOutOfAmmo();
	bool IsUsingCustomWheelRadialSelector();
	bool IsMissionAlertVisible(bool bGetTopAlertVisibility);
	bool IsChatBoxVisible();
	void HideTopMissionAlert();
	void HideMissionAlert();
	void HideChatBox();
	class UUI_Subtitles* GetSubtitlesWidget();
	class AShooterPlayerController* GetShooterPC();
	bool GetSelectedCustomWheelEntry(struct FCustomWheelEntry* SelectedEntry);
	class APlayerController* GetPlayerOwner();
	bool GetMultiUseRadialSelection(struct FMultiUseEntry* SelectedEntry, bool bIncludeTimedEntries);
	class UTexture2D* GetIconForKey(const struct FString& ActionKey);
	struct FVector2D GetCurrentCrosshairScreenLocation();
	class UUI_ChatBox* GetChatBoxWidget();
	void GetAdditionalExplorerNoteDynamicMaterialParams(const struct FExplorerNoteEntry& ExplorerNote, TArray<struct FNameScalarPair>* ScalarMaterialParams, TArray<struct FNameColorPair>* ColorMaterialParams);
	struct FString FormatTextureAsRichText(class UTexture2D* InTexture);
	struct FString FormatRichTextWithKeyBindings(const struct FString& InText, bool bIgnoreMarkup);
	struct FString FormatRichTextWithColor(const struct FString& InText, const struct FLinearColor& InColor);
	void ForceHUDHidden(bool bForcedHidden);
	void EndMultiUseRadialSelector();
	void EndCustomWheelRadialSelector();
	void DrawCrosshairOnScreen(const struct FVector2D& AtScreenLocation, float WithCrossSpread, const struct FColor& WithDrawColor, float WithAlphaPercent);
	void CancelCustomWheelRadialSelector();
	void BPUpdateHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
	void BPUpdateHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int index);
	void BPUpdateHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPUpdateAllHUDRichTextOverlays(TArray<struct FHUDRichTextOverlayData> InOverlayData);
	void BPSimulateHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator);
	class UPrimalUI* BPShowUIScene(class UClass* UISceneTemplate, class UObject* AssociatedObject1, class UObject* AssociatedObject2, int ExtraID1, int ExtraID2);
	void BPSetHUDRichTextOverlayVerticalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, TEnumAsByte<SlateCore_EVerticalAlignment> InAlignV, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayVerticalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, TEnumAsByte<SlateCore_EVerticalAlignment> InAnchorV, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayUseAutoWrap(const struct FHUDRichTextOverlayData& InOverlay, bool InAutoWrap, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayScale(const struct FHUDRichTextOverlayData& InOverlay, float InScale, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayPosition(const struct FHUDRichTextOverlayData& InOverlay, const struct FVector2D& InPosition, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayInstigator(const struct FHUDRichTextOverlayData& InOverlay, class AActor* InInstigator, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayHorizontalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, TEnumAsByte<SlateCore_EHorizontalAlignment> InAlignH, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayHorizontalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, TEnumAsByte<SlateCore_EHorizontalAlignment> InAnchorH, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayDisplayText(const struct FHUDRichTextOverlayData& InOverlay, const struct FString& InString, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayDefaultTextColor(const struct FHUDRichTextOverlayData& InOverlay, const struct FLinearColor& InColor, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
	void BPRemoveHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
	void BPRemoveHUDRichTextOverlayAtIndex(int index);
	void BPRemoveHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPRemoveAllHUDRichTextOverlays();
	TArray<struct FHUDRichTextOverlayData> BPGetHUDRichTextOverlays();
	void BPAddHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int InsertAtIndex);
	void BPAddHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPAddHUDNotification(const struct FString& NotificationString, const struct FColor& NotificationColor, class UMaterialInterface* NotificationMaterial, class UTexture2D* NotificationTexture, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay, int MessageTypeID, int ItemMsgType, class UClass* ItemClass, const struct FString& ItemName, int ItemQuantity, float ItemQuantityFloat);
};

// Class ShooterGame.PrimalInventoryComponent
// 0x04B8 (FullSize[0x0590] - InheritedSize[0x00D8])
class UPrimalInventoryComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_2ZL7[0x30];                                    // 0x00D8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class AShooterPlayerController>> RemoteViewingInventoryPlayerControllers;                   // 0x0108(0x0010) (ZeroConstructor, Transient)
	TArray<class UPrimalItem*>                         InventoryItems;                                            // 0x0118(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame)
	TArray<class UPrimalItem*>                         EquippedItems;                                             // 0x0128(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame)
	TArray<class UPrimalItem*>                         ItemSlots;                                                 // 0x0138(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame)
	TArray<class UPrimalItem*>                         ArkTributeItems;                                           // 0x0148(0x0010) (ZeroConstructor, Transient)
	TArray<class UPrimalItem*>                         AllDyeColorItems;                                          // 0x0158(0x0010) (ZeroConstructor, Transient)
	TArray<struct FItemCraftQueueEntry>                ItemCraftQueueEntries;                                     // 0x0168(0x0010) (ZeroConstructor, Transient, SaveGame)
	int                                                OverrideInventoryDefaultTab;                               // 0x0178(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bInitializedMe : 1;                                        // 0x017C(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bReceivingEquippedItems : 1;                               // 0x017C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bReceivingInventoryItems : 1;                              // 0x017C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bReceivingArkInventoryItems : 1;                           // 0x017C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bFreeCraftingMode : 1;                                     // 0x017C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCanEquipItems : 1;                                        // 0x017C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanUseWeaponAsEquipment : 1;                              // 0x017C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanInventoryItems : 1;                                    // 0x017C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsumeCraftingRepairingRequirementsOnStart : 1;          // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemoteCrafting : 1;                                  // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDeactivatedCrafting : 1;                             // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAutoDecreaseDurability : 1;                        // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemoteRepairing : 1;                                 // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowItemStacking : 1;                                    // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCraftQueue : 1;                                        // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowHiddenRemoteInventoryItems : 1;                       // 0x017D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceInventoryBlueprints : 1;                             // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceInventoryNonRemovable : 1;                           // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideDefaultInventoryItemsFromDisplay : 1;                 // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDataListPadMaxInventoryItems : 1;                         // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddMaxInventoryItemsToDefaultItems : 1;                   // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckForAutoCraftBlueprints : 1;                          // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsTributeInventory : 1;                                   // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentMustRequireExplicitOwnerClass : 1;               // 0x017E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentPlayerForceRequireExplicitOwnerClass : 1;        // 0x017F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEquipmentForceIgnoreExplicitOwnerClass : 1;               // 0x017F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInventoryRefresh : 1;                                // 0x017F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInitializeInventory : 1;                             // 0x017F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowAddInventoryItem : 1;                           // 0x017F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	TArray<TEnumAsByte<Engine_EPrimalEquipmentType>>   EquippableItemTypes;                                       // 0x0180(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bHideSaddleFromInventoryDisplay : 1;                       // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCraftingEnabled : 1;                                      // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRepairingEnabled : 1;                                     // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateComponent : 1;                                   // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyOneCraftQueueItem : 1;                                // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteInventoryOnlyAllowTribe : 1;                        // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideCraftingMinDurabilityRequirement : 1;             // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteInventoryAllowRemoveItems : 1;                      // 0x0190(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteInventoryAllowAddItems : 1;                         // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRemoteInventory : 1;                                 // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCheatInventory : 1;                                    // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAddingToArkTribute : 1;                              // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteInventoryOnlyAllowSelf : 1;                         // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMaxInventoryWeightUseCharacterStatus : 1;                 // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDropInventoryDeposit : 1;                          // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowItemDefaultFolders : 1;                               // 0x0191(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableDropAllItems : 1;                                  // 0x0192(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreMaxInventoryItems : 1;                              // 0x0192(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EGA5[0x1];                                     // 0x0193(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CraftingItemSpeed;                                         // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FItemMultiplier>                     ItemSpoilingTimeMultipliers;                               // 0x0198(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bIsSecondaryInventory : 1;                                 // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteOnlyAllowBlueprintsOrItemClasses : 1;               // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_CTTF : 2;                                      // 0x01A8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventInventoryViewTrace : 1;                            // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSpawnActorOnTopOfStructure : 1;                           // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDropPhysicalInventoryDeposit : 1;                         // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseExtendedCharacterCraftingFunctionality : 1;            // 0x01A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceGenerateItemSets : 1;                                // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPHandleAccessInventory : 1;                              // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGivesAchievementItems : 1;                                // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPAllowUseInInventory : 1;                                // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPRemoteInventoryAllowRemoveItems : 1;                    // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRemoteInventoryGetMaxVisibleSlots : 1;               // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetExtraItemDisplay : 1;                             // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPNotifyItemAdded : 1;                                    // 0x01A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPNotifyItemRemoved : 1;                                  // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPNotifyItemQuantityUpdated : 1;                          // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideItemMinimumUseInterval : 1;                     // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPForceCustomRemoteInventoryAllowAddItems : 1;            // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPForceCustomRemoteInventoryAllowRemoveItems : 1;         // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceInventoryNotifyCraftingFinished : 1;                 // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowWorldSettingsInventoryComponentAppends : 1;          // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCraftingResourceConsumption : 1;                   // 0x01AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideInventoryDepositClassDontForceDrop : 1;           // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsCraftingAllowed : 1;                               // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRemoteInventoryAllowCrafting : 1;                    // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNotifyAddedOnClientReceive : 1;                           // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsTaxidermyBase : 1;                                      // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeferCheckForAutoCraftBlueprintsOnInventoryChange : 1;    // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowQuickSlotPanel : 1;                                   // 0x01AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_TPN8[0x4];                                     // 0x01AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGenericDataListEntry*                       ExtraItemDisplay;                                          // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                MaxInventoryItems;                                         // 0x01B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxInventoryWeight;                                        // 0x01BC(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	unsigned char                                      TribeGroupInventoryRank;                                   // 0x01C0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3H9U[0x3];                                     // 0x01C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumSlots;                                                  // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxItemCraftQueueEntries;                                  // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LAAY[0x4];                                     // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     RemoteInventoryDescriptionString;                          // 0x01D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      EngramRequirementClassOverride;                            // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              RemoteAddItemOnlyAllowItemClasses;                         // 0x01E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              RemoteAddItemPreventItemClasses;                           // 0x01F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEventItem>                          EventItems;                                                // 0x0208(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultInventoryItems;                                     // 0x0218(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultInventoryItems2;                                    // 0x0228(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultInventoryItems3;                                    // 0x0238(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultInventoryItems4;                                    // 0x0248(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UObject>>                   DefaultInventoryItemsClasses;                              // 0x0258(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             DefaultInventoryItemsRandomCustomStrings;                  // 0x0268(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      DefaultInventoryItemsRandomCustomStringsWeights;           // 0x0278(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              CheatInventoryItems;                                       // 0x0288(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultEquippedItems;                                      // 0x0298(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultEquippedItemSkins;                                  // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DefaultSlotItems;                                          // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FItemSpawnActorClassOverride>        ItemSpawnActorClassOverrides;                              // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              OnlyAllowCraftingItemClasses;                              // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<unsigned char>                              DefaultEngrams;                                            // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<unsigned char>                              DefaultEngrams2;                                           // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<unsigned char>                              DefaultEngrams3;                                           // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<unsigned char>                              DefaultEngrams4;                                           // 0x0318(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      DefaultInventoryQualities;                                 // 0x0328(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     InventoryNameOverride;                                     // 0x0338(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxRemoteInventoryViewingDistance;                         // 0x0348(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ActiveInventoryRefreshInterval;                            // 0x034C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                AbsoluteMaxInventoryItems;                                 // 0x0350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CU5P[0x4];                                     // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastInventoryRefreshTime;                                  // 0x0358(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      DroppedItemTemplateOverride;                               // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ForceAllowItemStackings;                                   // 0x0368(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FRotator                                    DropItemRotationOffset;                                    // 0x0378(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JU5B[0x4];                                     // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemCraftingConsumptionReplenishment> ItemCraftingConsumptionReplenishments;                     // 0x0388(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxItemCooldownTimeClear;                                  // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1H6Z[0x4];                                     // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemMultiplier>                     MaxItemTemplateQuantities;                                 // 0x03A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  ItemCraftingSoundOverride;                                 // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FActorClassAttachmentInfo>           WeaponAsEquipmentAttachmentInfos;                          // 0x03B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPrimalItem*>                         CraftingItems;                                             // 0x03C8(0x0010) (ZeroConstructor, SaveGame)
	int                                                DisplayDefaultItemInventoryCount;                          // 0x03D8(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EZ57[0x2C];                                    // 0x03DC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastRefreshCheckItemTime;                                  // 0x0408(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T205[0x14];                                    // 0x0410(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinItemSets;                                               // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxItemSets;                                               // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NumItemSetsPower;                                          // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSetsRandomWithoutReplacement : 1;                         // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowAllUseInInventory : 1;                          // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsValidCraftingResource : 1;                         // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseParentStructureIsValidCraftingResource : 1;            // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSetCraftingEnabledCheckForAutoCraftBlueprints : 1;        // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRemoteInventoryAllowViewing : 1;                     // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllDefaultInventoryIsEngrams : 1;                         // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanGrindItems : 1;                                   // 0x0430(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGrinderCanGrindAll : 1;                                   // 0x0431(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_U4AL[0x6];                                     // 0x0432(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupplyCrateItemSet>                 ItemSets;                                                  // 0x0438(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSupplyCrateItemSet>                 AdditionalItemSets;                                        // 0x0448(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      ItemSetsOverride;                                          // 0x0458(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<float>                                      SetQuantityWeights;                                        // 0x0460(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      SetQuantityValues;                                         // 0x0470(0x0010) (Edit, ZeroConstructor)
	class USoundBase*                                  ItemRemovedBySound;                                        // 0x0480(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OpenInventorySound;                                        // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  CloseInventorySound;                                       // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxInventoryAccessDistance;                                // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PZUV[0x4];                                     // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FServerCustomFolder>                 CustomFolderItems;                                         // 0x04A0(0x0010) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData_GMK2[0x10];                                    // 0x04B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ForceAllowCraftingForInventoryComponents;                  // 0x04C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FItemMultiplier>                     ItemClassWeightMultipliers;                                // 0x04D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              GenerateItemSetsQualityMultiplierMin;                      // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GenerateItemSetsQualityMultiplierMax;                      // 0x04E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultCraftingRequirementsMultiplier;                     // 0x04E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                DefaultCraftingQuantityMultiplier;                         // 0x04EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ActionWheelAccessInventoryPriority;                        // 0x04F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SavedForceDefaultInventoryRefreshVersion;                  // 0x04F4(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                ForceDefaultInventoryRefreshVersion;                       // 0x04F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZW4U[0x4];                                     // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              TamedDinoForceConsiderFoodTypes;                           // 0x0500(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_KUWS[0x10];                                    // 0x0510(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  OverrideCraftingFinishedSound;                             // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XSOL[0x18];                                    // 0x0528(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     GroundDropTraceLocationOffset;                             // 0x0540(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TX3D[0x4];                                     // 0x054C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInventoryItemAdded;                                      // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInventoryItemRemoved;                                    // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bHideTributeUploadDinosPanel : 1;                          // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDLCEquipRestrictions : 1;                           // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreEngramEquipRestrictions : 1;                        // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableTransferEquipmentOnTransferAll : 1;                // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_MCAT[0x7];                                     // 0x0571(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FOverrideMultiuseButtonStyle>        MultiUseButtonStyleOverrides;                              // 0x0578(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUseCustomSorting;                                         // 0x0588(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JEDI[0x7];                                     // 0x0589(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalInventoryComponent");
		return ptr;
	}



	void UpdateTribeGroupInventoryRank(unsigned char NewRank);
	void UpdateNetWeaponClipAmmo(class UPrimalItem* anItem, int ammo);
	void TransferItemToInventory(class UPrimalInventoryComponent* toInventory, int ItemIndex);
	void TransferAllItemsToInventory(class UPrimalInventoryComponent* toInventory);
	void TransferAllItemsOfClassToInventory(class UPrimalInventoryComponent* toInventory, class UClass* OfItemClass, bool bAllowSubclasses);
	void TransferAllItemsOfClassesToInventory(class UPrimalInventoryComponent* toInventory, TArray<class UClass*> OfItemClasses, bool bAllowSubclasses);
	void StopAllCraftingRepairing();
	class ADroppedItem* STATIC_StaticDropNewItemWithInfo(class AActor* forActor, const struct FItemNetInfo& ItemInfo, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
	class ADroppedItem* STATIC_StaticDropNewItem(class AActor* forActor, class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int quantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
	void SetNextItemSpoilingID(const struct FItemNetID& NextItemID);
	void SetNextItemConsumptionID(const struct FItemNetID& NextItemID);
	void SetCraftingEnabled(bool bEnable);
	void ServerSplitItemStack(const struct FItemNetID& ItemId, int AmountToSplit);
	void ServerSelectedCustomItemAction(const struct FItemNetID& ItemId, const struct FName& SelectedOption, class AShooterPlayerController* ForPC);
	void ServerRequestItems(class AShooterPlayerController* ForPC, bool bEquippedItems, bool bIsFirstSpawn);
	void ServerRepairItem(const struct FItemNetID& ItemId, class AShooterPlayerController* ByPC, bool bRepairIgnoreInventoryRequirement, float RepairPercentage, float RepairSpeedMultiplier);
	void ServerRemoveItemFromSlot(const struct FItemNetID& ItemId);
	void ServerMergeItemStack(const struct FItemNetID& ItemId);
	void ServerMakeRecipeItem(class APrimalStructureItemContainer* Container, const struct FItemNetID& NoteToConsume, class UClass* RecipeItemTemplate, const struct FString& CustomName, const struct FString& CustomDescription, TArray<struct FColor> CustomColors, TArray<struct FCraftingResourceRequirement> CustomRequirements);
	void ServerForceMergeItemStack(const struct FItemNetID& Item1ID, const struct FItemNetID& Item2ID);
	void ServerCraftItem(struct FItemNetID* ItemId, class AShooterPlayerController* ByPC);
	void ServerAddItemToSlot(const struct FItemNetID& ItemId, int SlotIndex);
	bool RemoveItem(const struct FItemNetID& ItemId, bool bDoDrop, bool bSecondryAction, bool bForceRemoval, bool showHUDMessage);
	bool RemoteInventoryAllowViewing(class AShooterPlayerController* PC, float MaxAllowedDistanceOffset);
	bool RemoteInventoryAllowRepairingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled);
	bool RemoteInventoryAllowCraftingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled);
	bool OverrideUseItem(class UPrimalItem* theItem);
	void NotifyClientsDurabilityChange(class UPrimalItem* anItem);
	bool IsRepairingAllowed();
	bool IsLocalToPlayer(class AShooterPlayerController* ForPC);
	bool IsLocal();
	bool IsCraftingAllowed(class UPrimalItem* anItem);
	bool IsAtMaxInventoryItems();
	bool IsAllowedInventoryAccess(class APlayerController* ForPC);
	void InventoryViewersStopLocalSound(class USoundBase* aSound);
	void InventoryViewersPlayLocalSound(class USoundBase* aSound, bool bAttach);
	void InventoryRemoteViewersChanged__DelegateSignature(class UPrimalInventoryComponent* inventory);
	void InventoryRefresh();
	void InventoryItemRemoved__DelegateSignature(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountRemoved);
	void InventoryItemAdded__DelegateSignature(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountAdded, bool bEquippedItem);
	bool InventoryCustomSortPredicate(class UPrimalItem* LeftItem, class UPrimalItem* RightItem);
	void InventoryCustomFilter(TArray<class UPrimalItem*> UnfilteredItemsList, TArray<class UPrimalItem*>* FilteredItemsList);
	void InitializeInventory();
	bool HasResources(TArray<struct FCraftingResourceRequirement> RequiredResources);
	bool HasItemsEquipped(TArray<class UClass*> ItemTemplates, bool bRequiresExactClassMatch, bool bOnlyArkItems, bool bEnsureAllItems);
	float GetTotalEquippedItemStat(TEnumAsByte<ShooterGame_EPrimalItemStat> statType);
	int GetMaxInventoryItems(bool bIgnoreHiddenDefaultInventory);
	int GetItemTemplateQuantity(class UClass* ItemTemplate, class UPrimalItem* IgnoreItem, bool bIgnoreBlueprints, bool bCheckValidForCrafting, bool bRequireExactClassMatch, bool bForceCheckForDupes);
	int GetInventoryUpdatedFrame();
	void GetGrinderSettings(int* MaxQuantityToGrind, float* GrindGiveItemsPercent, int* MaxItemsToGivePerGrind);
	class UPrimalItem* GetEquippedItemOfType(TEnumAsByte<Engine_EPrimalEquipmentType> aType);
	class UPrimalItem* GetEquippedItemOfClass(class UClass* ItemClass);
	float GetEquippedArmorRating(TEnumAsByte<Engine_EPrimalEquipmentType> equipmentType);
	bool GenerateCustomCrateItems(class UClass* SourceClass, TArray<struct FSupplyCrateItemSet> CustomItemSets, float CustomMinItemSets, float CustomMaxItemSets, float CustomNumItemSetsPower, bool bCustomSetsRandomWithoutReplacement, TArray<class UPrimalItem*>* GeneratedItems, float MinQualityMultiplier, float MaxQualityMultiplier, int NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp, bool bIsMissionReward);
	bool GenerateCrateItems(float MinQualityMultiplier, float MaxQualityMultiplier, int NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp);
	TArray<class UPrimalItem*> FindAllItemsOfType(class UClass* ItemTemplate, bool bRequiresExactClassMatch, bool bIncludeInventoryItems, bool bIncludeEquippedItems, bool bIncludeArkTributeItems, bool bIncludeSlotItems, bool bIncludeBlueprints, bool bIncludeEngrams);
	class ADroppedItem* EjectItem(const struct FItemNetID& ItemId, bool bPreventImpule, bool bForceEject, bool bSetItemLocation, const struct FVector& LocationOverride, bool showHUDMessage, class UClass* TheDroppedTemplateOverride, bool bAssignToTribeForPickup, int AssignedTribeID);
	bool ConsumeResources(TArray<struct FCraftingResourceRequirement> Resources);
	void ConsumeArmorDurability(float ConsumptionAmount, bool bAllArmorTypes, TEnumAsByte<Engine_EPrimalEquipmentType> SpecificArmorType);
	void ClientUpdateFreeCraftingMode(bool bNewFreeCraftingModeValue);
	void ClientOnArkTributeItemsAdded();
	void ClientItemMessageNotification(const struct FItemNetID& ItemId, TEnumAsByte<ShooterGame_EPrimalItemMessage> ItemMessageType);
	void ClearCraftQueue(bool bForceClearActiveCraftRepair);
	bool CanGrindItems(class AShooterPlayerController* PC);
	bool CanGrindItem(class UPrimalItem* Item);
	bool CanEquipItem(class UPrimalItem* anItem);
	void BPRequestedInventoryItems(class AShooterPlayerController* ForPC);
	int BPRemoteInventoryGetMaxVisibleSlots(int NumItems, class AShooterPlayerController* PC, bool bIsLocal);
	bool BPRemoteInventoryAllowViewing(class AShooterPlayerController* PC);
	bool BPRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer);
	bool BPRemoteInventoryAllowCrafting(class AShooterPlayerController* PC);
	bool BPRemoteInventoryAllowAddItems(class AShooterPlayerController* PC);
	bool BPRemoteInventoryAllowAddItem_SpecificQuantity(class AShooterPlayerController* PC, class UPrimalItem* anItem, int SpecificQuantityIn, int* SpecificQuantityOut);
	bool BPRemoteInventoryAllowAddItem(class AShooterPlayerController* PC, class UPrimalItem* anItem);
	bool BPPreventEquipItemType(TEnumAsByte<Engine_EPrimalEquipmentType> equipmentType);
	bool BPPreventEquipItem(class UPrimalItem* theItem);
	void BPPreInitDefaultInventory();
	void BPPostInitDefaultInventory();
	float BPOverrideItemMinimumUseInterval(class UPrimalItem* theItem);
	void BPNotifyItemRemoved(class UPrimalItem* anItem);
	void BPNotifyItemQuantityUpdated(class UPrimalItem* anItem, int amount);
	void BPNotifyItemAdded(class UPrimalItem* anItem, bool bEquipItem);
	bool BPIsValidCraftingResource(class UPrimalItem* theItem);
	bool BPIsCraftingAllowed(class UPrimalItem* anItem);
	void BPInventoryRefresh();
	void BPInitializeInventory();
	int BPIncrementItemTemplateQuantity(class UClass* ItemTemplate, int amount, bool bReplicateToClient, bool bIsBlueprint, bool bRequireExactClassMatch, bool bIsCraftingResourceConsumption, bool bIsFromUseConsumption, bool bIsArkTributeItem, class UPrimalItem* UseSpecificItem, bool bDontExceedMaxItems);
	class UPrimalItem* BPGetItemOfTemplate(class UClass* ItemTemplate, bool bOnlyInventoryItems, bool bOnlyEquippedItems, bool IgnoreItemsWithFullQuantity, bool bFavorSlotItems, bool bIsBlueprint, bool bRequiresExactClassMatch, bool bIgnoreSlotItems, bool bOnlyArkItems, bool bPreferEngram, bool bIsForCraftingConsumption);
	void BPGetExtraItemDisplay(bool* bShowExtraItem, struct FString* Description, struct FString* CustomString, class UTexture2D** EntryIcon, class UMaterialInterface** EntryMaterial);
	class UPrimalItem* BPFindItemWithID(int ItemID1, int ItemID2);
	void BPDropInventoryDeposit(double DestroyAtTime, int OverrideMaxItemsDropped, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride);
	class APrimalStructureItemContainer* BPDropForceLocationInventoryDeposit(double DestroyAtTime, int OverrideMaxItemsDropped, const struct FVector& DepositLocationOverride, int DeadPlayerID);
	bool BPCustomRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer, int RequestedQuantity, bool bRequestedByPlayer, bool bRequestDropping);
	bool BPCustomRemoteInventoryAllowAddItems(class AShooterPlayerController* PC, class UPrimalItem* anItem, int anItemQuantityOverride, bool bRequestedByPlayer);
	class APrimalStructureItemContainer* BPCreateDropItemInventoryEmpty(double DestroyAtTime, class UClass* OverrideInventoryDepositClass, class APrimalStructureItemContainer* CopyStructureValues, class AActor* GroundIgnoreActor, int DeadPlayerID, float DropInventoryOnGroundTraceDistance, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride);
	void BPCraftingFinishedNotification(class UPrimalItem* itemToBeCrafted);
	bool BPAllowUseInInventory(class UPrimalItem* theItem, bool bIsRemoteInventory, class AShooterPlayerController* ByPC);
	bool BPAllowAddInventoryItem(class UPrimalItem* Item, int RequestedQuantity, bool bOnlyAddAll);
	void BPAccessedInventory(class AShooterPlayerController* ForPC);
	bool AllowAddInventoryItem_OnlyAddAll(class UPrimalItem* anItem);
	bool AllowAddInventoryItem_MaxQuantity(class UPrimalItem* anItem, int requestedQuantityIn, int* requestedQuantityOut);
	bool AllowAddInventoryItem_AnyQuantity(class UPrimalItem* anItem);
	class UPrimalItem* AddItemObjectEx(class UPrimalItem* anItem, bool bEquipItem, bool bAddToSlot, bool bDontStack, bool bShowHUDNotification, bool bDontRecalcSpoilingTime, bool bForceIncompleteStacking, class AShooterCharacter* OwnerPlayer, bool bClampStats, class UPrimalItem* InsertAfterItem, bool bInsertAtItemInstead);
	class UPrimalItem* AddItemObject(class UPrimalItem* anItem);
};

// Class ShooterGame.PrimalPlayerData
// 0x04E0 (FullSize[0x0508] - InheritedSize[0x0028])
class UPrimalPlayerData : public UObject
{
public:
	struct FPrimalPlayerDataStruct                     MyData;                                                    // 0x0028(0x0448) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UPrimalBuffPersistentData*>           MyPersistentBuffDatas;                                     // 0x0470(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZY5L[0x58];                                    // 0x0480(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBossEngramsSoftReferenceMapping>    BossEngramReferenceMap;                                    // 0x04D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RedeemedWorldItemSets;                                     // 0x04E8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FName>                               RedeemedWorldEquipSets;                                    // 0x04F8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalPlayerData");
		return ptr;
	}



	bool SetPlayerHexagonCount(int NewHexagonCount);
	void SavePlayerData(class UWorld* ForWorld);
	struct FString LinkedPlayerIDString();
	bool HasUnlockedAllExplorerNotes();
	struct FString GetUniqueIdString();
	class AShooterPlayerState* GetPlayerState(class AShooterPlayerState* ignorePlayerState, bool bOnlyCheckExistingPlayers);
	int GetPlayerHexagonCount();
	class AShooterCharacter* FindCharacterForPlayer(class UWorld* inWorld);
	void BPForceDefeatedBoss(int DifficultyIndex, const struct FName& BossName, class AShooterPlayerController* PlayerController);
	void BPCreatedNewPlayerData();
	void BPApplyToPlayerCharacter(class AShooterPlayerState* ForPlayerState, class AShooterCharacter* NewPlayerCharacter);
	void BPAppliedToPlayerState(class AShooterPlayerState* ForPlayerState);
};

// Class ShooterGame.ShooterPlayerState
// 0x0A18 (FullSize[0x0F10] - InheritedSize[0x04F8])
class AShooterPlayerState : public APlayerState
{
public:
	unsigned char                                      UnknownData_WMMT[0x30];                                    // 0x04F8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalPlayerData*                           MyPlayerData;                                              // 0x0528(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FPrimalPlayerDataStruct                     MyPlayerDataStruct;                                        // 0x0530(0x0448) (Net, Transient)
	class UClass*                                      DefaultItemSlotClasses[0xA];                               // 0x0978(0x0050) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      DefaultItemSlotEngrams[0xA];                               // 0x09C8(0x000A) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WL5G[0x6];                                     // 0x09D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTribeData                                  MyTribeData;                                               // 0x09D8(0x0138) (Net, Transient)
	struct FTribeData                                  LastTribeInviteData;                                       // 0x0B10(0x0138) (Transient)
	unsigned char                                      UnknownData_4CSM[0x38];                                    // 0x0C48(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TotalEngramPoints;                                         // 0x0C80(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                FreeEngramPoints;                                          // 0x0C84(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              EngramItemBlueprints;                                      // 0x0C88(0x0010) (Net, ZeroConstructor, RepNotify)
	unsigned char                                      UnknownData_6JNR[0x50];                                    // 0x0C98(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             NextAllowedRespawnTime;                                    // 0x0CE8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastFlexPipeRefreshConnectionsNetworkTime;                 // 0x0CF0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              AllowedRespawnInterval;                                    // 0x0CF8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SU1R[0x4];                                     // 0x0CFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTimeDiedToEnemyTeam;                                   // 0x0D00(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                CurrentlySelectedDinoOrderGroup;                           // 0x0D08(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZSLD[0x4];                                     // 0x0D0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FDinoOrderGroup                             DinoOrderGroups[0xA];                                      // 0x0D10(0x01E0) (Transient)
	double                                             GenesisAbilityErrorLastTime;                               // 0x0EF0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             NextAllowTurretCopySettingsTime;                           // 0x0EF8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MLAI[0x8];                                     // 0x0F00(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bQuitter : 1;                                              // 0x0F08(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_WB03[0x7];                                     // 0x0F09(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterPlayerState");
		return ptr;
	}



	void ServerUnlockEngram(class UClass* forItemEntry, bool bNotifyPlayerHUD, bool bForceUnlock);
	void ServerTribeRequestRemoveRankGroup(int RankGroupIndex);
	void ServerTribeRequestNewAlliance(const struct FString& AllianceName);
	void ServerTribeRequestApplyRankGroupSettings(int RankGroupIndex, const struct FTribeRankGroup& newGroupSettings);
	void ServerTribeRequestAddRankGroup(const struct FString& GroupName);
	void ServerSetSelectedDinoOrderGroup(int newGroup);
	void ServerSetDinoGroupName(int groupIndex, const struct FString& GroupName);
	void ServerSetDefaultItemSlotClass(int slotNum, class UClass* ItemClass, bool bIsEngram);
	void ServerRequestTransferOwnershipInMyTribe(int PlayerIndexInTribe);
	void ServerRequestSpawnPointsForDownloadedCharacters(uint64_t PlayerDataID, int IgnoreBedID);
	void ServerRequestSetTribeMemberGroupRank(int PlayerIndexInTribe, int RankGroupIndex);
	void ServerRequestSetTribeGovernment(const struct FTribeGovernment& TribeGovernment);
	void ServerRequestRenameTribe(const struct FString& ServerRequestRenameTribe);
	void ServerRequestRemovePlayerIndexFromMyTribe(int PlayerIndexInTribe);
	void ServerRequestRemoveAllianceMember(uint32_t AllianceID, uint32_t MemberID);
	void ServerRequestPromotePlayerInMyTribe(int PlayerIndexInTribe);
	void ServerRequestPromoteAllianceMember(uint32_t AllianceID, uint32_t MemberID);
	void ServerRequestMySpawnPoints(int IgnoreBedID, class UClass* FilterClass);
	void ServerRequestLeaveTribe();
	void ServerRequestLeaveAlliance(uint32_t AllianceID);
	void ServerRequestDinoOrderGroups();
	void ServerRequestDemotePlayerInMyTribe(int PlayerIndexInTribe);
	void ServerRequestCreateNewTribe(const struct FString& TribeName, const struct FTribeGovernment& TribeGovernment);
	void ServerRequestCreateNewPlayer(const struct FPrimalPlayerCharacterConfigStructReplicated& PlayerCharacterConfig);
	void ServerRequestApplyEngramPoints(class UClass* forItemEntry);
	void ServerRejectTribeWar(int EnemyTeamID);
	void ServerGetServerOptions();
	void ServerGetPlayerWhiteListedData();
	void ServerGetPlayerConnectedData();
	void ServerGetPlayerBannedData();
	void ServerGetPlayerAdministratorData();
	void ServerGetAllPlayerNamesAndLocations();
	void ServerGetAlivePlayerConnectedData();
	void ServerDinoOrderGroup_RemoveEntryByIndex(int groupIndex, bool bIsClass, int entryIndex);
	void ServerDinoOrderGroup_Clear(int groupIndex, bool bClearClasses, bool bClearChars);
	void ServerDinoOrderGroup_AddOrRemoveDinoClass(int groupIndex, class UClass* DinoClass, bool bAdd);
	void ServerDinoOrderGroup_AddOrRemoveDinoCharacter(int groupIndex, class APrimalDinoCharacter* DinoCharacter, bool bAdd);
	void ServerDeclareTribeWar(int EnemyTeamID, int StartDayNum, int EndDayNumber, float WarStartTime, float WarEndTime);
	void ServerAcceptTribeWar(int EnemyTeamID);
	void SendTribeInviteData(const struct FTribeData& TribeInviteData);
	void ResetFlexPipeGlobalCooldown();
	void OnRep_UpdatedEngrams();
	void NotifyUniqueDinoDownloaded(const struct FString& TheDinoName);
	void NotifyUniqueDinoDownloadAllowed(const struct FString& TheDinoName);
	void NotifyTribememberLeft(const struct FString& ThePlayerName);
	void NotifyTribememberJoined(const struct FString& ThePlayerName);
	void NotifyPlayerLeftTribe(const struct FString& ThePlayerName, const struct FString& TribeName);
	void NotifyPlayerLeft(const struct FString& ThePlayerName);
	void NotifyPlayerJoinedTribe(const struct FString& ThePlayerName, const struct FString& TribeName);
	void NotifyPlayerJoined(const struct FString& ThePlayerName);
	bool IsTribeAdmin();
	bool IsInTribe();
	bool IsFriendly(int OtherTeam);
	bool IsDinoInOrderGroup(int groupIndex, class APrimalDinoCharacter* dinoChar);
	bool IsDinoClassInOrderGroup(int groupIndex, class UClass* DinoClass);
	bool IsAllowedToRefreshFlexPipeConnections(float Cooldown);
	bool IsAlliedWith(int OtherTeam);
	bool HasEngram(class UClass* ItemClass);
	struct FString GetUniqueIdString();
	int GetTribeId();
	int GetHexCostToPurchaseNextEngramPoint();
	TArray<class UClass*> GetDefaultItemSlotClasses();
	void DoRespec(class UPrimalPlayerData* ForPlayerData, class AShooterCharacter* ForCharacte, bool bSetRespecedAtCharacterLevel);
	void ClientRefreshDinoOrderGroup(int groupIndex, const struct FDinoOrderGroup& groupData, int UseCurrentlySelectedGroup);
	void ClientReceiveSpawnPoints(TArray<struct FSpawnPointInfo> SpawnPointsInfos);
	void ClientNotifyLevelUpAvailable();
	void ClientGetServerOptions(const struct FServerOptions& Info);
	void ClientGetPlayerWhiteListedData(TArray<struct FAdminPlayerDataInfo> list);
	void ClientGetPlayerConnectedData(TArray<struct FAdminPlayerDataInfo> list);
	void ClientGetPlayerBannedData(TArray<struct FAdminPlayerDataInfo> list);
	void ClientGetPlayerAdministratorData(TArray<struct FAdminPlayerDataInfo> list);
	void ClientGetAllPlayerNamesAndLocations(TArray<struct FAliveNameAndLocation> list);
	void ClientGetAlivePlayerConnectedData(TArray<struct FAlivePlayerDataInfo> list);
	void ClearTribe(bool bDontRemoveFromTribe, bool bForce, class APlayerController* ForPC);
	void BroadcastDeath(class AShooterPlayerState* KillerPlayerState, class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState);
	bool AllowTribeGroupPermission(TEnumAsByte<ShooterGame_ETribeGroupPermission> TribeGroupPermission, class UObject* OnObject);
	bool AllowDinoOrderByGroup(class APrimalDinoCharacter* orderDino);
	bool AddToTribe(const struct FTribeData& MyNewTribe, bool bMergeTribe, bool bForce, bool bIsFromInvite, class APlayerController* InviterPC);
};

// Class ShooterGame.ShooterPlayerController
// 0x0A90 (FullSize[0x12C8] - InheritedSize[0x0838])
class AShooterPlayerController : public ABasePlayerController
{
public:
	class UPaintingStreamingComponent*                 PaintingStreamingComponent;                                // 0x0838(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      HeldItemSlot[0xA];                                         // 0x0840(0x000A) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UsedItemSlot[0xA];                                         // 0x084A(0x000A) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_35C5[0x4];                                     // 0x0854(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastRepeatUseConsumableTime[0xA];                          // 0x0858(0x0050) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             HeldItemSlotTime[0xA];                                     // 0x08A8(0x0050) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastUsedItemSlotTimes[0xA];                                // 0x08F8(0x0050) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UClass*                                      PauseMenuUITemplate;                                       // 0x0948(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q0EJ[0x8];                                     // 0x0950(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     CurrentPlayerCharacterLocation;                            // 0x0958(0x000C) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EAID[0x4];                                     // 0x0964(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_4SPE : 6;                                      // 0x0968(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bGamepadHotbarModifierPressed : 1;                         // 0x0968(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_UZMA[0xF];                                     // 0x0969(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalStructurePlacer*                      StructurePlacer;                                           // 0x0978(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HK06[0x18];                                    // 0x0980(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalCharacter>             LastDeathPrimalCharacter;                                  // 0x0998(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AUGD[0x18];                                    // 0x09A0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bShowGameModeHUD;                                          // 0x09B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YLDA[0x17];                                    // 0x09B9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   SelectSlotSound;                                           // 0x09D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      FogOfWarClass;                                             // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFogOfWar*                                   FogOfWar;                                                  // 0x09E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UPrimalLocalProfile*                         PrimalLocalProfile;                                        // 0x09E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3F2S[0x4];                                     // 0x09F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrentGameModeMaxNumOfRespawns;                           // 0x09F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AShooterCharacter*                           LastDiedListenServerHost;                                  // 0x09F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastRawInputDir;                                           // 0x0A00(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W1Q8[0x1C];                                    // 0x0A0C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      StructurePlacerClass;                                      // 0x0A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              MaxUseDistance;                                            // 0x0A30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxUseCheckRadius;                                         // 0x0A34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<bool>                                       SavedSurvivorProfileSettings;                              // 0x0A38(0x0010) (ZeroConstructor, Transient)
	bool                                               bCachedOnlyShowOnlineTribeMembers;                         // 0x0A48(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5UZN[0x3];                                     // 0x0A49(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SavedMissionBiomeFilterMask;                               // 0x0A4C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bInitializedMissionUI;                                     // 0x0A50(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bMissionSortByDistance;                                    // 0x0A51(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YXH0[0x6];                                     // 0x0A52(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoMapMarkerInfo>                  MapDinos;                                                  // 0x0A58(0x0010) (ZeroConstructor, ContainsInstancedReference)
	TArray<TWeakObjectPtr<class UPrimalInventoryComponent>> RemoteViewingInventories;                                  // 0x0A68(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_BXKV[0x38];                                    // 0x0A78(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIsFirstSpawn : 1;                                         // 0x0AB0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bIsRespawning : 1;                                         // 0x0AB0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_LSES[0x27];                                    // 0x0AB1(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SteamInventoryStatusUITemplate;                            // 0x0AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FG55[0xC8];                                    // 0x0AE0(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FItemNetID                                  LastSteamItemIDToRemove;                                   // 0x0BA8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FItemNetID                                  LastSteamItemIDToAdd;                                      // 0x0BB0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TAU3[0x208];                                   // 0x0BB8(0x0208) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SpectatorCycleIndex;                                       // 0x0DC0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7HJY[0x1];                                     // 0x0DC4(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsFastTravelling;                                         // 0x0DC5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bLastSpawnWasFastTravel;                                   // 0x0DC6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_07R2[0x1A];                                    // 0x0DC7(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bPreventPaintingStreaming;                                 // 0x0DE1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JNEX[0xAE];                                    // 0x0DE2(0x00AE) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FServerChatMessage>                  ServerMessageQueue;                                        // 0x0E90(0x0010) (ZeroConstructor, Transient)
	bool                                               bReachedTamedDinoLimit;                                    // 0x0EA0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHasSurvivedOneDay;                                        // 0x0EA1(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHasReachedHighestPeak;                                    // 0x0EA2(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHasReachedLowestDepth;                                    // 0x0EA3(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UNHN[0x104];                                   // 0x0EA4(0x0104) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<unsigned char>                              LastDownloadPlayerDataBytes;                               // 0x0FA8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_NQCA[0x28];                                    // 0x0FB8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ViewingWheelCategory;                                      // 0x0FE0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ASYL[0x14];                                    // 0x0FE4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_BJMP : 2;                                      // 0x0FF8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNotifyPawnBuffsOfDamageEvents : 1;                        // 0x0FF8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6UP5[0x8];                                     // 0x0FF9(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bForceHideGameplayUI;                                      // 0x1001(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_96PQ[0xE];                                     // 0x1002(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsGamepadActive;                                          // 0x1010(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NS9E[0x27];                                    // 0x1011(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bPreventDefaultCharacterItems;                             // 0x1038(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FSL7[0x3];                                     // 0x1039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SFXVolumeMultiplier;                                       // 0x103C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NQ72[0xE0];                                    // 0x1040(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CreativeModeBuff;                                          // 0x1120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PrimalStatsCacheFlushInterval;                             // 0x1128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8SRC[0x38];                                    // 0x112C(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PingTraceDistance;                                         // 0x1164(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              PingNotifyRadius;                                          // 0x1168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              PingLifetime;                                              // 0x116C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              PingLifetime_Dying;                                        // 0x1170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              PingCoolDownTime;                                          // 0x1174(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  PingIcon_Default;                                          // 0x1178(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  PingIcon_Players;                                          // 0x1180(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  PingIcon_Dinos;                                            // 0x1188(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  PingIcon_Structures;                                       // 0x1190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	double                                             LastPingTime;                                              // 0x1198(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TArray<struct FPingData>                           CurrentPings;                                              // 0x11A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected)
	unsigned char                                      bWantsToPing : 1;                                          // 0x11B0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bEnablePingSystem : 1;                                     // 0x11B0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_7U2P[0x3];                                     // 0x11B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDebugPOIs;                                                // 0x11B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_T8XR[0x3];                                     // 0x11B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              POI_SearchTickInterval_Current;                            // 0x11B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector2D                                   POI_SearchTickInterval_RandRanges;                         // 0x11BC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              POI_SearchRadius;                                          // 0x11C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	double                                             POI_LastSearchTickTime;                                    // 0x11C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	TArray<class UUserWidget*>                         SpawnedPointWidgets;                                       // 0x11D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected)
	TArray<class APointOfInterestCosmeticActor*>       SpawnedPointCosmeticActors;                                // 0x11E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected)
	TArray<struct FPointOfInterestData_ForCompanion>   NearbyPointsOfInterest;                                    // 0x11F0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected)
	struct FMissionWaypointInfo                        MissionWaypoint;                                           // 0x1200(0x0028) (BlueprintVisible, BlueprintReadOnly, Transient, Protected)
	TArray<struct FTamingWaypointInfo>                 TamingWaypoints;                                           // 0x1228(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected)
	unsigned char                                      bWasGamepadHotbarModifierPressed_RightShoulder : 1;        // 0x1238(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_R84S[0x57];                                    // 0x1239(0x0057) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnClientReceiveStructuresPlacedOnFloor;                    // 0x1290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_G07U[0x20];                                    // 0x12A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsInAdvancedCinematicMode;                                // 0x12C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CM7P[0x7];                                     // 0x12C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterPlayerController");
		return ptr;
	}



	void ZoneVolumeReport();
	struct FString WritePNTScreenshot();
	bool ViewingAnUploadTerminal();
	void UnlockExplorerNote(int ExplorerNoteIndex, bool forceShowExplorerNoteUI);
	void UnlockEmote(const struct FName& EmoteName);
	void TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox();
	void TryToForceUploadCharacter();
	void ToggleWeaponAccessory();
	void ToggleHud();
	void Tick_UpdatePings(float DeltaTime);
	void Tick_SearchForPOIs(float DeltaTime);
	void TestPurchaseEP();
	void TestPhysxPerf(int RayCount, float DistanceOfRays);
	void TestNotification();
	void TestAlarmNotification(const struct FString& Title, const struct FString& Message);
	void StopSpectating();
	void StartWhistleSelection();
	void StartSurfaceCameraForPassenger(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll);
	void StartSurfaceCamera(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll, float OnSurfaceCameraInterpolationSpeed, bool UseSurfaceCameraInterpolation, const struct FVector& CameraOffset);
	void StartPlacingStructrue(class UClass* BuildingStructure);
	void StartEmoteSelection();
	void StartArkGamepadRightShoulder();
	void StartArkGamepadLeftShoulder();
	void StartArkGamepadFaceButtonTop();
	void StartArkGamepadFaceButtonRight();
	void StartArkGamepadFaceButtonLeft();
	void StartArkGamepadFaceButtonBottom();
	void StartArkGamepadDpadUp();
	void StartArkGamepadDpadRight();
	void StartArkGamepadDpadLeft();
	void StartArkGamepadDpadDown();
	void StartArkGamepadBackButton();
	void ShowMyAdminManager();
	bool ShouldHideGameplayUI();
	void SetPlayerPos(float X, float Y, float Z);
	void SetMultiUseWheelCategory(int Category, class APrimalBuff* OptionalBuff);
	void SetMissionWaypointVisible(bool bInIsVisible);
	void SetMissionWaypointInfo(const struct FString& InWaypointTitle, const struct FVector& InWaypointDestination, const struct FName& InWaypointID);
	void SetInfiniteStats(bool bInfinite);
	void SetGodMode(bool bEnable);
	void SetDoFInterpTime(float InterpTime);
	void SetControllerGamepadActive(bool bIsActive);
	void SetCinematicModeAdvanced(bool bInCinematicMode, bool bPreventCameraAnimFPV, bool bSetHUDHidden, bool bDisableKeymappings, TArray<struct FName> KeyActionNames, bool bDisableChat);
	void SetCheatPlayer(bool bEnable);
	void SetAutoPlayer(bool bEnable);
	void SetAdminIcon(bool bAdminIcon);
	void ServerVerifyStructurePlacementItemData(const struct FItemNetID& PlaceUsingItemID);
	void ServerUploadDino(class APrimalDinoCharacter* DownloadedDino);
	void ServerUploadCurrentCharacterAndItems(class UPrimalInventoryComponent* InventoryComp);
	void ServerUploadCharaterDataToArk(class UPrimalInventoryComponent* InventoryComp);
	void ServerUnlockPerMapExplorerNote(int ExplorerNoteIndex, bool bAvoidBuff);
	void ServerUnbanPlayer(const struct FString& PlayerSteamName, const struct FString& PlayerSteamID);
	void ServerTransferToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, bool bAlsoTryToEqup, int RequestedQuantity);
	void ServerTransferredPlayerConfirmationResult(bool bAccept);
	void ServerTransferFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity, int ToSlotIndex, bool bEquipItem);
	void ServerTransferAllToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FString& CurrentCustomFolderFilter, const struct FString& CurrentNameFilter, const struct FString& CurrentDestinationFolder, bool bNoFolderView);
	void ServerTransferAllFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FString& CurrentCustomFolderFilter, const struct FString& CurrentNameFilter, const struct FString& CurrentDestinationFolder, bool bNoFolderView);
	void ServerSuicide();
	void ServerStopWeaponFire(class AShooterWeapon* weapon);
	void ServerStopWeaponAltFire(class AShooterWeapon* weapon);
	void ServerStopSpectating();
	void ServerStayAlive();
	void ServerStartWeaponFire(class AShooterWeapon* weapon);
	void ServerStartWeaponAltFire(class AShooterWeapon* weapon);
	void ServerSpectateToPlayerByID(uint64_t PlayerId);
	void ServerShowMessageOfTheDay();
	void ServerSetVRPlayer(bool bSetVRPlayer);
	void ServerSetSupressAdminIcon(bool bSuppress);
	void ServerSetSubscribedApp(int AppID, bool bPreventDefaultItems);
	void ServerSetMessageOfTheDay(const struct FString& Message);
	void ServerSetItemBalloonLocation(class APrimalStructureMovingContainer* ItemBalloon, const struct FPrimalMapMarkerEntryData& MapMarker);
	void ServerSendDirectMessage(const struct FString& PlayerSteamID, const struct FString& Message);
	void ServerSendChatMessage(const struct FString& ChatMessage, TEnumAsByte<ShooterGame_EChatSendMode> SendMode);
	void ServerSendArkDataPayloadEnd(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType);
	void ServerSendArkDataPayloadBegin(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType, const struct FString& DataClass, const struct FString& TagName, const struct FString& Name, TArray<struct FString> DataStats, uint32_t ID1, uint32_t ID2);
	void ServerSendArkDataPayload(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType, TArray<unsigned char> DataBytes);
	void ServerSelectedCustomItemAction(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, const struct FName& SelectedOption);
	void ServerSaveWorld();
	void ServerRequestUpdateActiveMissionTags();
	void ServerRequestTribeLog();
	void ServerRequestTamingInfoList();
	void ServerRequestStructuresPlacedOnFloor(TArray<class APrimalStructure*> OnStructures);
	void ServerRequestShowLeaderboards(class UClass* LeaderboardType, const struct FName& MissionTag);
	void ServerRequestSetPin(class UObject* forTarget, int PinValue, bool bIsSetting, int TheCustomIndex);
	void ServerRequestRespawnAtPoint(int SpawnPointID, int spawnRegionIndex);
	void ServerRequestRemoveWeaponClipAmmo(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRequestRemoveWeaponAccessoryOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRequestRemoveItemSkinOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRequestRemoveItemSkin(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRequestRemoveDinoFromTamingListByID(int InID1, int InID2);
	void ServerRequestRemoteDropAllItems(class UPrimalInventoryComponent* InventoryComp, const struct FString& CurrentCustomFolderFilter, const struct FString& CurrentNameFilter);
	void ServerRequestPlaceStructure(int StructureIndex, const struct FVector& BuildLocation, const struct FRotator& BuildRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, class APrimalDinoCharacter* DinoCharacter, const struct FName& BoneName, const struct FItemNetID& PlaceUsingItemID, bool bSnapped, bool bIsCheat, bool bIsFlipped, int SnapPointCycle);
	void ServerRequestMyTribeOnlineList();
	void ServerRequestLevelUp(class UPrimalCharacterStatusComponent* forStatusComp, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	void ServerRequestInventoryUseItemWithItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2, int AdditionalData);
	void ServerRequestInventoryUseItemWithActor(class AActor* anActor, class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, int AdditionalData);
	void ServerRequestInventoryUseItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRequestInventorySwapItems(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
	void ServerRequestFastTravelToPoint(int fromSpawnPointID, int SpawnPointID);
	void ServerRequestDropAllItems(const struct FString& CurrentCustomFolderFilter, const struct FString& CurrentNameFilter);
	void ServerRequestDownloadPlayerCharacter(const struct FArkTributePlayerData& DownloadedCharacter, int SpawnPointID, int spawnRegionIndex);
	void ServerRequestDownloadDino(const struct FARKTributeDino& DownloadedDino);
	void ServerRequestDinoCharStats(class APrimalDinoCharacter* theDinoChar);
	void ServerRequestDinoAncestors(class APrimalDinoCharacter* ForDino);
	void ServerRequestCreateMissionDataBuff();
	void ServerRequestActorItems(class UPrimalInventoryComponent* forInventory, bool bInventoryItems, bool bIsFirstSpawn);
	void ServerRepeatMultiUse(class UObject* ForObject, int UseIndex);
	void ServerRepairItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerRemoveSteamItemSucceeded();
	void ServerRemoveSteamItem(uint32_t ItemdDefId);
	void ServerRemovePawnItem(const struct FItemNetID& ItemId, bool bSecondryAction);
	void ServerRemovePassenger();
	void ServerRemoveAdminPlayer(const struct FString& PlayerSteamName, const struct FString& PlayerSteamID);
	void ServerReleaseSeatingStructure();
	void ServerRefreshSteamInventory();
	void ServerRecieveSpectatorLocationAndRotation(const struct FVector& spectatorLocation, const struct FRotator& spectatorRotation);
	void ServerReadMessageOFTheDay();
	void ServerProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerPaint(class UStructurePaintingComponent* Structure, TArray<struct FPaintItem> Paints, bool bLastBatch, bool bFromLoadFile);
	void ServerNotifyEditText(const struct FString& TextToUse, bool checkedBox, class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject);
	void ServerMultiUse(class UObject* ForObject, int UseIndex);
	void ServerLoadWorld();
	void ServerLoadUploadedDinos();
	void ServerLoadUploadedCharacters();
	void ServerLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch);
	void ServerListPlayers();
	void ServerKickPlayer(const struct FString& PlayerSteamName, const struct FString& PlayerSteamID);
	void ServerInventoryClearCraftQueue(class UPrimalInventoryComponent* InventoryComp);
	void ServerGrindItemInRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, bool grindStack);
	void ServerGlobalCommand(const struct FString& Msg);
	void ServerGetOriginalHairColor();
	void ServerGetMessageOfTheDay();
	void ServerEquipToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerEquipPawnItem(const struct FItemNetID& ItemId);
	void ServerDropFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerDropAllNotReadyForUploadItems();
	void ServerDPC();
	void ServerDownloadTransferredPlayer(int SpawnPointID, int spawnPointRegionIndex);
	void ServerDisallowPlayerToJoinNoCheck(const struct FString& PlayerId);
	void ServerDeleteItemFromCustomFolder(class UPrimalInventoryComponent* forInventory, const struct FString& CFolderName, int InventoryCompType, const struct FItemNetID& ItemId);
	void ServerDeleteCustomFolder(class UPrimalInventoryComponent* forInventory, const struct FString& CFolderName, int InventoryCompType);
	void ServerDataSetRPC(TArray<struct FDataSet> dataSets);
	void ServerCycleSpectator(bool bNext);
	void ServerCraftItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
	void ServerCheckUnfreeze();
	void ServerCheckIsValidPlayerToDownload(const struct FArkTributePlayerData& PlayerData);
	void ServerCharacterUploadWithItems_UploadItem(uint64_t PlayerDataID, const struct FItemNetInfo& InvItem);
	void ServerCharacterUploadWithItems_Start(uint64_t PlayerDataID, const struct FArkTributePlayerData& PlayerData);
	void ServerCharacterUploadWithItems_FinishAndCreateCharacter(uint64_t PlayerDataID);
	void ServerCharacterUploadWithItems_CharaterPayload(uint64_t PlayerDataID, TArray<unsigned char> PlayerDataChunk);
	void ServerBanPlayer(const struct FString& PlayerSteamName, const struct FString& PlayerSteamID);
	void ServerAsyncLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch);
	void ServerAllowPlayerToJoinNoCheck(const struct FString& PlayerId);
	void ServerAddItemToCustomFolder(class UPrimalInventoryComponent* forInventory, const struct FString& CFolderName, int InventoryCompType, const struct FItemNetID& ItemId);
	void ServerAddItemToArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity);
	void ServerAddItemFromArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity);
	void ServerAddAdminPlayer(const struct FString& PlayerSteamName, const struct FString& PlayerSteamID);
	void ServerAddAchievementID(const struct FString& AchievementID, bool bIsOnSpawn);
	void ServerActorViewRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
	void ServerActorCloseRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
	void Server_RespondToPing(const struct FReplicatePingData& RespondToPingData);
	void Server_Ping(const struct FReplicatePingData& WithPingData);
	void SendAlarmNotification(const struct FString& SteamID, const struct FString& Title, const struct FString& Message);
	void SCP();
	bool SameLinkedId(int64_t Value);
	void RPCStayAlive();
	void RespondToPing(const struct FReplicatePingData& RespondToPingData);
	void RequestSpectator(const struct FString& InSpectatorPass);
	void RemoveItemSucceeded();
	void QuitToMainMenu();
	void PurchaseEngramPoint(int NumPointsToPurchase);
	void PrintColors();
	void PlayHitMarkerStructureAlly();
	void PlayHitMarkerStructure();
	void PlayHitMarkerCharacter(bool bHitFriendlyTarget, const struct FHitMarkerSettings& HitMarkerSettings);
	struct FString PlayerCommand(const struct FString& TheCommand);
	void PingNearbyPlayers(const struct FReplicatePingData& WithPingData);
	void OnWhistlePress();
	void OnToggleInGameMenu();
	void OnToggleDoFMenu();
	void OnStopTargeting();
	void OnStopFire();
	void OnStartTargeting();
	void OnStartFire();
	void OnServerRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID);
	void OnRefreshSteamInventoryToCheckConsumeFinished(bool bSuccess, uint64_t SteamID);
	void OnRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID);
	void OnPingUp();
	void OnPingDown();
	void OnLoadArkTributePlayersDataFinished(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int FailureResponseCode);
	void OnLevelView();
	void OnFirstSaveAfterCharacterDownloadFinished(bool Success);
	void OnEmoteKey2Release();
	void OnEmoteKey2Press();
	void OnEmoteKey1Release();
	void OnEmoteKey1Press();
	void OnDisableSpectator();
	void OnCurrentCharacterAndItemsUploaded(bool Success);
	void OnConsumeItemFinished(bool bSuccess, uint64_t SteamID);
	void OnClientReceiveStructuresPlacedOnFloor__DelegateSignature(class APrimalStructure* Structure, TArray<class APrimalStructure*> StructuresPlacedOnFloor);
	void OnArkTributeSaved(bool Success);
	void OnAddItemFinished(bool bSuccess, TArray<uint64_t> SteamItemUserIDs, uint64_t SteamID);
	void OnAddedItemsToAllClustersInventory(bool Success, const struct FString& UserId, TArray<int> MasterIndexNum);
	void NotifyTribeWarStatus(const struct FString& EnemyTribeString, int StatusType);
	void NotifyPawnBuffsOfDamageEvent(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
	void LockEmote(const struct FName& EmoteName);
	struct FString LinkedPlayerIDString();
	void LevelView();
	void LeaveMeAlone();
	bool IsViewingInventoryUI();
	bool IsTribeAdmin();
	bool IsSpectator();
	bool IsRemoteControlling();
	bool STATIC_IsPlayerViewingPing(class AShooterPlayerController* ForPC, const struct FPingData& CheckPingData);
	bool STATIC_IsPingedItem(class UPrimitiveComponent* PingComponent);
	bool IsPawnAcknowledged();
	bool IsJumpInputPressed();
	bool IsInTribe();
	bool IsInputPressed(const struct FName& InputName, const struct FName& GamepadInputName);
	bool IsHudVisible();
	bool IsGameInputAllowed();
	bool IsFirstLocalPlayerOrLivingLocalPlayer();
	bool IsFirstLocalPlayer();
	bool IsEmoteUnlocked(const struct FName& EmoteName);
	bool IsAtPersonalTameLimit(bool bIsForStructure);
	bool IsAltFireInputPressed();
	bool InitPing(struct FPingData* ForPingData, const struct FReplicatePingData& InitFromData);
	void InitCharacterPainting(class APrimalCharacter* Char);
	void InfiniteStats();
	void HideRiders(bool bDoHide);
	bool HasGodMode();
	bool HasBestScoreForMission(const struct FName& MissionTag);
	void GlobalCommand(const struct FString& Msg);
	bool GiveSlotItemNum(int MasterIndexNum, int slotNum, int quantityOverride);
	bool GiveSlotItem(const struct FString& blueprintPath, int slotNum, int quantityOverride);
	void GiveColors(int Quantity);
	void GetTamedDinosNearBy(TArray<TWeakObjectPtr<class APrimalDinoCharacter>>* Dinos, float RangeRadius, const struct FVector& NearLocation);
	int GetSubscribedAppIds();
	class AShooterHUD* GetShooterHUD();
	struct FString GetPlayerCharacterName();
	class AShooterCharacter* GetPlayerCharacter();
	struct FString STATIC_GetPingTitleForActor(class AActor* forActor);
	class UTexture2D* GetPingIconForComponent(class UPrimitiveComponent* ForComponent);
	struct FString GetPersonalTameLimitString();
	class UPrimalInventoryComponent* GetPawnInventoryComponent();
	TArray<struct FPointOfInterestData_ForCompanion> GetNearbyPOIs();
	int GetLinkedPlayerID();
	class UPrimalItem* GetInventoryUISelectedItemRemote();
	class UPrimalItem* GetInventoryUISelectedItemLocal();
	TArray<unsigned char> GetHeldItemSlots();
	struct FExplorerNoteEntry GetExplorerNoteEntry(int ExplorerNoteIndex);
	class AShooterCharacter* GetControllerPlayer();
	struct FLeaderboardRow GetBestScoreForMission(const struct FName& MissionTag);
	void GetAllMatinees();
	bool GetAllAimedHarvestActors(float MaxDistance, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<int>* OutHitBodyIndices);
	class AMissionType* GetActiveMission();
	struct FString FormatTextWithKeyBindings(const struct FString& InText, bool bIgnoreMarkup);
	void FlushPrimalStats();
	void FlushLevelStreaming();
	void FinalFlushLevelStreaming();
	void EnvQA();
	void EndWhistleSelection();
	void EndSurfaceCamera();
	void EndEmoteSelection();
	void EndArkGamepadRightShoulder();
	void EndArkGamepadLeftShoulder();
	void EndArkGamepadFaceButtonTop();
	void EndArkGamepadFaceButtonRight();
	void EndArkGamepadFaceButtonLeft();
	void EndArkGamepadFaceButtonBottom();
	void EndArkGamepadDpadRight();
	void EndArkGamepadDpadLeft();
	void EndArkGamepadDpadDown();
	void EndArkGamepadBackButton();
	void EndAArkGamepadDpadUp();
	void EnableSpectator();
	void DoServerCheckUnfreeze();
	void DoPlayerCommand(const struct FString& TheCommand);
	bool DoPingTrace(struct FReplicatePingData* NewPing, bool* bIsResponding);
	bool STATIC_DoesPlayerOwnPing(class AShooterPlayerController* PlayerPC, uint32_t PingOwnerID);
	void DoCrash();
	void DisableSurfaceCameraInterpolation();
	void DisableEnemyInvisible();
	void DebugStructures();
	void DebugCheckSeven(bool bEnable);
	void CopyWorldBuffStatus();
	void CopyCoordsToClipboard();
	void ConditonalEndGamepadModiferState();
	void ClientUsedActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId);
	void ClientUploadedDinosLoaded(TArray<struct FARKTributeDinoListing> UploadedDinosDataListings);
	void ClientUploadedCharactersLoaded(bool Success, TArray<struct FArkTributePlayerDataListing> UploadedCharactersDataListings);
	void ClientUploadDino(class APrimalDinoCharacter* DownloadedDino);
	void ClientUpdateItemWeaponClipAmmo(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int ammo);
	void ClientUpdateItemQuantity(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int ItemQuantity);
	void ClientUpdateItemDurability(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, float ItemDurability);
	void ClientUpdateItemCustomData(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, const struct FCustomItemData& InData);
	void ClientUpdateInventoryCraftQueue(class UPrimalInventoryComponent* forInventory, TArray<struct FItemCraftQueueEntry> CraftQueueEntries);
	void ClientUnlockExplorerNote(int ExplorerNoteIndex, bool forceShowExplorerNoteUI);
	void ClientUnlockAchievement(const struct FString& AchievementID);
	void ClientTeleportSpectator(const struct FVector& Location, uint64_t PlayerId);
	void ClientSwapActorItems(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
	void ClientStopLocalSound(class USoundBase* aSound);
	void ClientStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
	void ClientStartReceivingTribeLog();
	void ClientStartReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems);
	void ClientShowTransferredPlayerConfirmationDialog();
	void ClientShowSpawnUIForTransferringPlayer(class UClass* NewHUDClass, uint64_t TransferingPlayerID, bool bUseTimer);
	void ClientShowSpawnUI(float Delay);
	void ClientShowPaintingUI(class UObject* ObjectToPaint);
	void ClientShowLeaderboard(class UClass* LeaderboardType, const struct FName& MissionTag, TArray<struct FLeaderboardRow> LeaderboardRows, bool bPlayerHasValidLatestScore, const struct FLeaderboardRow& LatestPlayerScore);
	void ClientShowCharacterCreationUI(bool bShowDownloadCharacter);
	void ClientSetSpectatorLocation(const struct FVector& NewLocation);
	void ClientSetPersonalDinoTameCount(int NewPersonalDinoTameCount);
	void ClientSetHUDAndInitUIScenes(class UClass* NewHUDClass);
	void ClientSetControlRotation(const struct FRotator& NewRotation);
	void ClientSetCanEnableCheats(bool bIsPossible);
	void ClientSetArkTributeLimits(bool LimitItems, bool LimitDinos, bool LimitCharacters, int MaxItems, int MaxDinos, int MaxCharacters);
	void ClientServerSOTFNotificationCustom(const struct FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay);
	void ClientServerSOTFNotification(TEnumAsByte<ShooterGame_ESTOFNotificationType> NotificationType, const struct FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, bool bLastPlayer, const struct FString& TribeName, TArray<struct FString> PlayerNames, const struct FString& DeathReason, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> DeadPlayersData);
	void ClientServerNotificationSingle(const struct FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int MessageTypeID);
	void ClientServerNotification(const struct FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay);
	void ClientServerChatMessage(const struct FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
	void ClientServerChatDirectMessage(const struct FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
	void ClientSendItemNetExecCommandToServer(class UPrimalItem* ForItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
	void ClientSendFolderData(class UPrimalInventoryComponent* forInventory, TArray<struct FServerCustomFolder> ServerCustomFolder);
	void ClientSendArkDataPayloadEnd(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType, uint64_t PlayerDataID);
	void ClientSendArkDataPayloadBegin(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType, const struct FString& DataClass, const struct FString& TagName, const struct FString& Name, TArray<struct FString> DataStats, uint32_t ID1, uint32_t ID2);
	void ClientSendArkDataPayload(const struct FGuid& ID, TEnumAsByte<ShooterGame_EPrimalARKTributeDataType> ArkDataType, TArray<unsigned char> DataBytes);
	void ClientRunLocalConsoleCommand(const struct FString& Command, bool bWriteToLog);
	void ClientResetRespawningFlag();
	void ClientRequestSpectatorLocationAndRotation();
	void ClientRemoveItemFromSteamInventory(TArray<uint64_t> ItemSteamUserID, int Quantity);
	void ClientRemoveItemFromArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& RemovedItemID);
	void ClientRemoveActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, bool showHUDMessage);
	void ClientRefreshSteamInventoryFinished(bool bSuccess);
	void ClientReceiveTribeLog(const struct FString& LogString);
	void ClientReceiveTamingInfoList(TArray<struct FTamingDinoInfo> InfoList);
	void ClientReceiveStructuresPlacedOnFloor(TArray<struct FStructuresOnFloor> Structures);
	void ClientReceiveOriginalHairColor(const struct FLinearColor& HairColor);
	void ClientReceiveMyTribeOnlineList(TArray<uint32_t> OnlinePlayerIDs);
	void ClientReceiveDinoCharStats(class APrimalDinoCharacter* theDinoChar, TArray<float> CurValues, TArray<float> MaxValues);
	void ClientReceiveDinoAncestors(class APrimalDinoCharacter* ForDino, TArray<struct FDinoAncestorsEntry> DinoAncestors, TArray<struct FDinoAncestorsEntry> DinoAncestorsMale, int RandomMutationsFemale, int RandomMutationsMale);
	void ClientReceiveActiveMissionTags(TArray<struct FName> MissionTags);
	void ClientProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientPlayLocalSound(class USoundBase* aSound, bool bAttach);
	void ClientPlayerIsValidToDownload(bool bIsValid, const struct FArkTributePlayerData& PlayerData);
	void ClientOnStartDownloadTransferredPlayerCharacter();
	void ClientOnEndDownloadTransferredPlayerCharacter(bool Success, int FailureResponseCode, const struct FString& FailureResponseMessage);
	void ClientOnDropAllNotReadyForUploadItemsFinished();
	void ClientOnCurrentCharacterAndItemsUploaded(uint64_t TransferringPlayerDataId);
	void ClientOnAddedItemsToAllClustersInventory(bool Success, const struct FString& UserId, TArray<int> MasterIndexNum);
	void ClientNotifyUnlockHairStyleOrEmote(const struct FName& HairstyleOrEmoteName);
	void ClientNotifyUnlockedEngram(class UClass* ItemClass, bool bTekGram);
	void ClientNotifyUnlockedAllExplorerNotes();
	void ClientNotifyTribeXP(float HowMuch);
	void ClientNotifyTorpidityIncrease();
	void ClientNotifyTamedDino(class UClass* DinoClass);
	void ClientNotifySummonedDino(class UClass* DinoClass);
	void ClientNotifyShowProfileRequest(const struct FUniqueNetIdRepl& ProfileId);
	void ClientNotifyRemotePlayerDeath(const struct FString& PlayerName, const struct FString& AttackerName);
	void ClientNotifyPlayerKill(class AActor* PlayerPawn, class APawn* VictimPawn);
	void ClientNotifyPlayerDeathReason(const struct FString& ReasonString);
	void ClientNotifyPlayerDeath(class APawn* InstigatingPawn);
	void ClientNotifyPaintFinished(bool bSuccess);
	void ClientNotifyMessageOfTheDay(const struct FString& Message, float timeToDisplay);
	void ClientNotifyListenServerOutOfRange();
	void ClientNotifyLevelUp(class APrimalCharacter* forChar, int NewLevel);
	void ClientNotifyHitHarvest();
	void ClientNotifyEditText(class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject);
	void ClientNotifyDinoKill(class APrimalDinoCharacter* InstigatingPawn, class APawn* VictimPawn);
	void ClientNotifyDinoDeath(const struct FString& DinoName, const struct FString& AttackerName, bool bIsVehicle);
	void ClientNotifyDefeatedDino(class UClass* DinoClass);
	void ClientNotifyCantHitHarvest();
	void ClientNotifyCantHarvest();
	void ClientNotifyAdmin();
	void ClientLoadArkItems(class UPrimalInventoryComponent* forInventory, TArray<struct FItemNetInfo> itemInfos, bool bClear, bool bFinalBatch);
	void ClientInsertActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, const struct FItemNetID& InsertAfterItemID);
	void ClientHUDNotificationTypeParams(int MessageType, int MessageType1, int MessageParam2, class UObject* ObjectParam1);
	void ClientGetMessageOfTheDay(const struct FString& Message);
	void ClientFinishedReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems);
	void ClientFinishedLoadArkItems(class UPrimalInventoryComponent* forInventory);
	void ClientFailedToAddItemFromArkInventory();
	void ClientFailedRemoveSaddle();
	void ClientEndReceivingTribeLog();
	void ClientDrawBrushComponentInGame(class UBrushComponent* BrushComponent, float Duration, bool bDrawSolidBox);
	void ClientDownloadPlayerCharacterRequestFinished(bool Success);
	void ClientDownloadDinoRequestFinished(bool Success);
	void ClientDoMultiUse(class UObject* ForObject, int UseIndex);
	void ClientDataSetRPC(TArray<struct FDataSet> dataSets);
	void ClientCollectedAchievementItem(class UClass* ItemClass);
	void ClientChatMessage(const struct FChatMessage& Chat);
	void ClientAddItemToArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bFromLoad);
	void ClientAddFolderToInventoryComponent(class UPrimalInventoryComponent* forInventory, const struct FString& NewCustomFolderName, int InventoryCompType);
	void ClientAddFloatingText(const struct FVector_NetQuantize& AtLocation, const struct FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
	void ClientAddFloatingDamageText(const struct FVector_NetQuantize& AtLocation, int DamageAmount, int FromTeamID);
	void ClientAddActorItemToFolder(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification, const struct FString& ToFolder);
	void ClientAddActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification);
	void Client_ReceivePingResponse(const struct FReplicatePingData& ResponseData, class AShooterCharacter* RespondingPlayer);
	void Client_ReceivePing(const struct FReplicatePingData& ReceivedPingData);
	void Client_ReceiveBuffFromDayCycle(class UClass* GiveBuffClass, class ADayCycleManager* FromDayCycle);
	void CheckRequestSpectator(const struct FString& InSpectatorPass);
	void CheckForPlayerInventory();
	void CheckforOrbiting();
	void CheckCheatsPassword(const struct FString& pass);
	void CheckCanEnableCheats();
	void Cheat(const struct FString& Msg);
	void CCC();
	bool CanPingPlayer(class AShooterCharacter* ForPlayer);
	bool CanDoPlayerCharacterInput(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry);
	void BPServerHandleDataSetRPC(TArray<struct FDataSet> dataSets);
	void BPClientUnlockExplorerNote(int ExplorerNoteIndex, bool forceShowExplorerNoteUI);
	void BPClientHandleDataSetRPC(TArray<struct FDataSet> dataSets);
	bool BPCheckClientPossession();
	struct FVector BPCheckCanDinoSpawnFromLocation(class UClass* DinoClass, const struct FVector& CheckLocation);
	void BPActivatedMultiUseSelection();
	void AutoCycle(float Duration);
	void AttemptTransferRedownload();
	void AsyncLoadInventory();
	bool AllowTribeGroupPermission(TEnumAsByte<ShooterGame_ETribeGroupPermission> TribeGroupPermission, class UObject* OnObject);
	void AdminCheat(const struct FString& Msg);
};

// Class ShooterGame.BeamWeaponComponent
// 0x00C8 (FullSize[0x0730] - InheritedSize[0x0668])
class UBeamWeaponComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             ParticleSystemTemplate;                                    // 0x0668(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             ChargeupParticleSystemTemplate;                            // 0x0670(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             BurstWhenFiredSystemTemplate;                              // 0x0678(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             ImpactSystemTemplate;                                      // 0x0680(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Duration;                                                  // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DamageRadius;                                              // 0x068C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageType;                                                // 0x0690(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DamageDelay;                                               // 0x0698(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BaseDamage;                                                // 0x069C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Length;                                                    // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               IsPenetrating;                                             // 0x06A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SW0F[0x3];                                     // 0x06A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TargetTrackingSpeed;                                       // 0x06A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               UseOwnerForward;                                           // 0x06AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_887D[0x3];                                     // 0x06AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Offset;                                                    // 0x06B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ChargeupTime;                                              // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               WhenChargingWaitForCallToFire;                             // 0x06B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               DeactivateChargeupOnFiring;                                // 0x06B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NZ23[0x6];                                     // 0x06BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    BeamStoppedFiringEvent;                                    // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class AActor>                       BeamTarget;                                                // 0x06D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    ParticleComp;                                              // 0x06D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    ChargeUpComp;                                              // 0x06E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    ImpactComp;                                                // 0x06E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LJC3[0x40];                                    // 0x06F0(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BeamWeaponComponent");
		return ptr;
	}



	void UpdateBeamVisuals();
	void StopFiring();
	void StartFiring();
	void StartCharging();
	void SetTarget(class AActor* Target);
	class AActor* GetTarget();
	class UParticleSystemComponent* GetParticleSystem();
	double GetLastStoppedFiringTime();
	bool GetIsFiring();
	bool GetIsCharging();
	class UParticleSystemComponent* GetImpactParticleSystem();
	class UParticleSystemComponent* GetChargeupParticleSystem();
	struct FVector GetBeamEndLocation();
	void BeamStoppedFiringEvent__DelegateSignature(class UBeamWeaponComponent* BeamComponent);
};

// Class ShooterGame.BeamWeaponController
// 0x0030 (FullSize[0x0108] - InheritedSize[0x00D8])
class UBeamWeaponController : public UActorComponent
{
public:
	TArray<struct FComponentReference>                 BeamWeapons;                                               // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    BeamStoppedFiringEvent;                                    // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BeamsStoppedFiringEvent;                                   // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BeamWeaponController");
		return ptr;
	}



	void StopFiringBeams();
	bool StartChargingBeams();
	bool StartChargingBeam();
	void OnBeamStoppedFiringHandler(class UBeamWeaponComponent* BeamWeaponComp);
	TArray<class UBeamWeaponComponent*> GetBeamWeaponComponents();
	bool FireBeams();
	bool FireBeam();
	void BeamsStoppedFiringEvent__DelegateSignature();
};

// Class ShooterGame.BiomeZoneSettings
// 0x0090 (FullSize[0x0500] - InheritedSize[0x0470])
class ABiomeZoneSettings : public AActor
{
public:
	struct FString                                     BiomeZoneName;                                             // 0x0470(0x0010) (Edit, ZeroConstructor)
	float                                              FinalTemperatureMultiplier;                                // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalTemperatureExponent;                                  // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalTemperatureAddition;                                  // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureMultiplier;                            // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureExponent;                              // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureAddition;                              // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetThreshold;                           // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetMultiplier;                          // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetExponent;                            // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetThreshold;                           // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetMultiplier;                          // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetExponent;                            // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AbsoluteTemperatureOverride;                               // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bPreventCrops : 1;                                         // 0x04B4(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor)
	unsigned char                                      UnknownData_PW9O[0x3];                                     // 0x04B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EggRangeMaximumNumberOverride;                             // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EggMaximumNumberOverride;                                  // 0x04BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EggChanceToSpawnOverride;                                  // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EggIntervalUnstasisChanceToSpawnOverride;                  // 0x04C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              OverrideEggLimitsDinoClasses;                              // 0x04C8(0x0010) (Edit, ZeroConstructor)
	int                                                BiomeZonePriority;                                         // 0x04D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxMultiplier;                                             // 0x04DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay;                                    // 0x04E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight;                                  // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay_Heavy;                              // 0x04F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight_Heavy;                            // 0x04F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BiomeZoneSettings");
		return ptr;
	}



};

// Class ShooterGame.BiomeZoneVolume
// 0x0168 (FullSize[0x0610] - InheritedSize[0x04A8])
class ABiomeZoneVolume : public AVolume
{
public:
	struct FString                                     BiomeZoneName;                                             // 0x04A8(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ShooterGame_EBiomeZone>                BiomeZone;                                                 // 0x04B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z6CM[0x3];                                     // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FinalTemperatureMultiplier;                                // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalTemperatureExponent;                                  // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalTemperatureAddition;                                  // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureMultiplier;                            // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureExponent;                              // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetTemperatureAddition;                              // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetThreshold;                           // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetMultiplier;                          // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveTemperatureOffsetExponent;                            // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetThreshold;                           // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetMultiplier;                          // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowTemperatureOffsetExponent;                            // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AbsoluteTemperatureOverride;                               // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AbsoluteMaxTemperature;                                    // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AbsoluteMinTemperature;                                    // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bPreventCrops : 1;                                         // 0x04F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor)
	unsigned char                                      bIsOutside : 1;                                            // 0x04F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRemoveBuffWhenLeavingVolume : 1;                          // 0x04F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PQS1[0x3];                                     // 0x04F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EggRangeMaximumNumberOverride;                             // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EggMaximumNumberOverride;                                  // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EggChanceToSpawnOverride;                                  // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EggIntervalUnstasisChanceToSpawnOverride;                  // 0x0508(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U639[0x4];                                     // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              OverrideEggLimitsDinoClasses;                              // 0x0510(0x0010) (Edit, ZeroConstructor)
	int                                                BiomeZonePriority;                                         // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxMultiplier;                                             // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AbsoluteWindOverride;                                      // 0x0528(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetWindMultiplier;                                   // 0x052C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetWindExponent;                                     // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              PreOffsetWindAddition;                                     // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveWindOffsetThreshold;                                  // 0x0538(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveWindOffsetMultiplier;                                 // 0x053C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AboveWindOffsetExponent;                                   // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowWindOffsetThreshold;                                  // 0x0544(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowWindOffsetMultiplier;                                 // 0x0548(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BelowWindOffsetExponent;                                   // 0x054C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalWindMultiplier;                                       // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalWindExponent;                                         // 0x0554(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FinalWindAddition;                                         // 0x0558(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_5XME[0x4];                                     // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      BiomeCustomDatas;                                          // 0x0560(0x0010) (Edit, ZeroConstructor)
	float                                              StatusAdjustmentRateMultipliersPositive[0xC];              // 0x0570(0x0030) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StatusAdjustmentRateMultipliersNegative[0xC];              // 0x05A0(0x0030) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlyApplyAdjustmentRateValuesOutdoors;                    // 0x05D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bStatusAdjustRateValues;                                   // 0x05D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableDayTransitionSounds;                               // 0x05D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PF29[0x5];                                     // 0x05D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BuffToGive;                                                // 0x05D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffToPreventActiveUse;                                    // 0x05E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay;                                    // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay_Heavy;                              // 0x05F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight;                                  // 0x05F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight_Heavy;                            // 0x0600(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ForceMusicInBiome;                                         // 0x0608(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BiomeZoneVolume");
		return ptr;
	}



	void OnEndOverlap(class AActor* Actor);
	void OnBeginOverlap(class AActor* Actor);
	bool STATIC_IsPointUnderwater(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, float MinimumWaterHeight, bool bIgnoreVacuumStructures, bool bIgnorePainCausingVolumes);
	bool STATIC_IsPointInVacuumBase(class UWorld* ForWorld, const struct FVector& AtPoint);
	class APhysicsVolume* STATIC_GetPhysicsVolumeAtLocation(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath);
	class ABiomeZoneVolume* STATIC_GetBiomeZoneVolume(class UWorld* World, const struct FVector& Location);
	void STATIC_GetAllBiomeZones(class UWorld* World, TArray<class ABiomeZoneVolume*>* BiomeZones);
};

// Class ShooterGame.BiomeZoneVolumeEffectUtility
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBiomeZoneVolumeEffectUtility : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BiomeZoneVolumeEffectUtility");
		return ptr;
	}



	void STATIC_SpawnRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* AttachTo, const struct FVector& Location, bool bIsImpactActor);
	class AActor* STATIC_SpawnImpactEffect(class UWorld* World, const struct FHitResult& HitResult, const struct FBiomeZoneImpactEffect& ImpactEffect, class AActor* Owner);
	struct FBiomeZoneVolumeEffect STATIC_GetRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* SourceActor, const struct FVector& ForLocation, bool bIsImpactActor);
};

// Class ShooterGame.BTService_FindTarget
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UBTService_FindTarget : public UBTService_BlackboardBase
{
public:
	bool                                               bDontSet;                                                  // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BZDJ[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BTService_FindTarget");
		return ptr;
	}



};

// Class ShooterGame.BTService_UpdateAggro
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class UBTService_UpdateAggro : public UBTService
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BTService_UpdateAggro");
		return ptr;
	}



};

// Class ShooterGame.BTTask_AttackTarget
// 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
class UBTTask_AttackTarget : public UBTTaskNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BTTask_AttackTarget");
		return ptr;
	}



};

// Class ShooterGame.BTTask_GetRandomWanderDestination
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UBTTask_GetRandomWanderDestination : public UBTTask_BlackboardBase
{
public:
	struct FVector                                     locOverride;                                               // 0x0080(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              randomOffsetMultiplier;                                    // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseRandomNegativeXDir;                                    // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOrientRandOffsetByRotation;                               // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M1BF[0x2];                                     // 0x0092(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    orientRandOffsetByRotation;                                // 0x0094(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BTTask_GetRandomWanderDestination");
		return ptr;
	}



};

// Class ShooterGame.TerrainGenerator
// 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
class UTerrainGenerator : public UObject
{
public:
	unsigned char                                      UnknownData_TZL4[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UFloatMap*>                           TemporaryMaps;                                             // 0x0030(0x0010) (ZeroConstructor, Transient)
	int                                                MapSizeX;                                                  // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                MapSizeY;                                                  // 0x0044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                MapSeed;                                                   // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   MapOffset;                                                 // 0x004C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              LandscapeRadius;                                           // 0x0054(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                SectionsPerComponent;                                      // 0x0058(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                QuadsPerSection;                                           // 0x005C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                ComponentsCountX;                                          // 0x0060(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ComponentsCountY;                                          // 0x0064(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion1Start;                                         // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion1End;                                           // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion2Start;                                         // 0x0078(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion2End;                                           // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion3Start;                                         // 0x0088(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NorthRegion3End;                                           // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion1Start;                                         // 0x0098(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion1End;                                           // 0x00A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion2Start;                                         // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion2End;                                           // 0x00B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion3Start;                                         // 0x00B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SouthRegion3End;                                           // 0x00C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion1Start;                                          // 0x00C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion1End;                                            // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion2Start;                                          // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion2End;                                            // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion3Start;                                          // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   EastRegion3End;                                            // 0x00F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion1Start;                                          // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion1End;                                            // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion2Start;                                          // 0x0108(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion2End;                                            // 0x0110(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion3Start;                                          // 0x0118(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WestRegion3End;                                            // 0x0120(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                Version;                                                   // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FB1I[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               GenerationWeigthMapNames;                                  // 0x0130(0x0010) (Edit, ZeroConstructor)
	class UMaterialInterface*                          GenerationMaterial;                                        // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             CachedTerrainMaterialLayerNames;                           // 0x0148(0x0010) (ZeroConstructor)
	TArray<class ULandscapeMaterialInstanceConstant*>  CachedTerrainMaterials;                                    // 0x0158(0x0010) (ZeroConstructor)
	class UTerrainComponent*                           TerrainComponent;                                          // 0x0168(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector                                     BiomeGridSize;                                             // 0x0170(0x000C) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector                                     NPCGridSize;                                               // 0x017C(0x000C) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SupplyZonesGridSize;                                       // 0x0188(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BFIA[0x10];                                    // 0x0190(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TerrainGenerator");
		return ptr;
	}



	class UGeneratorModule* VoroniModule(int Seed, float Frequency, float displacement);
	class UGeneratorModule* TurbulenceModule(class UGeneratorModule* Source, int Seed, float Frequency, float Power, float Roughness);
	class UFloatMap* ToFloatMap(class UFloatMap* Destination, class UGeneratorModule* Module, bool IsTemporary);
	class UGeneratorModule* ThresholdModule(class UGeneratorModule* Source, float Power, float Range, float Threshold);
	class UGeneratorModule* TerraceModule(class UGeneratorModule* Source, TArray<float> Control);
	class UFloatMap* Spread(class UFloatMap** Destination, class UFloatMap* Source, int SpreadIteration, float SpreadStrength);
	class AActor* SpawnActorOnLandscape(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale, const struct FVector& OffsetVector);
	class AActor* SpawnActor(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale);
	class UGeneratorModule* SlopeModule(class UGeneratorModule* Source);
	class UFloatMap* ShrinkMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations);
	class UFloatMap* SetAsTemporary(class UFloatMap* Destination);
	class UGeneratorModule* SelectModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control, float Lower, float Upper, float EdgeFalloff);
	class UFloatMap* ScaleFloatMap(class UFloatMap* Source, float Scale, bool bClearSourceData);
	class UGeneratorModule* ScaleBiasModule(class UGeneratorModule* Source, float Scale, float Bias);
	class UFloatMap* Scale(class UFloatMap* Source, float Scale, bool bClearSourceData);
	class UGeneratorModule* SampleFloatMapModule(class UFloatMap* Source);
	class UGeneratorModule* RidgedMultiModule(int Seed, float Frequency, float OctaveCount, float Lacunarity);
	class UFloatMap* Resize(class UFloatMap* Source, int NewSize, bool bClearSourceData);
	void PreGenerateTerrain();
	class UGeneratorModule* PowerModule(class UGeneratorModule* First, class UGeneratorModule* Second);
	void PostCreateTerrain();
	class UObjectMap* Populate(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int MaximumCount, int Step, bool SingleThread);
	class UGeneratorModule* PointSampleFloatMapModule(class UFloatMap* Source);
	class UFloatMap* Pixelate(class UFloatMap* Source, int CellSize);
	class UGeneratorModule* PerlinModule(int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity);
	class UGeneratorModule* OneMinusModule(class UGeneratorModule* Source);
	class UFloatMap* Normalize(class UFloatMap* Source, class UFloatMap* Destination, float Minimum, float Maximum);
	class UGeneratorModule* MultiplyModule(class UGeneratorModule* First, class UGeneratorModule* Second);
	class UGeneratorModule* MinModule(class UGeneratorModule* First, class UGeneratorModule* Second);
	class UObjectMap* MergeObjectMaps(class UObjectMap* First, class UObjectMap* Second, int CellsToClear);
	class UGeneratorModule* MaxModule(class UGeneratorModule* First, class UGeneratorModule* Second);
	class UGeneratorModule* LinearModule();
	class UGeneratorModule* LinearCurveModule(class UGeneratorModule* First, TArray<float> Input, TArray<float> Output);
	class UGeneratorModule* LerpModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Alpha);
	class UGeneratorModule* InvertModule(class UGeneratorModule* Source);
	struct FVector GetPositionRelativeToTerrian(const struct FVector& Location);
	struct FVector GetLocationOnLandscape(const struct FVector& Position);
	void GenerateTerrain(class UFloatMap** HeightMap, TArray<struct FString>* WeightmapsNames, TArray<class UByteMap*>* WeightMaps, class UObjectMap** ObjectMap, class UObjectMap** BiomeMap, class UObjectMap** NPCMap, class UMaterialInterface** LandscapeMaterial, class UObjectMap** PerComponentMaterialOverride, class UObjectMap** SupplyDropsMap, class UObjectMap** SupplyDropsPointsMap, TArray<struct FBiomeMiniMap>* BiomesMiniMap);
	class UFloatMap* GenerateHeightMapFromMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations);
	void FloodFill(class UFloatMap* Source, float X, float Y, float Value);
	class UObjectMap* FillObjectMap(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int MaximumCount, int Step, bool SingleThread);
	class UGeneratorModule* ExponentModule(class UGeneratorModule* Source, float Exponent);
	class UFloatMap* EvaluateModules(class UFloatMap* Destination, class UGeneratorModule* Module);
	class UFloatMap* Erosion(class UFloatMap* HeightMap, class UFloatMap* Destination, int IterationStep, float SoilCarryCapacity, float WaterEvaporationSpeed, float ErosionSpeed, float DepositionSpeed, float DirectionInertia, float MinimumSlope, float Gravity, float MinHeightForErosion, float DepositionStrength, float ErosionStrength);
	class UFloatMap* EnlargeMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations);
	class UGeneratorModule* DisplaceModule(class UGeneratorModule* Source, class UGeneratorModule* X, class UGeneratorModule* Y, class UGeneratorModule* Z);
	void DeleteTemporaryMaps();
	class UGeneratorModule* CurveModule(class UGeneratorModule* Source, TArray<float> Input, TArray<float> Output);
	void CreateWater(class UClass* WaterPlane, class UClass* WaterFloorPlane, float SurfaceLevel, float FloorLevel);
	class UObjectMap* CreateObjectMapWithSize(int Width, int Height);
	class UObjectMap* CreateObjectMap(int NewSizeX, int NewSizeY);
	class UFloatMap* CreateFloatMap(int SizeX, int SizeY, bool IsTemporary);
	class UFloatMap* Copy(class UFloatMap* Source, class UFloatMap* Destination);
	class UByteMap* ConvertFloatMapToByteMap(class UFloatMap* FloatMap, bool bClearFloatMap);
	class UGeneratorModule* ConstModule(float Value);
	class UGeneratorModule* ClampModule(class UGeneratorModule* Source, float Lower, float Upper);
	class UGeneratorModule* CircularMaskModule(const struct FVector2D& Center, float CircleRadius, float Exp, int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity, float NoiseAmplitude);
	class UFloatMap* Cavity(class UFloatMap** Destination, class UFloatMap* Source, bool Concave, float Intensity, float Threshold, int SpreadIteration, float SpreadStrength);
	class UFloatMap* Blur(class UFloatMap* First, bool bHorizontal, bool bVertical, bool additive, float Intensity);
	class UGeneratorModule* BlendModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control);
	class UGeneratorModule* BillowModule(int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity);
	class UGeneratorModule* AddModule(class UGeneratorModule* First, class UGeneratorModule* Second);
	class UGeneratorModule* AbsModule(class UGeneratorModule* Source);
};

// Class ShooterGame.ByteMap
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UByteMap : public UObject
{
public:
	unsigned char                                      UnknownData_RQQT[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ByteMap");
		return ptr;
	}



	void Init(int InSizeX, int InSizeY);
	int GetSizeY();
	int GetSizeX();
	int GetSize();
	void Delete();
};

// Class ShooterGame.CameraModifier_Climbing
// 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
class UCameraModifier_Climbing : public UCameraModifier
{
public:
	class AShooterWeapon_Climb*                        OwningWeapon;                                              // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CameraModifier_Climbing");
		return ptr;
	}



};

// Class ShooterGame.CharacterViewPanelWidget
// 0x0028 (FullSize[0x0268] - InheritedSize[0x0240])
class UCharacterViewPanelWidget : public UUserWidget
{
public:
	struct FString                                     PreviewWidgetName;                                         // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_7LSY[0x18];                                    // 0x0250(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CharacterViewPanelWidget");
		return ptr;
	}



	void RefreshPreviewWidget();
};

// Class ShooterGame.ContextMenu
// 0x0058 (FullSize[0x0298] - InheritedSize[0x0240])
class UContextMenu : public UUserWidget
{
public:
	struct FScriptDelegate                             OnPopulateMenu;                                            // 0x0240(0x0010) (Edit, ZeroConstructor, InstancedReference, NoDestructor)
	struct FScriptDelegate                             OnPopulateMenuCustom;                                      // 0x0250(0x0010) (Edit, ZeroConstructor, InstancedReference, NoDestructor)
	struct FScriptMulticastDelegate                    OnActiveItemChanged;                                       // 0x0260(0x0010) (Edit, ZeroConstructor, InstancedReference)
	struct FName                                       CustomName;                                                // 0x0270(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4QJ4[0x20];                                    // 0x0278(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenu");
		return ptr;
	}



	void SetActiveItem(class UContextMenuItem* Item);
	void PopulateContextMenuCustom__DelegateSignature(class UContextMenu* ContextMenu, const struct FName& MenuName);
	void PopulateContextMenu__DelegateSignature(class UContextMenu* ContextMenu);
	class UContextMenuItem* GetActiveItem();
	void CloseMenu(bool CloseParents);
	void ActiveMenuItemChanged__DelegateSignature(class UContextMenu* menu, class UContextMenuItem* newItem, class UContextMenuItem* oldItem);
};

// Class ShooterGame.ContextMenuItem
// 0x0100 (FullSize[0x0340] - InheritedSize[0x0240])
class UContextMenuItem : public UUserWidget
{
public:
	struct FScriptDelegate                             OnGetMenuContentEvent;                                     // 0x0240(0x0010) (Edit, ZeroConstructor, InstancedReference, NoDestructor)
	struct FScriptDelegate                             OnGetMenuContentEventCustom;                               // 0x0250(0x0010) (Edit, ZeroConstructor, InstancedReference, NoDestructor)
	struct FScriptMulticastDelegate                    OnExecuteMainAction;                                       // 0x0260(0x0010) (Edit, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnExecuteMainActionCustom;                                 // 0x0270(0x0010) (Edit, ZeroConstructor, InstancedReference)
	struct FName                                       SubmenuMenuAnchorName;                                     // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SubmenuIndicatorName;                                      // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShortcutKeyWidgetName;                                     // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SwitchName;                                                // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SwitchContainerName;                                       // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EUContextMenuItemSwitchMode> SwitchType;                                                // 0x02A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               IsSwitchedOn;                                              // 0x02A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C5EE[0x2];                                     // 0x02AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       CustomName;                                                // 0x02AC(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ETAB[0x8C];                                    // 0x02B4(0x008C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenuItem");
		return ptr;
	}



	void SetSubmenuEnabled(bool bEnabled);
	void SetShortcutKey(int ComboKeyIdx, const struct FKey& Key);
	void SetJustification(TEnumAsByte<Slate_ETextJustify> Value);
	void SetCaption(const struct FText& caption);
	class UWidget* OnGetContextMenuContent();
	void OnButtonClickedEventObjectCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, const struct FName& SelectedOption);
	void OnButtonClickedEventObject__DelegateSignature(class UContextMenuItem* ContextMenuItem);
	void OnButtonClicked();
	void OnActiveMenuItemChanged(class UContextMenu* ContextMenu, class UContextMenuItem* NewActiveItem, class UContextMenuItem* OldActiveItem);
	bool GetSubmenuEnabled();
	class UContextMenu* GetSubmenuContentCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, const struct FName& SelectedOption);
	class UContextMenu* GetSubmenuContent__DelegateSignature(class UContextMenuItem* ContextMenuItem);
	TEnumAsByte<Slate_ETextJustify> GetJustification();
	struct FText GetCaption();
};

// Class ShooterGame.ContextMenu_DinoGroupEntry
// 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
class UContextMenu_DinoGroupEntry : public UContextMenu
{
public:
	class UClass*                                      ItemClass_SimpleButton;                                    // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ItemClass_SimpleCaption;                                   // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ItemClass_Spinner;                                         // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SubmenuClass;                                              // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenu_DinoGroupEntry");
		return ptr;
	}



	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void HandleActionSetGroup(class UContextMenuItem* Item);
	void HandleActionRemoveDino(class UContextMenuItem* Item);
	void HandleActionRemoveClass(class UContextMenuItem* Item);
};

// Class ShooterGame.ContextMenu_InventorySort
// 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
class UContextMenu_InventorySort : public UContextMenu
{
public:
	class UClass*                                      ItemClass_SortButton;                                      // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenu_InventorySort");
		return ptr;
	}



	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void HandleActionWeight(class UContextMenuItem* Item);
	void HandleActionUnsort(class UContextMenuItem* Item);
	void HandleActionSpoilTimer(class UContextMenuItem* Item);
	void HandleActionAlphabetical(class UContextMenuItem* Item);
};

// Class ShooterGame.ContextMenu_PrimalItem
// 0x0030 (FullSize[0x02C8] - InheritedSize[0x0298])
class UContextMenu_PrimalItem : public UContextMenu
{
public:
	class UClass*                                      ItemClass_SimpleButton;                                    // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ItemClass_SimpleCaption;                                   // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ItemClass_Spinner;                                         // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SubmenuClass;                                              // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SplitAmountValue;                                          // 0x02B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                SplitAmountMax;                                            // 0x02BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                CraftAmountValue;                                          // 0x02C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                CraftAmountMax;                                            // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenu_PrimalItem");
		return ptr;
	}



	void PopulateSubmenuSplitStack(class UContextMenu* ContextMenu);
	void PopulateSubmenuSplitAmount(class UContextMenu* ContextMenu);
	void PopulateSubmenuRemove(class UContextMenu* ContextMenu);
	void PopulateSubmenuCustom(class UContextMenu* ContextMenu, const struct FName& ContextItemName);
	void PopulateSubmenuCraftAmount(class UContextMenu* ContextMenu);
	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void PopulateFolderMenu(class UContextMenu* ContextMenu);
	void PopulateCraftMenu(class UContextMenu* ContextMenu);
	void HandleSplitAmountValueCommit(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	class UContextMenu* HandleOnGetSubmenuSplitStackContent(class UContextMenuItem* MenuItem);
	class UContextMenu* HandleOnGetSubmenuSplitAmountContent(class UContextMenuItem* MenuItem);
	class UContextMenu* HandleOnGetSubmenuRemoveContent(class UContextMenuItem* MenuItem);
	class UContextMenu* HandleOnGetSubmenuCustomContent(class UContextMenuItem* MenuItem, const struct FName& ContextItemName);
	class UContextMenu* HandleOnGetSubmenuCraftContent(class UContextMenuItem* MenuItem);
	class UContextMenu* HandleOnGetSubmenuCraftAmountContent(class UContextMenuItem* MenuItem);
	void HandleCraftAmountValueCommit(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void HandleActionUse(class UContextMenuItem* Item);
	void HandleActionUnequip(class UContextMenuItem* Item);
	void HandleActionTransfer(class UContextMenuItem* Item);
	void HandleActionSplitOne(class UContextMenuItem* Item);
	void HandleActionSplitHalf(class UContextMenuItem* Item);
	void HandleActionSplitAmount(class UContextMenuItem* Item);
	void HandleActionSplitAll(class UContextMenuItem* Item);
	void HandleActionRepair(class UContextMenuItem* Item);
	void HandleActionRenameFolder(class UContextMenuItem* Item);
	void HandleActionRemoveSkin(class UContextMenuItem* Item);
	void HandleActionRemoveAmmo(class UContextMenuItem* Item);
	void HandleActionRemoveAccessory(class UContextMenuItem* Item);
	void HandleActionFavorite(class UContextMenuItem* Item);
	void HandleActionEquipAllInFolder(class UContextMenuItem* Item);
	void HandleActionEquip(class UContextMenuItem* Item);
	void HandleActionDiscard(class UContextMenuItem* Item);
	void HandleActionDeleteFolder(class UContextMenuItem* Item);
	void HandleActionCustom(class UContextMenuItem* Item, const struct FName& ContextItemName);
	void HandleActionCraftOne(class UContextMenuItem* Item);
	void HandleActionCraftAmount(class UContextMenuItem* Item);
	void HandleActionCraftAll(class UContextMenuItem* Item);
};

// Class ShooterGame.ContextMenuItem_Sort
// 0x0018 (FullSize[0x0358] - InheritedSize[0x0340])
class UContextMenuItem_Sort : public UContextMenuItem
{
public:
	struct FName                                       SorDirSwitcherName;                                        // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1TIO[0x10];                                    // 0x0348(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenuItem_Sort");
		return ptr;
	}



};

// Class ShooterGame.ContextMenuItem_Spinner
// 0x0038 (FullSize[0x0378] - InheritedSize[0x0340])
class UContextMenuItem_Spinner : public UContextMenuItem
{
public:
	struct FScriptMulticastDelegate                    OnValueCommitted;                                          // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_LGBN[0x4];                                     // 0x0350(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinValue;                                                  // 0x0354(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	int                                                MaxValue;                                                  // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_25ZQ[0x1C];                                    // 0x035C(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ContextMenuItem_Spinner");
		return ptr;
	}



	void SetValue(int newValue);
	void SetMinValue(int newValue);
	void SetMaxValue(int newValue);
	void OnSpinnerValueCommitedEvent__DelegateSignature(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void HandleOnTextCommited(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void HandleOnTextChanged(const struct FText& Text);
	void HandleOnButtonIncreaseClicked();
	void HandleOnButtonDecreaseClicked();
	int GetValue();
	int GetMinValue();
	int GetMaxValue();
};

// Class ShooterGame.CustomActorList
// 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
class ACustomActorList : public AInfo
{
public:
	TArray<class AActor*>                              ActorList;                                                 // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CustomActorList");
		return ptr;
	}



	void DestroyActors();
};

// Class ShooterGame.PointOfInterestManagerList
// 0x0008 (FullSize[0x0488] - InheritedSize[0x0480])
class APointOfInterestManagerList : public ACustomActorList
{
public:
	unsigned char                                      bRefreshPointsArray : 1;                                   // 0x0480(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, NoDestructor, Protected)
	unsigned char                                      UnknownData_3CM4[0x7];                                     // 0x0481(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PointOfInterestManagerList");
		return ptr;
	}



	void ScanForAllValidPointsOfInterest();
	void ReConstructPointsInList();
	void PopulatePointsActorList();
	bool ManualAddPointOfInterestActor(class AActor* AddActor);
	bool CheckListForTagCollisions(class AActor* ForSpecificActor);
};

// Class ShooterGame.CustomButtonWidget
// 0x0058 (FullSize[0x04E8] - InheritedSize[0x0490])
class UCustomButtonWidget : public UButton
{
public:
	struct FCustomButtonWidgetStyle                    ExtendedWidgetStyle;                                       // 0x0490(0x0048) (Edit, BlueprintVisible)
	bool                                               IsToggleButton;                                            // 0x04D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               IsToggledOn;                                               // 0x04D9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J2HA[0xE];                                     // 0x04DA(0x000E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CustomButtonWidget");
		return ptr;
	}



	void SetToggledState(bool IsToggled);
	void SetIsToggleButton(bool IsToggle);
	bool GetToggledState();
	bool GetIsToggleButton();
};

// Class ShooterGame.DraggableObjectInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDraggableObjectInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DraggableObjectInterface");
		return ptr;
	}



};

// Class ShooterGame.CustomCanvasWidget
// 0x0050 (FullSize[0x04E0] - InheritedSize[0x0490])
class UCustomCanvasWidget : public UButton
{
public:
	unsigned char                                      UnknownData_8X50[0x8];                                     // 0x0490(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bOverrideScreenCanvasProjection;                           // 0x0498(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreParentAlpha;                                        // 0x0499(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9HNN[0x6];                                     // 0x049A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnDraggedObject;                                           // 0x04A0(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData_VYEO[0x30];                                    // 0x04B0(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CustomCanvasWidget");
		return ptr;
	}



	void OnDraggedClickedEventObject__DelegateSignature(class UWidget* draggeddWidget);
};

// Class ShooterGame.DataListEntryButton
// 0x0118 (FullSize[0x05F8] - InheritedSize[0x04E0])
class UDataListEntryButton : public UCustomCanvasWidget
{
public:
	unsigned char                                      UnknownData_1HOK[0x8];                                     // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DisplayString;                                             // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     AdditionalDisplayString;                                   // 0x04F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ContextMenuAnchorName;                                     // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemIcon;                                                  // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                ForegroundColor;                                           // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseSelectedBackgroundColor;                               // 0x0528(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_24NV[0x3];                                     // 0x0529(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                SelectedBackgroundColor;                                   // 0x052C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_526A[0x4];                                     // 0x053C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  AltHighlightBGTexture;                                     // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NameOffset;                                                // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bClickable;                                                // 0x054C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEnabled;                                                  // 0x054D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseDisplayString;                                         // 0x054E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LNUX[0x1];                                     // 0x054F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                DisplayStringColor;                                        // 0x0550(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   DisplayStringOffset;                                       // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TextDisplayStringSize;                                     // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   DisplayStringScale;                                        // 0x056C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisplayStringCenterX;                                     // 0x0574(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisplayStringCenterY;                                     // 0x0575(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bSetIndexPlusOneToDisplayString;                           // 0x0576(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowClickingWhenNoEntry;                                 // 0x0577(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFont*                                       DisplayStringFont;                                         // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SelectedIcon;                                              // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DisabledColor;                                             // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TintColorOverride;                                         // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDataListAutomaticallyOverrideText : 1;                    // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDataListAutomaticallyOverrideEnabled : 1;                 // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWrapText : 1;                                             // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseDataProviderCustomColor : 1;                           // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideTintColor : 1;                                    // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowDisplayStringWhenHasItem : 1;                         // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCustomTextColor : 1;                                   // 0x05A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSelected : 1;                                             // 0x05A8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceDraggingDisabled : 1;                                // 0x05A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDraggable : 1;                                            // 0x05A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_R4WB : 2;                                      // 0x05A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowExtraIcon : 1;                                       // 0x05A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bToggleButton : 1;                                         // 0x05A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_TSG6[0x16];                                    // 0x05AA(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  OverrideDisabledIcon;                                      // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WrappedTextSpacingAdjust;                                  // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4O1M[0x18];                                    // 0x05D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInstanceDynamic*                    MyIconMat;                                                 // 0x05E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UMenuAnchor*                                 ContextMenuAnchor;                                         // 0x05F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton");
		return ptr;
	}



	class UWidget* OnGetContextMenuContent();
	void ClickedSecondaryButton(class UWidget* clickedWidget);
	void ClickedButton(class UWidget* clickedWidget);
};

// Class ShooterGame.AdminPlayerInfoEntryButton
// 0x0050 (FullSize[0x0648] - InheritedSize[0x05F8])
class UAdminPlayerInfoEntryButton : public UDataListEntryButton
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x05F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_JVA4[0x7];                                     // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerName;                                                // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     SteamPlayerName;                                           // 0x0610(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     LinkedPlayerID;                                            // 0x0620(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0630(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1TJV[0x3];                                     // 0x0631(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0634(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YCCP[0x4];                                     // 0x0644(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AdminPlayerInfoEntryButton");
		return ptr;
	}



};

// Class ShooterGame.AllPaintingsEntryButton
// 0x0030 (FullSize[0x0628] - InheritedSize[0x05F8])
class UAllPaintingsEntryButton : public UDataListEntryButton
{
public:
	struct FString                                     FileName;                                                  // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     FilePath;                                                  // 0x0608(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0618(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AllPaintingsEntryButton");
		return ptr;
	}



};

// Class ShooterGame.AllPlayersEntryButton
// 0x0048 (FullSize[0x0640] - InheritedSize[0x05F8])
class UAllPlayersEntryButton : public UDataListEntryButton
{
public:
	struct FString                                     PlayerName;                                                // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     TribeName;                                                 // 0x0608(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	uint64_t                                           PlayerId;                                                  // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           TargetingTeamID;                                           // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AShooterCharacter*                           CurrentCharachter;                                         // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0630(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.AllPlayersEntryButton");
		return ptr;
	}



};

// Class ShooterGame.CheatFunctionInfoEntryButton
// 0x0030 (FullSize[0x0628] - InheritedSize[0x05F8])
class UCheatFunctionInfoEntryButton : public UDataListEntryButton
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x05F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_Y49F[0x7];                                     // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     FunctionName;                                              // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0610(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JKM5[0x3];                                     // 0x0611(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0614(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FolderNameTextClipOffset;                                  // 0x0624(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CheatFunctionInfoEntryButton");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_CustomOverlay
// 0x0090 (FullSize[0x0688] - InheritedSize[0x05F8])
class UDataListEntryButton_CustomOverlay : public UDataListEntryButton
{
public:
	struct FSlateBrush                                 CustomOverlayImage;                                        // 0x05F8(0x0078) (Edit, DisableEditOnInstance)
	class UMaterialInterface*                          Material;                                                  // 0x0670(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCustomOverlayEnabled : 1;                                 // 0x0678(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_CDMJ[0x3];                                     // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   CustomOverlayScale;                                        // 0x067C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BOHK[0x4];                                     // 0x0684(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_CustomOverlay");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_PrimalFolder
// 0x00A0 (FullSize[0x0698] - InheritedSize[0x05F8])
class UDataListEntryButton_PrimalFolder : public UDataListEntryButton
{
public:
	struct FVector2D                                   ItemNameSpacing;                                           // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsItemSlotButton : 1;                                     // 0x0600(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSimpleIconOnly : 1;                                       // 0x0600(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_5SHH[0x3];                                     // 0x0601(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TextScaleMultiplier;                                       // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseNewRenderingPath;                                      // 0x0608(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WLH1[0x3];                                     // 0x0609(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TextLabelName;                                             // 0x060C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8GSV[0x4];                                     // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPrimalFolderIcons                          IconsNormal;                                               // 0x0618(0x0020) (Edit, DisableEditOnInstance)
	struct FPrimalFolderIcons                          IconsSelected;                                             // 0x0638(0x0020) (Edit, DisableEditOnInstance)
	struct FString                                     FolderName;                                                // 0x0658(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              FolderNameTextClipOffset;                                  // 0x0668(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FolderNameTextFontScale;                                   // 0x066C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  FolderIcon;                                                // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EFolderWidgetType>         FolderType;                                                // 0x0678(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8YSH[0x3];                                     // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      FontColor;                                                 // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      FolderLevel;                                               // 0x0680(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WSGW[0x7];                                     // 0x0681(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDataListPanel*                              ParentPanel;                                               // 0x0688(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WCU2[0x8];                                     // 0x0690(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_PrimalFolder");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_PrimalItem
// 0x0568 (FullSize[0x0B60] - InheritedSize[0x05F8])
class UDataListEntryButton_PrimalItem : public UDataListEntryButton
{
public:
	struct FVector2D                                   DesiredSize;                                               // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      MiscInfoStringColor;                                       // 0x0600(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      ItemNameColor;                                             // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      ItemCategoryColor;                                         // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CTNQ[0x4];                                     // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FButtonStyle                                WidgetStyleWhenBroken;                                     // 0x0610(0x0248) (Edit, BlueprintVisible)
	struct FDataListEntryButtonBorderColors            NormalBorderColors;                                        // 0x0858(0x0010) (Edit, DisableEditOnInstance)
	struct FDataListEntryButtonBorderColors            BrokenBorderColors;                                        // 0x0868(0x0010) (Edit, DisableEditOnInstance)
	float                                              DurabilityBarBorderThickness;                              // 0x0878(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityBarThickness;                                    // 0x087C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      DurabilityBarFgColor;                                      // 0x0880(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      DurabilityBarBgColor;                                      // 0x0884(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      SpoilingBarFgColor;                                        // 0x0888(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      SpoilingBarBgColor;                                        // 0x088C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FSlateBrush                                 WidgetSelectedStyleBrush;                                  // 0x0890(0x0078) (Edit, BlueprintVisible)
	struct FSlateBrush                                 WidgetActiveStyleBrush;                                    // 0x0908(0x0078) (Edit, BlueprintVisible)
	struct FSlateBrush                                 WidgetBrokenOverlayStyleBrush;                             // 0x0980(0x0078) (Edit, BlueprintVisible)
	struct FColor                                      UnselectedTintColor;                                       // 0x09F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintEngramRequirementsMet;                                 // 0x09FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintEngramRequirementsUnmet;                               // 0x0A00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintBlueprintRequirementsMet;                              // 0x0A04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintBlueprintRequirementsUnmet;                            // 0x0A08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintTekBlueprintRequirementsMet;                           // 0x0A0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintTekBlueprintRequirementsUnmet;                         // 0x0A10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      TintCompatibleWithDraggedItem;                             // 0x0A14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      CraftRepairIconTint;                                       // 0x0A18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                     BorderSizePx;                                              // 0x0A1C(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_OEJQ[0x4];                                     // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  EngramBg;                                                  // 0x0A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BlueprintBg;                                               // 0x0A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TekgramBg;                                                 // 0x0A40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemQualityOverlay;                                        // 0x0A48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SlottedIcon;                                               // 0x0A50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ActiveSlotIcon;                                            // 0x0A58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  CraftingIcon;                                              // 0x0A60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  RepairingIcon;                                             // 0x0A68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BrokenIcon;                                                // 0x0A70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   QuantityTxtPosition;                                       // 0x0A78(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   AmmoTxtPosition;                                           // 0x0A80(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   WeightTxtPosition;                                         // 0x0A88(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NameTxtPositionPercent;                                    // 0x0A90(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   NameTxtBoxSizePercent;                                     // 0x0A98(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   CategoryTxtPosition;                                       // 0x0AA0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   ItemNameSpacing;                                           // 0x0AA8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                UseItemCraftQueueIndex;                                    // 0x0AB0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseRemoteCraftQueue : 1;                                  // 0x0AB4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsItemSlotButton : 1;                                     // 0x0AB4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_92DM[0x3];                                     // 0x0AB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TextScaleMultiplier;                                       // 0x0AB8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextArmorDamageSize;                                       // 0x0ABC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextQuantitySize;                                          // 0x0AC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextAmmoSize;                                              // 0x0AC4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextWeightSize;                                            // 0x0AC8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextNameSize;                                              // 0x0ACC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextCategorySize;                                          // 0x0AD0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               EnableTextShadow;                                          // 0x0AD4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               EnableTextGlow;                                            // 0x0AD5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2N68[0x2];                                     // 0x0AD6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                TextGlowColor;                                             // 0x0AD8(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   TextGlowInnerRadius;                                       // 0x0AE8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   TextGlowOuterRadius;                                       // 0x0AF0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFont*                                       DetailTextFont;                                            // 0x0AF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ItemIconScale;                                             // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JMRD[0x5C];                                    // 0x0B04(0x005C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_PrimalItem");
		return ptr;
	}



	void HandleOnContextMenuIsOpenChanged(bool bIsOpen);
};

// Class ShooterGame.HostSessionEntryButton
// 0x0058 (FullSize[0x0650] - InheritedSize[0x05F8])
class UHostSessionEntryButton : public UDataListEntryButton
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x05F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsProcedural : 1;                                         // 0x05F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_N23W[0x7];                                     // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DisplayName;                                               // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0610(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0UHV[0x7];                                     // 0x0611(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MapName;                                                   // 0x0618(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModName;                                                   // 0x0628(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModPath;                                                   // 0x0638(0x0010) (ZeroConstructor, Transient)
	uint64_t                                           ModItemId;                                                 // 0x0648(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HostSessionEntryButton");
		return ptr;
	}



};

// Class ShooterGame.OnlineSessionEntryButton
// 0x0198 (FullSize[0x0790] - InheritedSize[0x05F8])
class UOnlineSessionEntryButton : public UDataListEntryButton
{
public:
	struct FString                                     GameName;                                                  // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     BuildId;                                                   // 0x0608(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     OwnerName;                                                 // 0x0618(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MapName;                                                   // 0x0628(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DayTimeStr;                                                // 0x0638(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	uint32_t                                           NumPlayers;                                                // 0x0648(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint32_t                                           MaxNumPlayers;                                             // 0x064C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           ModId;                                                     // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           TotalConversionId;                                         // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           Ping;                                                      // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHasPassword;                                              // 0x0668(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsFavourite;                                              // 0x0669(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsPVEServer;                                              // 0x066A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3R1P[0x5];                                     // 0x066B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  PasswordTexture;                                           // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsOfficialServer;                                         // 0x0678(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUsingBattleEye;                                           // 0x0679(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowDownloadCharacters;                                  // 0x067A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowDownloadItems;                                       // 0x067B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_478T[0x4];                                     // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  BattleEyeTexture;                                          // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OfficialServerTexture;                                     // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PVPServerTexture;                                          // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PVEServerTexture;                                          // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x06A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S8BU[0xE0];                                    // 0x06B0(0x00E0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.OnlineSessionEntryButton");
		return ptr;
	}



};

// Class ShooterGame.ServerInfoInfoEntryButton
// 0x0048 (FullSize[0x0640] - InheritedSize[0x05F8])
class UServerInfoInfoEntryButton : public UDataListEntryButton
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x05F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_R17U[0x7];                                     // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     InfoName;                                                  // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     InfoValue;                                                 // 0x0610(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0620(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KPFZ[0x3];                                     // 0x0621(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0624(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TextClipOffset;                                            // 0x0634(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FolderNameTextFontScale;                                   // 0x0638(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NYT4[0x4];                                     // 0x063C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ServerInfoInfoEntryButton");
		return ptr;
	}



};

// Class ShooterGame.DraggedDecoratorWidget
// 0x0018 (FullSize[0x04F8] - InheritedSize[0x04E0])
class UDraggedDecoratorWidget : public UCustomCanvasWidget
{
public:
	unsigned char                                      UnknownData_1MB5[0x18];                                    // 0x04E0(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DraggedDecoratorWidget");
		return ptr;
	}



};

// Class ShooterGame.HUDOVerlayWidget
// 0x0050 (FullSize[0x0530] - InheritedSize[0x04E0])
class UHUDOVerlayWidget : public UCustomCanvasWidget
{
public:
	float                                              NotificationsYOffset;                                      // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsUnderlay;                                               // 0x04E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z9K9[0x4B];                                    // 0x04E5(0x004B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDOVerlayWidget");
		return ptr;
	}



};

// Class ShooterGame.ProgressBarWidget
// 0x00F8 (FullSize[0x05D8] - InheritedSize[0x04E0])
class UProgressBarWidget : public UCustomCanvasWidget
{
public:
	class UTexture2D*                                  ProgressBarBackground;                                     // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ProgressBarForeground;                                     // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CurrentPercent;                                            // 0x04F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BarForegroundColor;                                        // 0x04F4(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PercentInterpolationSpeed;                                 // 0x0504(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BarFlashColor;                                             // 0x0508(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BarFlashColorBackground;                                   // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BarFlashSpeed;                                             // 0x0528(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BarFlashThreshold;                                         // 0x052C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BarFlashDuration;                                          // 0x0530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1DVB[0x4];                                     // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DisplayString;                                             // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                DisplayStringColor;                                        // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFont*                                       DisplayStringFont;                                         // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   DisplayStringOffset;                                       // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   DisplayStringScale;                                        // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisplayStringCenterX : 1;                                 // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayStringCenterY : 1;                                 // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPrintNumbersInDisplayString : 1;                          // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysDrawDisplayString : 1;                              // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayStringNumbersUseFloats : 1;                        // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBarFlashThresholdAbsolute : 1;                            // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoBarFlashOnDecrease : 1;                                 // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoBarFlashOnIncrease : 1;                                 // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInterpolatePercent : 1;                                   // 0x0571(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseDisplayString : 1;                                     // 0x0571(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseLinkedCharacterStatus : 1;                             // 0x0571(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOutlineDropShadow : 1;                                 // 0x0571(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> LinkedCharacterStatusValueType;                            // 0x0572(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CB4F[0x1];                                     // 0x0573(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                BarBackgroundColor;                                        // 0x0574(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_22YG[0x54];                                    // 0x0584(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ProgressBarWidget");
		return ptr;
	}



};

// Class ShooterGame.SpawnMapWidget
// 0x0068 (FullSize[0x0548] - InheritedSize[0x04E0])
class USpawnMapWidget : public UCustomCanvasWidget
{
public:
	class UMaterialInstance*                           MI;                                                        // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableMapDrawing;                                        // 0x04E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableMarkersAndSpawnPoints;                             // 0x04E9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5USF[0x2];                                     // 0x04EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       FogOfWarTextureParameterName;                              // 0x04EC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeToUpdateTooltipForEachSpawnPoint;                      // 0x04F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SpawnPointAreaToMapAreaPercentage;                         // 0x04F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_THO5[0x4];                                     // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SpawnPointUITemplate;                                      // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    Map_DynamicMI;                                             // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          RegionMarkerMI;                                            // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   RegionMarkerSize;                                          // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4D7O[0x20];                                    // 0x0520(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UUI_Spawn*                                   SpawnUI;                                                   // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SpawnMapWidget");
		return ptr;
	}



};

// Class ShooterGame.StoreItemWidget
// 0x00C0 (FullSize[0x05A0] - InheritedSize[0x04E0])
class UStoreItemWidget : public UCustomCanvasWidget
{
public:
	float                                              ItemPrice;                                                 // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KHGE[0x4];                                     // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ItemName;                                                  // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FSlateBrush                                 ItemIcon;                                                  // 0x04F8(0x0078) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 ForegroundColor;                                           // 0x0570(0x0028) (Edit, DisableEditOnInstance)
	float                                              PriceOffset;                                               // 0x0598(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NameOffset;                                                // 0x059C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StoreItemWidget");
		return ptr;
	}



};

// Class ShooterGame.UI_PreviewWidget
// 0x0198 (FullSize[0x0678] - InheritedSize[0x04E0])
class UUI_PreviewWidget : public UCustomCanvasWidget
{
public:
	unsigned char                                      UnknownData_V7F2[0x8];                                     // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOV;                                                       // 0x04E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F6L9[0x4];                                     // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UTextureRenderTarget2D*>              RenderTargets;                                             // 0x04F0(0x0010) (Edit, ZeroConstructor)
	struct FVector                                     MeshScale;                                                 // 0x0500(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    MeshRotation;                                              // 0x050C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CameraPivotOffset;                                         // 0x0518(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   PanExtents;                                                // 0x0524(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PanSpeed;                                                  // 0x052C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PanBrakeSpeed;                                             // 0x0530(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CameraDistance;                                            // 0x0534(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaximumZoomMultiplier;                                     // 0x0538(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinimumZoomMultiplier;                                     // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DefaultZoomMultiplier;                                     // 0x0540(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bLimitPivotOffset;                                         // 0x0544(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AYVU[0x3];                                     // 0x0545(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxLimitPivotOffset;                                       // 0x0548(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BrakeSpeed;                                                // 0x054C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ZoomInterpSpeed;                                           // 0x0550(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WheelDeltaMultiplier;                                      // 0x0554(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RotationSpeed;                                             // 0x0558(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinPitch;                                                  // 0x055C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxPitch;                                                  // 0x0560(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAutoRotateWidget;                                         // 0x0564(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GFVD[0x3];                                     // 0x0565(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    AutoRotator;                                               // 0x0568(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESkyLightSourceType>            AmbientSourceType;                                         // 0x0574(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1I76[0x3];                                     // 0x0575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                AmbientCubemap;                                            // 0x0578(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      AmbientLightColor;                                         // 0x0580(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientBrightness;                                         // 0x0584(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bSwapInput : 1;                                            // 0x0588(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bChangeDirectionalLightRelativeRotation : 1;               // 0x0588(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4FS9[0x3];                                     // 0x0589(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    DirectionalLightRelativeRotation;                          // 0x058C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DirectionalLightRelativeLocation;                          // 0x0598(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      DirectionalLightColor;                                     // 0x05A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DirectionalLightBrightness;                                // 0x05A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RTQualityMultiplier;                                       // 0x05AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OverrideShadowBias;                                        // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8ACK[0x4];                                     // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTarget2D*                      RenderTarget;                                              // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ZoomMultiplier;                                            // 0x05C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1MN2[0x24];                                    // 0x05C4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      GameWorld;                                                 // 0x05E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              TargetZoomMultiplier;                                      // 0x05F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_CRW5[0x4];                                     // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USceneComponent*>                     PreviewComponents;                                         // 0x05F8(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected)
	struct FVector2D                                   RotationVelocity;                                          // 0x0608(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FVector2D                                   PanVelocity;                                               // 0x0610(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FVector2D                                   Pan;                                                       // 0x0618(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMeshComponent*                              PreviewMesh;                                               // 0x0620(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class UWorld*                                      PreviewWorld;                                              // 0x0628(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class USceneCaptureComponent2D*                    CaptureComponent;                                          // 0x0630(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class UDirectionalLightComponent*                  DirctionalLight;                                           // 0x0638(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class USkyLightComponent*                          SkyLight;                                                  // 0x0640(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x0648(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	struct FLinearColor                                PreviewWidgetColorFactor;                                  // 0x0650(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_B9S9[0xC];                                     // 0x0660(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    OrbitRotation;                                             // 0x066C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_PreviewWidget");
		return ptr;
	}



};

// Class ShooterGame.DamageVolumeBase
// 0x0030 (FullSize[0x04D8] - InheritedSize[0x04A8])
class ADamageVolumeBase : public AVolume
{
public:
	float                                              DamageAmount;                                              // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DamageInterval;                                            // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageType;                                                // 0x04B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FDamageNegatingItem>                 DamageNegatingItems;                                       // 0x04B8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_S00D[0x10];                                    // 0x04C8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DamageVolumeBase");
		return ptr;
	}



	void OnEndOverlap(class AActor* Actor);
	void OnBeginOverlap(class AActor* Actor);
};

// Class ShooterGame.DamageVolumeSwamp
// 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
class ADamageVolumeSwamp : public ADamageVolumeBase
{
public:
	unsigned char                                      UnknownData_BQI2[0x8];                                     // 0x04D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DamageVolumeSwamp");
		return ptr;
	}



};

// Class ShooterGame.DatabaseShared
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UDatabaseShared : public UObject
{
public:
	unsigned char                                      bInitialized : 1;                                          // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_IGPI[0x3F];                                    // 0x0029(0x003F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DatabaseShared");
		return ptr;
	}



};

// Class ShooterGame.Database_LoginData
// 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
class UDatabase_LoginData : public UDatabaseShared
{
public:
	unsigned char                                      UnknownData_5VPD[0x10];                                    // 0x0068(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.Database_LoginData");
		return ptr;
	}



};

// Class ShooterGame.Database_LoginData_Redis
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UDatabase_LoginData_Redis : public UDatabase_LoginData
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.Database_LoginData_Redis");
		return ptr;
	}



};

// Class ShooterGame.Database_PubSub_GeneralNotifications
// 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
class UDatabase_PubSub_GeneralNotifications : public UDatabaseShared
{
public:
	unsigned char                                      UnknownData_PIAI[0x10];                                    // 0x0068(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.Database_PubSub_GeneralNotifications");
		return ptr;
	}



};

// Class ShooterGame.Database_PubSub_GeneralNotifications_Redis
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UDatabase_PubSub_GeneralNotifications_Redis : public UDatabase_PubSub_GeneralNotifications
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.Database_PubSub_GeneralNotifications_Redis");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryWidget
// 0x00B0 (FullSize[0x02F0] - InheritedSize[0x0240])
class UDataListEntryWidget : public UUserWidget
{
public:
	struct FName                                       DataListButtonName;                                        // 0x0240(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ExistingButtonExplicitIndexType;                           // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TraditionalButtonName;                                     // 0x024C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TraditionalLabelName;                                      // 0x0254(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G64G[0x4];                                     // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  ButtonBackgroundOverride;                                  // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DisplayStringOverride;                                     // 0x0268(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                PrimalItemButton_UseItemCraftQueueIndex;                   // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      PrimalItemButton_bUseRemoteCraftQueue : 1;                 // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonShowDisplayStringWhenHasItem : 1;           // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonShowDisplayStringWhenHasItemValue : 1;      // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringCenterX : 1;                   // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringCenterXValue : 1;              // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringCenterY : 1;                   // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringCenterYValue : 1;              // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringOffset : 1;                    // 0x027C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_1PVD[0x3];                                     // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   OverrideButtonDisplayStringOffsetValue;                    // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringScale : 1;                     // 0x0288(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideButtonDisplayStringFontSize : 1;                  // 0x0288(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseEngramToolTips : 1;                                    // 0x0288(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_W9LV[0x3];                                     // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverrideButtonDisplayStringFontSizeValue;                  // 0x028C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OverrideButtonDisplayStringScaleValue;                     // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OverrideButtonSelectedIcon;                                // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bBoundToDragging;                                          // 0x02A0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               CanBeHighlightedWhenEmpty;                                 // 0x02A1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IBZL[0x4E];                                    // 0x02A2(0x004E) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryWidget");
		return ptr;
	}



	void OnDraggedClickedEventObject(class UWidget* draggeddWidget);
	void InitializeMeDefaults();
	class UDataListEntryButton* GetDataListButton();
};

// Class ShooterGame.DataListInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataListInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListInterface");
		return ptr;
	}



};

// Class ShooterGame.DataListPanel
// 0x01A8 (FullSize[0x07E8] - InheritedSize[0x0640])
class UDataListPanel : public UScrollBox
{
public:
	class UClass*                                      EntryWidgetTemplate;                                       // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EntryListTemplate;                                         // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NullEntryWidgetTemplate;                                   // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PaddingEntryWidgetTemplate;                                // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FolderWidgetTemplate;                                      // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GenericWidgetTemplate;                                     // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             CustomFolders;                                             // 0x0670(0x0010) (ZeroConstructor, Transient)
	class UTexture2D*                                  FolderIcon;                                                // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      FolderColor;                                               // 0x0688(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YRE3[0x4];                                     // 0x068C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  BackFolderIcon;                                            // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      BackFolderColor;                                           // 0x0698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FVYS[0x4];                                     // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  CustomFolderIcon;                                          // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      CustomFolderColor;                                         // 0x06A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSupportsCustomFolders : 1;                                // 0x06AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowMultiLevelCustomFolders : 1;                         // 0x06AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePaddingTemplate : 1;                                   // 0x06AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseForEngramList : 1;                                     // 0x06AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceRefreshDataListWidgetAdjacents : 1;                  // 0x06AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_DEB6[0x3];                                     // 0x06AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bBringHoveredItemsToTop;                                   // 0x06B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEnableSupportCustomFolders;                               // 0x06B1(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bForceDragging;                                            // 0x06B2(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bForceEntryDisplayString;                                  // 0x06B3(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceEntryClickWhenNoData;                                // 0x06B4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseExistingButtons;                                       // 0x06B5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseExistingButtonExplicitEntryIndexTypeMapping;           // 0x06B6(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bSelectEntriesOnHighlight;                                 // 0x06B7(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MinimalItemCount;                                          // 0x06B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bSupplyAdjacentsToChildren;                                // 0x06BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bCanBeSelectedWhenEmpty;                                   // 0x06BD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G5DR[0x2];                                     // 0x06BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FilledRowsBeforeEnablingScrolling;                         // 0x06C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OAOX[0x4];                                     // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UDataListEntryWidget*>                EntryWidgets;                                              // 0x06C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_NADG[0x70];                                    // 0x06D8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CustomFolderBlueprint;                                     // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bCreateFolders;                                            // 0x0750(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int8_t                                             FolderLevel;                                               // 0x0751(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WMX6[0x6];                                     // 0x0752(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomFolderFilter;                                        // 0x0758(0x0010) (ZeroConstructor, Transient)
	int8_t                                             SortType;                                                  // 0x0768(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3CWH[0x7];                                     // 0x0769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NameFilter;                                                // 0x0770(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_2ILV[0x28];                                    // 0x0780(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MyDataListType;                                            // 0x07A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EIOE[0x4];                                     // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UDataListEntryWidget*>                CurrentCustomFolders;                                      // 0x07B0(0x0010) (ZeroConstructor, Transient)
	class UDataListEntryWidget*                        BackWidget;                                                // 0x07C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KDHM[0x20];                                    // 0x07C8(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListPanel");
		return ptr;
	}



};

// Class ShooterGame.DayCycleAmbientSound
// 0x0030 (FullSize[0x04A0] - InheritedSize[0x0470])
class ADayCycleAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponentDay;                                         // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             AudioComponentNight;                                       // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	float                                              DayTimeSoundMorningFadeInStart;                            // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeSoundMorningFadeInEnd;                              // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeSoundEveningFadeOutStart;                           // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeSoundEveningFadeOutEnd;                             // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsAlwaysAudible : 1;                                      // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowConcurrentWithPostProcessSound : 1;                  // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOnlyAudibleWhenRaining : 1;                               // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBlueprintAudibleWhenRainingEnabled : 1;                   // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_BQBA[0xF];                                     // 0x0491(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DayCycleAmbientSound");
		return ptr;
	}



};

// Class ShooterGame.HUDInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UHUDInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDInterface");
		return ptr;
	}



};

// Class ShooterGame.DayCycleManager
// 0x0138 (FullSize[0x05A8] - InheritedSize[0x0470])
class ADayCycleManager : public AInfo
{
public:
	unsigned char                                      UnknownData_WUE8[0x8];                                     // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CurrentTime;                                               // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              TrueSkyTime;                                               // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GlobalTrueSkyBrightness;                                   // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FVector                                     GlobalTrueSkyColorMultiplier;                              // 0x0484(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GlobalIBLCaptureBrightness;                                // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GlobalBakeAndStreamIBLMultiplier;                          // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GlobalGroundColorMultiplier;                               // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GlobalSkyColorMultiplier;                                  // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SM4SkyLightMult;                                           // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SM4DirLightMult;                                           // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FVector                                     AtmosphericFogMultiplier;                                  // 0x04A8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyIBLIntensityMultiplier;                                 // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BaseTemperature;                                           // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BaseWind;                                                  // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyWeatherSequenceBlend_Normal;                            // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyWeatherSequenceBlend_Hot;                               // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyWeatherSequenceBlend_Cold;                              // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyWeatherSequenceBlend_Rainy;                             // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyWeatherSequenceBlend_Fog;                               // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                               bIsRaining;                                                // 0x04D4(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_02S4[0x3];                                     // 0x04D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  Sound_TransitionToMorning;                                 // 0x04D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransitionToMidDay;                                  // 0x04E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  Sound_TransitionToNight;                                   // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Sound_TransitionToMorningTime;                             // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Sound_TransitionToNightTime;                               // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Sound_TransitionToMidDayTime;                              // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeStart;                                              // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeEnd;                                                // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DayTimeLengthMultiplier;                                   // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CX01[0x8];                                     // 0x0508(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bCheckForStructureActivation;                              // 0x0510(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUsesWind;                                                 // 0x0511(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bCheckForWeaponFiring;                                     // 0x0512(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPOverrideItemAutoDecreaseDurability;                  // 0x0513(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bHideSupplyCrates;                                         // 0x0514(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DM3G[0x3];                                     // 0x0515(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              PreventBuffClassesInDayCycleLevel;                         // 0x0518(0x0010) (Edit, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnStartDaytime;                                            // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartNighttime;                                          // 0x0538(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDayChange;                                               // 0x0548(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHazardChange;                                            // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UClass*>                              GenesisTradableOptions;                                    // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      HexagonVFXActorClass;                                      // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AG6Z[0x8];                                     // 0x0580(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              GivePlayersBuffsOnSpawn;                                   // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FStringAssetReference>               GivePlayersBuffAssetsOnSpawn;                              // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DayCycleManager");
		return ptr;
	}



	void ShooterCharacterSpawned(class AShooterCharacter* TheShooterCharacter);
	void ShooterCharacterPossessed(class AShooterCharacter* TheShooterCharacter);
	bool IsRainingAtLocation(const struct FVector& Location);
	bool IsDaytime();
	float GetWindAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
	float GetWaterLineStartZ(const struct FVector& AtLocation);
	float GetTemperatureAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
	TArray<class UClass*> GetPreventBuffClassesInDayCycleLevel();
	float GetDeepWaterStartZ(const struct FVector& AtLocation);
	struct FString GetDayNumberString(bool bIncludeDayString);
	void DayCycleManagerStartNighttime__DelegateSignature();
	void DayCycleManagerStartDaytime__DelegateSignature();
	void DayCycleManagerOnDayChange__DelegateSignature(int DayNumber);
	void BPPostDrawSpawnMap(class AShooterPlayerController* ForPC, class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize);
	bool BPOverrideItemAutoDecreaseDurability(class UPrimalItem* anItem);
	float BPOverrideGameStateMatineePlayRate(class AActor* forMatinee, float InPlayRate);
	void BPOnDCMCheat(const struct FName& CheatName, float Value);
	TArray<struct FPrimalMapMarkerEntryData> BPGetAdditionalMapMarkers(class AShooterPlayerController* ForPC);
	bool BPAllowSpawningCrate(class UClass* CrateType);
	float BPAdjustTemperature(float TemperatureIn, class ABiomeZoneVolume* BiomeZoneVolume, const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
	void AttemptWeaponFiring(class AShooterWeapon* theWeapon);
	bool AllowWeaponFiring(class AActor* theWeaponOrStructure);
	bool AllowStructureActivation(class APrimalStructure* theStructure);
	float AdjustStructureItemInsulation(class AShooterCharacter* forCharacter, class UPrimalItem* ForPrimalItem, TEnumAsByte<ShooterGame_EPrimalItemStat> TypeInsulation, float insulationValue);
};

// Class ShooterGame.DestroyedMeshActor
// 0x0018 (FullSize[0x04A8] - InheritedSize[0x0490])
class ADestroyedMeshActor : public ADestructibleActor
{
public:
	float                                              TimeToSetNoCollision;                                      // 0x0490(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NoCollisionProfileName;                                    // 0x0494(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DefaultCollisionProfileName;                               // 0x049C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U1LT[0x4];                                     // 0x04A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DestroyedMeshActor");
		return ptr;
	}



	void SetNoCollisionProfile();
};

// Class ShooterGame.DinoSetupDataAsset
// 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
class UDinoSetupDataAsset : public UDataAsset
{
public:
	struct FDinoSetup                                  DinoSetup;                                                 // 0x0028(0x00F0) (Edit)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DinoSetupDataAsset");
		return ptr;
	}



};

// Class ShooterGame.DirectionalAmbientLight
// 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
class ADirectionalAmbientLight : public ALight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DirectionalAmbientLight");
		return ptr;
	}



};

// Class ShooterGame.DirectionalInjectedLight
// 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
class ADirectionalInjectedLight : public ALight
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DirectionalInjectedLight");
		return ptr;
	}



};

// Class ShooterGame.DroppedItem
// 0x0298 (FullSize[0x0708] - InheritedSize[0x0470])
class ADroppedItem : public AActor
{
public:
	unsigned char                                      UnknownData_TRCR[0x8];                                     // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FItemNetInfo                                MyItemInfo;                                                // 0x0478(0x01B0) (BlueprintVisible, Net)
	class UPrimalItem*                                 MyItem;                                                    // 0x0628(0x0008) (BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bApplyImpulseOnSpawn : 1;                                  // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnStasis : 1;                                      // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCollisionTrace : 1;                                    // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventPickup : 1;                                        // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOutOfWater : 1;                                    // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseClientDroppedItemPhysics : 1;                          // 0x0630(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsUnderwater : 1;                                         // 0x0630(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bNotifyPreviousOwnerOfPickup : 1;                          // 0x0630(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAssignedToTribePickupOnly : 1;                            // 0x0631(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_XB38[0x2];                                     // 0x0632(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AssignedToTribeID;                                         // 0x0634(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bLowQuality : 1;                                           // 0x0638(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GWK2[0x3];                                     // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ImpulseMagnitude;                                          // 0x063C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceSleepTimer;                                           // 0x0640(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     DroppedItemScale;                                          // 0x0644(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OverlayTooltipPadding;                                     // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OverlayTooltipScale;                                       // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HUDOverlayToolTipWidget;                                   // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DroppedByName;                                             // 0x0668(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	uint64_t                                           DroppedByPlayerID;                                         // 0x0678(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             DroppedItemDestructionTime;                                // 0x0680(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     DroppedItemInterpTarget;                                   // 0x0688(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bClientDisablePhysics;                                     // 0x0694(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JQKD[0x3];                                     // 0x0695(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 NetDroppedMeshOverride;                                    // 0x0698(0x0008) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          NetDroppedMeshMaterialOverride;                            // 0x06A0(0x0008) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector                                     NetDroppedMeshOverrideScale3D;                             // 0x06A8(0x000C) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7NMY[0xC];                                     // 0x06B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             SpawnDropSoundTime;                                        // 0x06C0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9BOQ[0xC];                                     // 0x06C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AActor>                       DroppedByActor;                                            // 0x06D4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1AW5[0x1C];                                    // 0x06DC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FreezePhysicsAfterTime;                                    // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PickupAllRange;                                            // 0x06FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O305[0x4];                                     // 0x0700(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBPOnItemPickedUp : 1;                                     // 0x0704(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_5HLT[0x3];                                     // 0x0705(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DroppedItem");
		return ptr;
	}



	void ResetLifeSpan(float NewLifeSpan);
	void KeepPhysicsActiveForDuration(float Duration);
	bool IsAllowedToPickupItem(class APlayerController* PC);
	void FreezePhysics();
	void ForceSleep();
	void BPOnItemPickedUp(class APlayerController* ByPC, class UPrimalItem* InventoryItem);
};

// Class ShooterGame.DroppedItemEgg
// 0x0030 (FullSize[0x0738] - InheritedSize[0x0708])
class ADroppedItemEgg : public ADroppedItem
{
public:
	class UClass*                                      SpawnDinoEmitter;                                          // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IndoorsHypoThermalInsulation;                              // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IndoorsHyperThermalInsulation;                             // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggThermalInsulationTemperatureMultiplier;                 // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsEggTooHot : 1;                                          // 0x071C(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bIsEggTooCold : 1;                                         // 0x071C(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_SZXD[0x3];                                     // 0x071D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ABiomeZoneVolume*                            MyBiomeZone;                                               // 0x0720(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DBQT[0x10];                                    // 0x0728(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DroppedItemEgg");
		return ptr;
	}



	void NetSpawnDinoEmitter();
};

// Class ShooterGame.DroppedItemLowQuality
// 0x0000 (FullSize[0x0708] - InheritedSize[0x0708])
class ADroppedItemLowQuality : public ADroppedItem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DroppedItemLowQuality");
		return ptr;
	}



};

// Class ShooterGame.DroppedItemTorch
// 0x0018 (FullSize[0x0720] - InheritedSize[0x0708])
class ADroppedItemTorch : public ADroppedItemLowQuality
{
public:
	float                                              LifeTimeMeter;                                             // 0x0708(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PassiveDurabilityCostPerInterval;                          // 0x070C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PassiveDurabilityCostInterval;                             // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LastDurabilityConsumptionTime;                             // 0x0714(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               FireIsOn;                                                  // 0x0718(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_9BLA[0x7];                                     // 0x0719(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DroppedItemTorch");
		return ptr;
	}



	void OnRep_FireIsOn();
};

// Class ShooterGame.DroppedItemMission
// 0x0010 (FullSize[0x0718] - InheritedSize[0x0708])
class ADroppedItemMission : public ADroppedItem
{
public:
	unsigned char                                      bPickupOnlyAllowMissionPlayers : 1;                        // 0x0708(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowHUDMissionInfo : 1;                                   // 0x0708(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_KAJE[0x7];                                     // 0x0709(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMissionType*                                OwnerMission;                                              // 0x0710(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DroppedItemMission");
		return ptr;
	}



	class AMissionType* GetOwnerMission();
};

// Class ShooterGame.FadingDestructibleActor
// 0x0050 (FullSize[0x04E0] - InheritedSize[0x0490])
class AFadingDestructibleActor : public ADestructibleActor
{
public:
	unsigned char                                      bFadeOut : 1;                                              // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRotationalFall : 1;                                       // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_VIDR[0x3];                                     // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Fall_RotAccel;                                             // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Fall_RotAccelRate;                                         // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     Fall_Direction_Right;                                      // 0x049C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              Fall_Spin_Rand;                                            // 0x04A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              Fall_SpinVelocity;                                         // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Fall_SpinAccel;                                            // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Fall_SpinAccelRate;                                        // 0x04B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Fall_RotVelocity;                                          // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutDelayTime;                                          // 0x04BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutTime;                                               // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CWZX[0x14];                                    // 0x04C4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x04D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.FadingDestructibleActor");
		return ptr;
	}



	void SetupFade();
};

// Class ShooterGame.FallDamageType
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UFallDamageType : public UDamageType
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.FallDamageType");
		return ptr;
	}



};

// Class ShooterGame.FloatMap
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UFloatMap : public UObject
{
public:
	unsigned char                                      UnknownData_P8UN[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.FloatMap");
		return ptr;
	}



	void Init(int InSizeX, int InSizeY);
	int GetSizeY();
	int GetSizeX();
	int GetSize();
	void Delete();
};

// Class ShooterGame.FlockingBehavior
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UFlockingBehavior : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.FlockingBehavior");
		return ptr;
	}



	void STATIC_UpdateFlockComponentLocations_ParticleBoids(TArray<struct FBoid> BoidArray, TArray<class UParticleSystemComponent*> ComponentArray);
	void STATIC_UpdateFlockComponentLocations(TArray<struct FBoid> BoidArray, TArray<class UStaticMeshComponent*> ComponentArray);
	void STATIC_UpdateBoidComponentLocation(const struct FBoid& ThisBoid, class USceneComponent* Comp);
	void STATIC_TickPersistentFlockData(class UObject* WorldContextObject, struct FFlockPersistentData* InOutFlockData, TArray<struct FBoid> BoidArray, float DeltaTime, int MaxNumTracesPerSecond, bool bDrawDebug);
	void STATIC_SetAvoidanceAreaTransform(struct FAvoidanceArea* InOutAvoidanceArea, const struct UObject_FTransform& NewTransform);
	void STATIC_SetAvoidanceAreaArrayTransform(TArray<struct FAvoidanceArea>* InOutAvoidanceAreas, const struct UObject_FTransform& NewTransform);
	void STATIC_MakeIndexArray(int StartIndex, int NumIndices, TArray<int>* OutIndexArray);
	bool STATIC_IsPointInsideAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& WorldLocation);
	bool STATIC_IsPointInsideAnyAvoidanceArea(TArray<struct FAvoidanceArea> Areas, const struct FVector& WorldLocation);
	void STATIC_InterpVectorArrayToSphere(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, float Radius, int NumRows, TEnumAsByte<ShooterGame_ESimpleCurve> LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpVectorArrayToRandom(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, float MinRadius, float MaxRadius, int RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpVectorArrayToGrid(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float HorizSize, float VertSize, int NumRows, int NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpVectorArrayToCircle(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpVectorArray(TArray<struct FVector>* InOutVectorArray, TArray<struct FVector> RelativeTargetLocations, const struct FVector& Origin, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpBoidArrayToSphere(TArray<struct FBoid>* InOutBoidArray, const struct UObject_FTransform& WorldTransform, float Radius, int NumRows, TEnumAsByte<ShooterGame_ESimpleCurve> LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpBoidArrayToRandom(TArray<struct FBoid>* InOutBoidArray, const struct UObject_FTransform& WorldTransform, float MinRadius, float MaxRadius, int RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpBoidArrayToGrid(TArray<struct FBoid>* InOutBoidArray, const struct UObject_FTransform& WorldTransform, const struct FRotator& Rotation, float HorizSize, float VertSize, int NumRows, int NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpBoidArrayToCircle(TArray<struct FBoid>* InOutBoidArray, const struct UObject_FTransform& WorldTransform, const struct FRotator& CircleRotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void STATIC_InterpBoidArray(TArray<struct FBoid>* InOutBoidArray, TArray<struct FBoid> RelativeTargetLocations, const struct UObject_FTransform& WorldTransform, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	float STATIC_GetFlockRadius(TArray<struct FBoid> BoidArray, const struct FVector& FlockCentroid, bool bIgnoreLeaders);
	void STATIC_GetFlockMembersOfType(TArray<struct FBoid> BoidArray, TEnumAsByte<ShooterGame_EBoidType> BoidType, TArray<int>* OutIndices);
	struct FVector STATIC_GetFlockCentroid(TArray<struct FBoid> BoidArray, bool bIgnoreLeaders);
	struct FVector STATIC_GetClosestSurfacePointOnAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& Loc);
	struct FVector STATIC_GetAvoidanceDirection(const struct FAvoidanceArea& Area, const struct FVector& CurrentLoc, const struct FVector& CurrentDir);
	struct FVector STATIC_GetAvoidanceAreaWorldLocation(const struct FAvoidanceArea& Area);
	void STATIC_FlockTickSphereFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct UObject_FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, float Radius, int NumRows, TEnumAsByte<ShooterGame_ESimpleCurve> LatitudeDistribution, float HelixSpeed);
	void STATIC_FlockTickLeaders(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct UObject_FTransform& ParentTransform, float LeaderInterpSpeed, float LeaderAreaWidth);
	void STATIC_FlockTickGridFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct UObject_FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, const struct FRotator& GridRotation, float GridHorizSize, float GridVertSize, int GridNumRows, int GridNumCols);
	void STATIC_FlockTickFollowersAndFreeAgents(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FBoidBehavior& Behavior);
	void STATIC_FlockTickCircleFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct UObject_FTransform& WorldTransform, const struct FBoidBehavior& Behavior, const struct FRotator& CircleRotation, float CircleRadius, float MinInterpDistance);
	void STATIC_FlockSetMaxSpeedAndForce(TArray<struct FBoid>* InOutBoidArray, bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange);
	void STATIC_FlockCreate(TArray<struct FBoid>* NewBoids, const struct UObject_FTransform& WorldTransform, int NumFlockBoids, int NumLeaderBoids, float InitialSpawnRadius, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange, const struct FVector2D& TurnRateRange);
	void STATIC_DrawDebugAvoidanceArea(class UObject* WorldContextObject, const struct FAvoidanceArea& Area, float DrawDuration);
	void STATIC_BoidTick(int BoidIndex, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, float DeltaTime, const struct FBoidBehavior& Behavior);
	void STATIC_BoidStopTargeting(int BoidIndex, TArray<struct FBoid>* InOutBoidArray);
	void STATIC_BoidSetTarget(int BoidIndex, TArray<struct FBoid>* InOutBoidArray, const struct FVector& TargetWorldLocation);
	void STATIC_BoidSetAlive(int BoidIndex, TArray<struct FBoid>* InOutBoidArray, bool bIsAlive);
	void STATIC_BoidMoveTo(int BoidIndex, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, const struct FBoidBehavior& Behavior, float DeltaTime, const struct FVector& NewWorldLocation, float TargetDistanceThreshold, bool bUseIterp, float InterpSpeed);
	void STATIC_AddAvoidanceAreaToFlockData(struct FFlockPersistentData* InOutFlockData, const struct FAvoidanceArea& Area);
};

// Class ShooterGame.GamepadButtonLegendWidget
// 0x0040 (FullSize[0x0280] - InheritedSize[0x0240])
class UGamepadButtonLegendWidget : public UUserWidget
{
public:
	struct FText                                       ButtonDescription;                                         // 0x0240(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData_R2BS[0x10];                                    // 0x0240(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UTexture2D*                                  ButtonIcon;                                                // 0x0268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_97GL[0x10];                                    // 0x0270(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.GamepadButtonLegendWidget");
		return ptr;
	}



};

// Class ShooterGame.GeneratorModule
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UGeneratorModule : public UObject
{
public:
	unsigned char                                      UnknownData_4UY7[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UGeneratorModule*>                    LinkedModules;                                             // 0x0038(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.GeneratorModule");
		return ptr;
	}



};

// Class ShooterGame.GenericDataListEntry
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UGenericDataListEntry : public UObject
{
public:
	unsigned char                                      UnknownData_CBH4[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Description;                                               // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                CustomData;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JR0L[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomString;                                              // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  EntryIcon;                                                 // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          EntryMaterial;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsEnabled;                                                // 0x0088(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SMOE[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ExplicitEntryIndexType;                                    // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.GenericDataListEntry");
		return ptr;
	}



};

// Class ShooterGame.HexagonTradableOption
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UHexagonTradableOption : public UObject
{
public:
	class UClass*                                      ItemClass;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     OverrideName;                                              // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                Quantity;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ItemCost;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bOverrideTradeAction : 1;                                  // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowedToBePurchased : 1;                            // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetItemCost : 1;                                     // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsEngramTradeOption : 1;                                  // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_WG0Z[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     OverrideDescription;                                       // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                OverwrittenRecievedItemCount;                              // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxItemPurchaseTimes;                                      // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VESF[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HexagonTradableOption");
		return ptr;
	}



	int GetItemCost(class AShooterPlayerController* PlayerController);
	bool BPOverrideTradeAction(class AShooterPlayerController* PlayerController);
	int BPGetItemCost(class AShooterPlayerController* PlayerController);
	bool BPAllowedToBePurchased(class AShooterPlayerController* PlayerController);
	bool AllowedToBePurchased(class AShooterPlayerController* PlayerController);
};

// Class ShooterGame.HexagonVFXActor
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class AHexagonVFXActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HexagonVFXActor");
		return ptr;
	}



	void SetVolume(float NewVolume);
	void HoverThenAttract();
	void BeginMovingDirectlyToActor();
};

// Class ShooterGame.HibernationManager
// 0x00A8 (FullSize[0x0518] - InheritedSize[0x0470])
class AHibernationManager : public AActor
{
public:
	unsigned char                                      UnknownData_1MQW[0xA8];                                    // 0x0470(0x00A8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HibernationManager");
		return ptr;
	}



};

// Class ShooterGame.HordeCrateManager
// 0x0058 (FullSize[0x04C8] - InheritedSize[0x0470])
class AHordeCrateManager : public AActor
{
public:
	bool                                               bIsEnabled;                                                // 0x0470(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBPForceStartHorde;                                     // 0x0471(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ODHP[0x2];                                     // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDelayBeforeInitialEvent;                                // 0x0474(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDelayBeforeInitialEvent;                                // 0x0478(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinEventCheckInterval;                                     // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxEventCheckInterval;                                     // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinDistanceFromOtherEvent;                                 // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FHordeCrateDifficultyLevel>          CrateDifficultyLevels;                                     // 0x0488(0x0010) (Edit, ZeroConstructor)
	TArray<struct FHordeCrateDifficultyLevel>          ElementNodeDifficultyLevels;                               // 0x0498(0x0010) (Edit, ZeroConstructor)
	TArray<class AActor*>                              ActiveSpawnZones;                                          // 0x04A8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FHordeCrateEvent>                    ActiveEvents;                                              // 0x04B8(0x0010) (BlueprintVisible, ZeroConstructor, SaveGame)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HordeCrateManager");
		return ptr;
	}



	void ForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int DifficultyIndex);
	void BPForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int DifficultyIndex);
};

// Class ShooterGame.HUDElementBarWidget
// 0x00D8 (FullSize[0x0318] - InheritedSize[0x0240])
class UHUDElementBarWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData_ADE6[0x8];                                     // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      hatClass;                                                  // 0x0248(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      shirtClass;                                                // 0x0250(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      glovesClass;                                               // 0x0258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      pantsClass;                                                // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      bootsClass;                                                // 0x0268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      shoulderCannonClass;                                       // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       HelmetBarName;                                             // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ShirtBarName;                                              // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       GlovesBarName;                                             // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       PantsBarName;                                              // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       BootsBarName;                                              // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       BoostIconName;                                             // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ShoulderCannonBarName;                                     // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              iconsBottomOffset;                                         // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              iconSeparation;                                            // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bBoostIconHidden;                                          // 0x02B8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_75DY[0x47];                                    // 0x02B9(0x0047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              helmetMaxAmmo;                                             // 0x0300(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              shirtMaxAmmo;                                              // 0x0304(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              glovesMaxAmmo;                                             // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              pantsMaxAmmo;                                              // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              bootsMaxAmmo;                                              // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              shoulderMaxAmmo;                                           // 0x0314(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDElementBarWidget");
		return ptr;
	}



	void UpdateBoostIconVisibility();
};

// Class ShooterGame.HUDStatusBarsWidget
// 0x0160 (FullSize[0x03A0] - InheritedSize[0x0240])
class UHUDStatusBarsWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData_7BQ9[0x8];                                     // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     HealthBarName;                                             // 0x0248(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     StaminaBarName;                                            // 0x0258(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     OxygenBarName;                                             // 0x0268(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     FoodBarName;                                               // 0x0278(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     WaterBarName;                                              // 0x0288(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     WeightBarName;                                             // 0x0298(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     TorpidityBarName;                                          // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FName                                       XPBarName;                                                 // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       IndoorsImageName;                                          // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       HarvestableImageName;                                      // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       CharacterLabelName;                                        // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  UsableHarvestableAllowed;                                  // 0x02D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  HarvestableAllowed;                                        // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  HarvestablePrevented;                                      // 0x02E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  UsableHarvestablePrevented;                                // 0x02F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FLinearColor                                poopFoodColor;                                             // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FLinearColor                                regularFoodColor;                                          // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_BDVM[0x88];                                    // 0x0318(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDStatusBarsWidget");
		return ptr;
	}



};

// Class ShooterGame.InputKeyDisplayWidget
// 0x02B8 (FullSize[0x0440] - InheritedSize[0x0188])
class UInputKeyDisplayWidget : public UWidget
{
public:
	struct FTextBlockStyle                             KeyTextStyle;                                              // 0x0188(0x0118) (Edit, BlueprintVisible)
	struct FTextBlockStyle                             SeparatorTextStyle;                                        // 0x02A0(0x0118) (Edit, BlueprintVisible)
	struct FVector2D                                   ButtonImageSize;                                           // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     TextPrefix;                                                // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     TextSuffix;                                                // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_LXL3[0x60];                                    // 0x03E0(0x0060) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InputKeyDisplayWidget");
		return ptr;
	}



};

// Class ShooterGame.InventoryPanelContainerWidget
// 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
class UInventoryPanelContainerWidget : public UBorder
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryPanelContainerWidget");
		return ptr;
	}



};

// Class ShooterGame.JsonObject
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UJsonObject : public UObject
{
public:
	unsigned char                                      UnknownData_DADE[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.JsonObject");
		return ptr;
	}



	void SetVectorField(const struct FString& Key, const struct FVector& Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetVectorArrayField(const struct FString& Key, TArray<struct FVector> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetStructField(const struct FString& Key, class UProperty* Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetStringField(const struct FString& Key, const struct FString& Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetStringArrayField(const struct FString& Key, TArray<struct FString> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetRotatorField(const struct FString& Key, const struct FRotator& Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetRotatorArrayField(const struct FString& Key, TArray<struct FRotator> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetNullField(const struct FString& Key, bool bForceSingleKey, const struct FString& Delimiter);
	void SetJsonObjectField(const struct FString& Key, class UJsonObject* Object, bool bForceSingleKey, const struct FString& Delimiter);
	void SetJsonObjectArrayField(const struct FString& Key, TArray<class UJsonObject*> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetIntField(const struct FString& Key, int Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetIntArrayField(const struct FString& Key, TArray<int> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetFloatField(const struct FString& Key, float Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetFloatArrayField(const struct FString& Key, TArray<float> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetDoubleField(const struct FString& Key, double Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetDoubleArrayField(const struct FString& Key, TArray<double> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetByteField(const struct FString& Key, unsigned char Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetByteArrayField(const struct FString& Key, TArray<unsigned char> Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetBoolField(const struct FString& Key, bool Value, bool bForceSingleKey, const struct FString& Delimiter);
	void SetBoolArrayField(const struct FString& Key, TArray<bool> Value, bool bForceSingleKey, const struct FString& Delimiter);
	struct FString JsonSerialize();
	class UJsonObject* STATIC_JsonDeserialize(const struct FString& JsonData, struct FString* OutErrorMessage, class UObject* WorldContextObject);
	bool IsNullField(const struct FString& Key, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetVectorField(const struct FString& Key, struct FVector* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetVectorArrayField(const struct FString& Key, TArray<struct FVector>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetStructField(const struct FString& Key, class UProperty** DestStruct, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetStringField(const struct FString& Key, struct FString* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetStringArrayField(const struct FString& Key, TArray<struct FString>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetRotatorField(const struct FString& Key, struct FRotator* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetRotatorArrayField(const struct FString& Key, TArray<struct FRotator>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetKeys(const struct FString& Key, TArray<struct FString>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetJsonObjectField(const struct FString& Key, class UJsonObject** OutObject, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetJsonObjectArrayField(const struct FString& Key, TArray<class UJsonObject*>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetIntField(const struct FString& Key, int* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetIntArrayField(const struct FString& Key, TArray<int>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetFloatField(const struct FString& Key, float* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetFloatArrayField(const struct FString& Key, TArray<float>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetDoubleField(const struct FString& Key, double* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetDoubleArrayField(const struct FString& Key, TArray<double>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetByteField(const struct FString& Key, unsigned char* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetByteArrayField(const struct FString& Key, TArray<unsigned char>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetBoolField(const struct FString& Key, bool* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	bool GetBoolArrayField(const struct FString& Key, TArray<bool>* OutValue, bool bForceSingleKey, const struct FString& Delimiter);
	class UJsonObject* STATIC_CreateJsonObject(class UObject* WorldContextObject);
	bool STATIC_CompareJsonValues(class UJsonObject* A, class UJsonObject* B);
};

// Class ShooterGame.KeyInputWidget
// 0x0028 (FullSize[0x0500] - InheritedSize[0x04D8])
class UKeyInputWidget : public UEditableText
{
public:
	unsigned char                                      UnknownData_Y27O[0x28];                                    // 0x04D8(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.KeyInputWidget");
		return ptr;
	}



};

// Class ShooterGame.LandscapeUtils
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULandscapeUtils : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.LandscapeUtils");
		return ptr;
	}



};

// Class ShooterGame.Leaderboard
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class ULeaderboard : public UObject
{
public:
	class UClass*                                      LeaderboardRowType;                                        // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	struct FLeaderboardDisplayRow                      HeaderRow;                                                 // 0x0030(0x0020) (Edit, DisableEditOnInstance)
	TEnumAsByte<ShooterGame_ELeaderboardColumnName>    DefaultOrderByColumn;                                      // 0x0050(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TEnumAsByte<ShooterGame_ELeaderboardOrdering>      DefaultOrdering;                                           // 0x0051(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TEnumAsByte<ShooterGame_ELeaderboardGroupByMode>   DefaultGroupByMode;                                        // 0x0052(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_ELeaderboardColumnName>    DefaultGroupByColumn;                                      // 0x0053(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	int                                                DefaultNumRowsToDisplay;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.Leaderboard");
		return ptr;
	}



	bool STATIC_GetLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, const struct FName& MissionTag, TArray<struct FLeaderboardRow>* LeaderboardRows);
	void STATIC_FormatLeaderboardRows(class UClass* LeaderboardType, const struct FName& MissionTag, TArray<struct FLeaderboardRow> Rows, TArray<struct FLeaderboardDisplayRow>* DisplayRows, const struct FString& PlayerNetIDString);
	void STATIC_FormatLeaderboardRow(class UClass* LeaderboardType, const struct FName& MissionTag, const struct FLeaderboardRow& Row, struct FLeaderboardDisplayRow* DisplayRow, const struct FString& PlayerNetIDString);
	int STATIC_CountLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, const struct FName& MissionTag);
	void BPGetLeaderboardRows(const struct FName& MissionTag, class AShooterGameMode* GameMode, TArray<struct FLeaderboardRow>* LeaderboardRows);
	struct FLeaderboardDisplayRow BPFormatLeaderboardRow(const struct FName& MissionTag, int index, const struct FLeaderboardRow& DatabaseRow);
	int BPCountLeaderboardRows(const struct FName& MissionTag, class AShooterGameMode* GameMode);
	bool BPAddLeaderboardRow(class AShooterGameMode* GameMode, const struct FLeaderboardRow& NewRow);
	bool STATIC_AddLeaderboardRow(class UWorld* WorldContextObject, class UClass* LeaderboardType, const struct FLeaderboardRow& NewRow);
};

// Class ShooterGame.MatineeCapture
// 0x0030 (FullSize[0x04A0] - InheritedSize[0x0470])
class AMatineeCapture : public AActor
{
public:
	class AMatineeActor*                               MatineeActor;                                              // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CaptureFPS;                                                // 0x0478(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ResX;                                                      // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ResY;                                                      // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewMatineeTime;                                        // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bBeginCapture;                                             // 0x0488(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bCancelCapture;                                            // 0x0489(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RJI5[0x16];                                    // 0x048A(0x0016) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MatineeCapture");
		return ptr;
	}



};

// Class ShooterGame.MissionDispatcherPoint
// 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
class AMissionDispatcherPoint : public AActor
{
public:
	TArray<struct FName>                               MissionTags;                                               // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionDispatcherPoint");
		return ptr;
	}



};

// Class ShooterGame.MissionMetaTagInfo
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UMissionMetaTagInfo : public UObject
{
public:
	struct FMetaTagIDInfo                              MetaTagInfo[0xB];                                          // 0x0028(0x0084) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_ZG3U[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionMetaTagInfo");
		return ptr;
	}



};

// Class ShooterGame.MissionModuleBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMissionModuleBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionModuleBase");
		return ptr;
	}



	float BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
};

// Class ShooterGame.MissionModuleInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMissionModuleInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionModuleInterface");
		return ptr;
	}



	class UNewMissionModuleBase* RunMissionModule(class UClass* ModuleClass);
};

// Class ShooterGame.MissionObjectiveEntryWidget
// 0x0028 (FullSize[0x0268] - InheritedSize[0x0240])
class UMissionObjectiveEntryWidget : public UUserWidget
{
public:
	struct FString                                     ItemLabelName;                                             // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_PQAV[0x18];                                    // 0x0250(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionObjectiveEntryWidget");
		return ptr;
	}



};

// Class ShooterGame.MissionPrerequisite
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMissionPrerequisite : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionPrerequisite");
		return ptr;
	}



	bool IsSatisfied(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, struct FString* OutReason);
};

// Class ShooterGame.MissionRequirementEntryWidget
// 0x0020 (FullSize[0x0260] - InheritedSize[0x0240])
class UMissionRequirementEntryWidget : public UUserWidget
{
public:
	struct FString                                     DisplayText;                                               // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       CustomTag;                                                 // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OJG1[0x8];                                     // 0x0258(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionRequirementEntryWidget");
		return ptr;
	}



	void SetDisplayText(const struct FString& Text);
	void SetCustomTag(const struct FName& Tag);
	void Initialize();
};

// Class ShooterGame.MissionServerSidePoint
// 0x0048 (FullSize[0x04B8] - InheritedSize[0x0470])
class AMissionServerSidePoint : public ANote
{
public:
	struct FName                                       TriggerKey;                                                // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TriggerOrder;                                              // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CustomDataInt;                                             // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CustomDataFloat;                                           // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IF2Z[0x4];                                     // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      CustomDataFloatArray;                                      // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector                                     CustomDataVector;                                          // 0x0498(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KNLW[0x4];                                     // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomDataString;                                          // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionServerSidePoint");
		return ptr;
	}



	void SetTriggerKey(const struct FName& NewTriggerKey);
};

// Class ShooterGame.MissionSpline
// 0x0058 (FullSize[0x04D0] - InheritedSize[0x0478])
class AMissionSpline : public ASplineActor
{
public:
	bool                                               bValidateSpline;                                           // 0x0478(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B4DZ[0x3];                                     // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SplineValidationMinTotalLength;                            // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECollisionChannel>              SplineValidationChannel;                                   // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CO28[0x3];                                     // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SplineValidationNumTracesPerSplineSegment;                 // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SplineValidationDebugDrawDuration;                         // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       TriggerKey;                                                // 0x048C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TriggerOrder;                                              // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CustomDataInt;                                             // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CustomDataFloat;                                           // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<float>                                      CustomDataFloatArray;                                      // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector                                     CustomDataVector;                                          // 0x04B0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0I4L[0x4];                                     // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomDataString;                                          // 0x04C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionSpline");
		return ptr;
	}



	void SpawnerUpdate(float DeltaTime);
	bool FindLocationAndDirectionClosestToWorldLocation(const struct FVector& WorldLocation, struct FVector* OutLocation, struct FVector* OutDirection, float* OutSplineKey);
};

// Class ShooterGame.MissionTimerWidget
// 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
class UMissionTimerWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData_N5O9[0x10];                                    // 0x0240(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionTimerWidget");
		return ptr;
	}



};

// Class ShooterGame.TargetableInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UTargetableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TargetableInterface");
		return ptr;
	}



	class UObject* ToUObject();
};

// Class ShooterGame.PrimalTargetableActor
// 0x0110 (FullSize[0x0580] - InheritedSize[0x0470])
class APrimalTargetableActor : public AActor
{
public:
	unsigned char                                      UnknownData_21NB[0x10];                                    // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystem*                             HurtFX;                                                    // 0x0480(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FDamageTypeAdjuster>                 DamageTypeAdjusters;                                       // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_KZY2[0x8];                                     // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DestructionActorTemplate;                                  // 0x04A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              LifeSpanAfterDeath;                                        // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_CR06[0x4];                                     // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   DeathSound;                                                // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              PassiveDamageHealthReplicationPercentInterval;             // 0x04B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              DamageNotifyTeamAggroMultiplier;                           // 0x04BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              DamageNotifyTeamAggroRange;                                // 0x04C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              DamageNotifyTeamAggroRangeFalloff;                         // 0x04C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     DestructibleMeshLocationOffset;                            // 0x04C8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     DestructibleMeshScaleOverride;                             // 0x04D4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FRotator                                    DestructibleMeshRotationOffset;                            // 0x04E0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bDestructionActorTemplateServerOnly : 1;                   // 0x04EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyedMeshUseSkeletalMeshComponent : 1;                // 0x04EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventZeroDamageInstigatorSelfDamage : 1;                // 0x04EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDead : 1;                                               // 0x04EC(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bDamageNotifyTeamAggroAI : 1;                              // 0x04EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_2XKH : 1;                                      // 0x04EC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWithinPreventionVolume : 1;                               // 0x04EC(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bAllowDamageByFriendlyDinos : 1;                           // 0x04EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustDamage : 1;                                    // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceZeroDamageProcessing : 1;                            // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceFloatingDamageNumbers : 1;                           // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoAllowRadialDamageWithoutVisiblityTrace : 1;             // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDestructionEffects : 1;                             // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDamageRepairCooldown : 1;                           // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseHarvestingComponent : 1;                               // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPDied : 1;                                            // 0x04ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_2JSD[0x2];                                     // 0x04EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DescriptiveName;                                           // 0x04F0(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      DestroyedMeshActorClass;                                   // 0x0500(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDestructibleMesh*                           DestroyedMesh;                                             // 0x0508(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReplicatedHealth;                                          // 0x0510(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	float                                              Health;                                                    // 0x0514(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              MaxHealth;                                                 // 0x0518(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              DestructibleMeshDeathImpulseScale;                         // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FBoneDamageAdjuster>                 BoneDamageAdjusters;                                       // 0x0520(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_BY2F[0x8];                                     // 0x0530(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalHarvestingComponent*                  MyHarvestingComponent;                                     // 0x0538(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MDQP[0x10];                                    // 0x0540(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<ShooterGame_EShooterPhysMaterialType>  TargetableDamageFXDefaultPhysMaterial;                     // 0x0550(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BO7X[0x3];                                     // 0x0551(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      BPOverrideDestroyedMeshTextures : 1;                       // 0x0554(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_8WEX[0x3];                                     // 0x0555(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      StructureSettingsClass;                                    // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3V1E[0x20];                                    // 0x0560(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalTargetableActor");
		return ptr;
	}



	void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void OverrideDestroyedMeshTextures(class UMeshComponent* MeshComp);
	void OnRep_ReplicatedHealth();
	void NetUpdatedHealth(int NewHealth);
	bool IsInvincible();
	void HarvestingDepleted(class UPrimalHarvestingComponent* fromComponent);
	float GetMaxHealth();
	struct FString GetDescriptiveName();
	bool BPSupressImpactEffects(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent);
	void BPHitEffect(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent, const struct FVector& DamageLoc, const struct FRotator& HitNormal);
	void BPDied(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	float BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
};

// Class ShooterGame.PrimalStructure
// 0x0568 (FullSize[0x0AE8] - InheritedSize[0x0580])
class APrimalStructure : public APrimalTargetableActor
{
public:
	unsigned char                                      UnknownData_FDVV[0x28];                                    // 0x0580(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   OverlayTooltipPadding;                                     // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OverlayTooltipScale;                                       // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StructureTag;                                              // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ConsumesPrimalItem;                                        // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ScaleFactor;                                               // 0x05C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                StructureSnapTypeFlags;                                    // 0x05CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FStructureVariant>                   Variants;                                                  // 0x05D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                CurrentVariant;                                            // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      bIsFlippable : 1;                                          // 0x05E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFlipped : 1;                                            // 0x05E4(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bShowInPlaceableList : 1;                                  // 0x05E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsRepairing : 1;                                          // 0x05E4(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_04VO : 1;                                      // 0x05E4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceAllowWallAttachments : 1;                            // 0x05E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRefreshedStructureColors : 1;                        // 0x05E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBed : 1;                                                // 0x05E4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClientAddPlacedOnFloorStructures : 1;                     // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventStasis : 1;                                   // 0x05E5(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnStasis : 1;                                      // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTriggerBPStasis : 1;                                      // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPostLoadedFromSaveGame : 1;                          // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlacementUsesWeaponClipAmmo : 1;                          // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDyingWhenDemolished : 1;                            // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAbsoluteTakeAnythingAsGround : 1;                         // 0x05E5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisablePlacementOnDynamicsFoliageAndDoors : 1;            // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSeatedDisableCollisionCheck : 1;                          // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsAllowedToBuildEx : 1;                              // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPHandleStructureEnabled : 1;                          // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePlacingOnVerticalGround : 1;                         // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlacementShouldNotBeHorizontal : 1;                       // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequiresGroundedPlacement : 1;                            // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowPlacingOnOtherTeamStructuresPvPOnly : 1;             // 0x05E6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUseSkeletalMeshComponent : 1;                        // 0x05E7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UseBPOverrideTargetLocation : 1;                           // 0x05E7(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bOverrideFoundationSupportDistance : 1;                    // 0x05E7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	float                                              PlacementOffsetForVerticalGround;                          // 0x05E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceDisableFootSound : 1;                                // 0x05EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTraceThruEncroachmentPoints : 1;                          // 0x05EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDidSpawnEffects : 1;                                      // 0x05EC(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPreventDinoPlacementDistanceIncrease : 1;                 // 0x05EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPendingRemoval : 1;                                       // 0x05EC(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bWasAttachedToPawn : 1;                                    // 0x05EC(0x0001) BIT_FIELD (BlueprintVisible, Transient, SaveGame, NoDestructor)
	unsigned char                                      bDontOverrideCollisionProfile : 1;                         // 0x05EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAdvancedRotationPlacement : 1;                         // 0x05EC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QRS0 : 2;                                      // 0x05ED(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bRootFoundationLimitBuildArea : 1;                         // 0x05ED(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCenterOffscreenFloatingHUDWidgets : 1;                    // 0x05ED(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_L7B5[0x2];                                     // 0x05EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlacementInitialTracePointOffsetForVerticalGround;         // 0x05F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5P6F[0x4];                                     // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              StructuresAllowedToBeVerticalGround;                       // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              TraceDistanceFromActorToWallVerticalGround;                // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PlacementHitLocOffset;                                     // 0x060C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PlacementEncroachmentCheckOffset;                          // 0x0618(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PlacementEncroachmentBoxExtent;                            // 0x0624(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PlacementTraceScale;                                       // 0x0630(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SnapAlternatePlacementTraceScale;                          // 0x063C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    PlacementRotOffset;                                        // 0x0648(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    PlacementTraceRotOffset;                                   // 0x0654(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    SnappingRotationOffset;                                    // 0x0660(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowAttachToPawn : 1;                                    // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAttachToSaddle : 1;                                  // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlacementTraceIgnorePawns : 1;                            // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequireFreePrimarySnappedStructure : 1;                   // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyAllowPlacementInWater : 1;                            // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePlacingOnGround : 1;                                 // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTakeAnythingAsGround : 1;                                 // 0x066C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFoundation : 1;                                         // 0x066C(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bForceCheckNearbyEnemyFoundation : 1;                      // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFloor : 1;                                              // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceFloorCollisionGroup : 1;                             // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsWall : 1;                                               // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisallowPreventCropsBiomes : 1;                           // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBeRepaired : 1;                                        // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReturnDamageOnHitFromPawn : 1;                            // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventStasis : 1;                                        // 0x066D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowUseFromRidingDino : 1;                               // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFenceFoundation : 1;                                    // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseFenceFoundation : 1;                                   // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOnlyBlockSelfTraceChannel : 1;                         // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWasPlacementSnapped : 1;                                  // 0x066E(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bIsCoreStructure : 1;                                      // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeprecateStructure : 1;                                   // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequiresToBeInsideZoneVolume : 1;                         // 0x066E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowLoadBearing : 1;                                     // 0x066F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsEnvironmentStructure : 1;                               // 0x066F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_TW9K : 4;                                      // 0x066F(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPOnVariantSwitch : 1;                                 // 0x066F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_WNBB[0x4];                                     // 0x0670(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RepairCheckInterval;                                       // 0x0674(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlacementFloorCheckZExtentUp;                              // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RepairPercentPerInterval;                                  // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DecayDestructionPeriod;                                    // 0x0680(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_NRJE[0x4];                                     // 0x0684(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              PreventPlacingOnFloorClasses;                              // 0x0688(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AllowPlacingOnFloorClasses;                                // 0x0698(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                        MyStaticMesh;                                              // 0x06A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        CosmeticVariantStaticMesh;                                 // 0x06B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class USceneComponent*                             MyRootTransform;                                           // 0x06B8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bRequiresPlacementOnStructureFloors : 1;                   // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisablePlacementOnStructureFloors : 1;                    // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyStructureIfFloorDestroyed : 1;                     // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePlacementCollisionCheck : 1;                           // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequiresSnapping : 1;                                     // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSnappingRequiresNearbyFoundation : 1;                     // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSnapRotation : 1;                                    // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowSnapRotationForStructure : 1;                   // 0x06C0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlacementChooseRotation : 1;                              // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequiresPlacingOnWall : 1;                                // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSnapRequiresPlacementOnGround : 1;                        // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSnapOntoSameLocation : 1;                            // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyFoundationIfSnappedToFoundation : 1;                  // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFoundationRequiresGroundTrace : 1;                        // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlacingOnGroundRequiresNoStructure : 1;                   // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTakeGroundNormal : 1;                                     // 0x06C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTakeGroundNormalDirectly : 1;                             // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFinalPlacementDontAdjustForMaxRange : 1;                  // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowStructureColors : 1;                                 // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDebug : 1;                                                // 0x06C2(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUseFadeInEffect : 1;                                      // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsingStructureColors : 1;                                 // 0x06C2(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bPreventDefaultVariant : 1;                                // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsSPlusStructure : 1;                                     // 0x06C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowPickingUpStructureAfterPlacement : 1;                // 0x06C3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisablePickingUpStructureAfterPlacementOnTryMultiUse : 1; // 0x06C3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBlueprintAnimNotifyCustomEvent : 1;                    // 0x06C3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	int                                                TraceIgnoreStructuresWithTypeFlags;                        // 0x06C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUsesHealth : 1;                                           // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreSnappedToOtherFloorStructures : 1;                  // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnforceStructureLinkExactRotation : 1;                    // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceSnappedStructureToGround : 1;                        // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceBlockIK : 1;                                         // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStationaryStructure : 1;                                  // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnorePawns : 1;                                          // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanDemolish : 1;                                          // 0x06C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowPlacingOnOtherTeamStructures : 1;                    // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventPlacementInWater : 1;                              // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowInRegularStructurePreventionZones : 1;               // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontSetStructureCollisionChannels : 1;                    // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventEnemyStructuresNearby : 1;                    // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowEnemyDemolish : 1;                                   // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontActuallySnapJustPlacement : 1;                        // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreMaxStructuresInRange : 1;                           // 0x06C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPaintingUseSkeletalMesh : 1;                              // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesPaintingComponent : 1;                                // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBuildUpon : 1;                                         // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasResetDecayTime : 1;                                    // 0x06CA(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bForceAllowInPreventionVolumes : 1;                        // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceCreateDynamicMaterials : 1;                          // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetInfoFromConsumedItemForPlacedStructure : 1;       // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImmuneToAutoDemolish : 1;                                 // 0x06CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreMaxStructuresInSmallRadius : 1;                     // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowTargetingByCorruptDinos : 1;                         // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPTreatAsFoundationForSnappedStructure : 1;            // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnStructurePickup : 1;                               // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPerInstanceSnapPoints : 1;                                // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSnapToWaterSurface : 1;                                   // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPUpdatedHealth : 1;                                   // 0x06CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_MTGT[0x4];                                     // 0x06CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPrimalStructureSnapPoint>           SnapPoints;                                                // 0x06D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int                                                bTraceCheckOnlyUseStructuresWithTypeFlags;                 // 0x06E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      AllowStructureColorSets[0x6];                              // 0x06E4(0x0006) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OC6W[0x2];                                     // 0x06EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     WaterVolumeCheckPointOffset;                               // 0x06EC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WaterPlacementMinimumWaterHeight;                          // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlacementMaxZDelta;                                        // 0x06FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlacementChooseRotationMaxRangeOverride;                   // 0x0700(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlacementMaxRange;                                         // 0x0704(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxSnapLocRange;                                           // 0x0708(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SnapOverlapCheckRadius;                                    // 0x070C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumFoundationSupport2DBuildDistance;                   // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlacementFloorCheckZExtent;                                // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LastHealthPercentage;                                      // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    TakeGroundNormalRotationOffset;                            // 0x071C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DemolishGiveItemCraftingResourcePercentage;                // 0x0728(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDestroyOnStasisUnlessPrevented : 1;                       // 0x072C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_44E1[0x3];                                     // 0x072D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AllowReplacementByStructureClassType;                      // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PreventReplacementOfStructureClassType;                    // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumHeightAboveWorldGround;                             // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumHeightUnderWorldMaxKillZ;                           // 0x0744(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviewCameraRotation;                                     // 0x0748(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviewCameraPivotOffset;                                  // 0x0754(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDistanceScaleFactor;                          // 0x0760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDefaultZoomMultiplier;                        // 0x0764(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraMaxZoomMultiplier;                            // 0x0768(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReturnDamageAmount;                                        // 0x076C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                StructureRangeTypeFlag;                                    // 0x0770(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LimitMaxStructuresInRangeTypeFlag;                         // 0x0774(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReturnDamageImpulse;                                       // 0x0778(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OXM2[0x4];                                     // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ReturnDamageType;                                          // 0x0780(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ReturnDamageExcludeIncomingTypes;                          // 0x0788(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ReturnDamageOnlyForIncomingTypes;                          // 0x0798(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                OwningPlayerID;                                            // 0x07A8(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XTPI[0x4];                                     // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     OwningPlayerName;                                          // 0x07B0(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame)
	double                                             LastInAllyRangeTime;                                       // 0x07C0(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             PickupAllowedBeforeNetworkTime;                            // 0x07C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              DecayDestructionPeriodMultiplier;                          // 0x07D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TWeakObjectPtr<class APrimalDinoCharacter>         SaddleDino;                                                // 0x07D4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0PPT[0x4];                                     // 0x07DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APrimalDinoCharacter*>                LatchedDinos;                                              // 0x07E0(0x0010) (BlueprintVisible, ZeroConstructor)
	class UMaterialInterface*                          PreviewMaterial;                                           // 0x07F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>            PreviewMaterialInstances;                                  // 0x07F8(0x0010) (ZeroConstructor, Transient)
	struct FName                                       PreviewMaterialColorParamName;                             // 0x0808(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FVector>                             PlacementTraceDirections;                                  // 0x0810(0x0010) (ZeroConstructor, Transient)
	TArray<class APrimalStructure*>                    LinkedStructures;                                          // 0x0820(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<uint32_t>                                   LinkedStructuresID;                                        // 0x0830(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class APrimalStructure*>                    StructuresPlacedOnFloor;                                   // 0x0840(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<class UClass*>                              SnapToStructureTypesToExclude;                             // 0x0850(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              SnapFromStructureTypesToExclude;                           // 0x0860(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               SnapToStructureTagsToExclude;                              // 0x0870(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               SnapFromStructureTagsToExclude;                            // 0x0880(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class APrimalStructure*                            PlacedOnFloorStructure;                                    // 0x0890(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class APrimalStructure*                            PrimarySnappedStructureChild;                              // 0x0898(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class APrimalStructure*                            PrimarySnappedStructureParent;                             // 0x08A0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FString                                     OwnerName;                                                 // 0x08A8(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	int16_t                                            StructureColors[0x6];                                      // 0x08B8(0x000C) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_DK8M[0x4];                                     // 0x08C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       AttachedTo;                                                // 0x08C8(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class APrimalStructureExplosiveTransGPS*           AttachedTransponder;                                       // 0x08D0(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint32_t                                           StructureID;                                               // 0x08D8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint32_t                                           AttachedToDinoID1;                                         // 0x08DC(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              OnlyAllowStructureClassesToAttach;                         // 0x08E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              OnlyAllowStructureClassesFromAttach;                       // 0x08F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_3TB9[0x28];                                    // 0x0900(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          StructureIconMaterial;                                     // 0x0928(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     AdvancedRotationPlacementOffset;                           // 0x0930(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HON1[0x4];                                     // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SpawnEmitter;                                              // 0x0940(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SpawnEmitterLocationOffset;                                // 0x0948(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    SpawnEmitterRotationOffset;                                // 0x0954(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PickupGivesItem;                                           // 0x0960(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExcludeInStructuresRadius;                                 // 0x0968(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0SQ3[0x4];                                     // 0x096C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ExcludeInStructuresRadiusClasses;                          // 0x0970(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_TKLY[0x18];                                    // 0x0980(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStructurePaintingComponent*                 PaintingComponent;                                         // 0x0998(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             PreventBuildStructureReasonStringOverrides;                // 0x09A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     FloatingHudLocTextOffset;                                  // 0x09B0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SI58[0x4];                                     // 0x09BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ForceLimitStructuresInRange;                               // 0x09C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bPreventAttachToSaddle : 1;                                // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePersonalStructureOwnership : 1;                      // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideAllowStructureAccess : 1;                       // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverideDemolish : 1;                                    // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnDemolish : 1;                                      // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideAllowSnappingWith : 1;                          // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideAllowSnappingWithButAlsoCallSuper : 1;          // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnLinkedStructureDestroyed : 1;                      // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTribeGroupStructureRank : 1;                           // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceBlockStationaryTraces : 1;                           // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachToStaticMeshSocket : 1;                             // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachToStaticMeshSocketRotation : 1;                     // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceGroundForFoundation : 1;                             // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideSnappedToTransform : 1;                         // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideSnappedFromTransform : 1;                       // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverridePlacementRotation : 1;                          // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableStructureOnElectricStorm : 1;                      // 0x09C6(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bNoCollision : 1;                                          // 0x09C6(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_BIO4 : 1;                                      // 0x09C6(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsPreviewStructure : 1;                                   // 0x09C6(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bStructureUseAltCollisionChannel : 1;                      // 0x09C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDemolishJustDestroy : 1;                                  // 0x09C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHighPriorityDemolish : 1;                                 // 0x09C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableSnapStructure : 1;                                 // 0x09C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTriggerBPUnstasis : 1;                                    // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBlueprintDrawHUD : 1;                                     // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBlueprintDrawPreviewHUD : 1;                              // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesWorldSpaceMaterial : 1;                               // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceIgnoreStationaryObjectTrace : 1;                     // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowNearSupplyCrateSpawns : 1;                      // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPPostSetStructureCollisionChannels : 1;                  // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPickupGiveItemRequiresAccess : 1;                         // 0x09C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowPickupGiveItem : 1;                             // 0x09C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAttachedChildStructures : 1;                       // 0x09C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BAN6[0x3];                                     // 0x09C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PlacementMaterialForwardDirIndex;                          // 0x09CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bPreventPreviewIfWeaponPlaced : 1;                         // 0x09D0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStructuresInRangeTypeFlagUseAltCollisionChannel : 1;      // 0x09D0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EXPD : 1;                                      // 0x09D0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIgnoredByTargeting : 1;                                   // 0x09D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_DU3K[0x3];                                     // 0x09D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForcePreventPlacingInOfflineRaidStructuresRadius;          // 0x09D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AttachToStaticMeshSocketNameBase;                          // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      StructureHarvestingComponent;                              // 0x09E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UPrimalHarvestingComponent*                  MyStructureHarvestingComponent;                            // 0x09E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3FTA[0x10];                                    // 0x09F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ItemsUseAlternateActorClassAttachment;                     // 0x0A00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UnstasisAutoDestroyAfterTime;                              // 0x0A08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      TribeGroupStructureRank;                                   // 0x0A0C(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KVBF[0x3];                                     // 0x0A0D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              PreventSaddleDinoClasses;                                  // 0x0A10(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AllowSaddleDinoClasses;                                    // 0x0A20(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       PlaceOnWallUseStaticMeshTag;                               // 0x0A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SnapStructureClass;                                        // 0x0A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DemolishActivationTime;                                    // 0x0A40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     GroundEncroachmentCheckLocationOffset;                     // 0x0A44(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                StructureMinAllowedVersion;                                // 0x0A50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SavedStructureMinAllowedVersion;                           // 0x0A54(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              OverrideEnemyFoundationPreventionRadius;                   // 0x0A58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OverridePVPEnemyFoundationPreventionRadius;                // 0x0A5C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExpandEnemyFoundationPreventionRadius;                     // 0x0A60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                BedID;                                                     // 0x0A64(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ForceAllowWallAttachmentClasses;                           // 0x0A68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              LimitMaxStructuresInRangeRadius;                           // 0x0A78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CWZP[0x4];                                     // 0x0A7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              FastDecayLinkedStructureClasses;                           // 0x0A80(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PlacementMaxZAbovePlayerHeight;                            // 0x0A90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E1A5[0xC];                                     // 0x0A94(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USceneComponent*>                     OverrideTargetComponents;                                  // 0x0AA0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	float                                              OverrideApproachRadius;                                    // 0x0AB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OALU[0x4];                                     // 0x0AB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMissionType*                                OwnerMission;                                              // 0x0AB8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bBPCheckItemRequiementsToBuild : 1;                        // 0x0AC0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EH7G[0x3];                                     // 0x0AC1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FItemNetID                                  PlaceUsingItemID;                                          // 0x0AC4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AQXD[0x4];                                     // 0x0ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               CustomDataModifiedOnStructurePickup;                       // 0x0AD0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bUseBPGetAggroDinoOnDamageSettings : 1;                    // 0x0AE0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_CM08 : 1;                                      // 0x0AE0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanAttachToExosuit : 1;                                   // 0x0AE0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCanBeStoredByExosuit : 1;                                 // 0x0AE0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bStructureIgnoreDying : 1;                                 // 0x0AE0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bClientReceivedStructuresPlacedOnFloor : 1;                // 0x0AE0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bHasAnyStructuresPlacedOnFloor : 1;                        // 0x0AE0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseBPPreventCharacterBasing : 1;                          // 0x0AE0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_RA4N[0x7];                                     // 0x0AE1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructure");
		return ptr;
	}



	void UpdateTribeGroupStructureRank(unsigned char NewRank);
	void UpdateStencilValuesWithStenilDepth(TEnumAsByte<ShooterGame_EStencilAlliance> InAlliance);
	void UpdateStencilValues();
	void UpdatedHealth(bool bDoReplication);
	bool TickPlacingStructure(class APrimalStructurePlacer* PlacerActor, float DeltaTime);
	void StartRepair();
	bool SetVariant(int VariantIndex, bool bForceSet);
	void SetupDynamicMeshMaterials(class UMeshComponent* MeshComp);
	void SetStructureColorValue(int ColorRegionIndex, int SetVal);
	void SetStaticMobility();
	void SetPreventSaving(bool bPrevent);
	void SetHarvestingActive(bool bActive, bool bOverrideBaseHealth, float BaseHarvestHealthMult, bool bAssignToTribe, int AssignedToTribeID);
	void SetEnabledPrimarySnappedStructureParent(bool bEnabled);
	void SetEnabled(bool bEnabled);
	void SetDynamicMobility();
	void SetContainerActive(bool bNewActive);
	void SetBoundsScale(float NewScale);
	void SetBedEnabled(bool bEnabled);
	bool RefreshStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, const struct FName& BoneName, bool bFlipped);
	TArray<class APrimalStructure*> PreviewCulledStructures(TArray<class APrimalStructure*>* InOutStructuresOnFloor);
	void PrepareAsPlacementPreview();
	void PickupStructureAndDependingLinkedStructures(class APlayerController* ForPC);
	class UPrimalItem* PickupStructure(bool bIsQuickPickup, class AShooterPlayerController* PC);
	void OverrideOwner(class AActor* NewOwner, bool ForceOnlyRelevantToOwner);
	void OnStructurePlacementRefreshed();
	void OnRep_StructureColors();
	void OnRep_CurrentVariant();
	void NonPlayerFinalStructurePlacement(int PlacementTargetingTeam, int PlacementOwningPlayerID, const struct FString& PlacementOwningPlayerName, class APrimalStructure* ForcePrimaryParent);
	void NetUpdateTeamAndOwnerName(int NewTeam, const struct FString& NewOwnerName);
	void NetUpdateOriginalOwnerNameAndID(int NewOriginalOwnerID, const struct FString& NewOriginalOwnerName);
	void NetSpawnCoreStructureDeathActor();
	void NetSetIgnoreDestructionEffects(bool bNewIgnoreDestructionEffects);
	void NetResetClientReceivedStructuersPlacedOnFloors();
	void NetDoSpawnEffects();
	void MultiSetPickupAllowedBeforeNetworkTime(double NewTime);
	void MultiRefreshVariantSettings(int NewVariantIndex);
	void MultiAddStructuresPlacedOnFloor(class APrimalStructure* Structure);
	void LinkStructure(class APrimalStructure* NewLinkedStructure);
	bool IsValidSnapPointTo(class APrimalStructure* childStructure, int MySnapPointToIndex);
	bool IsValidSnapPointFrom(class APrimalStructure* ParentStructure, int MySnapPointFromIndex);
	bool IsValidForSnappingFrom(class APrimalStructure* OtherStructure);
	bool IsRepairAllowed();
	bool STATIC_IsPointObstructedByWorldGeometry(class UWorld* ForWorld, const struct FVector& ThePoint, bool bIgnoreTerrain, bool bOnlyCheckTerrain, bool bIgnoreFoliage, float OBSTRUCTION_CHECK_DIST);
	bool STATIC_IsPointNearSupplyCrateSpawn(class UWorld* TheWorld, const struct FVector& AtPoint);
	bool IsPinLocked();
	bool IsOnlyLinkedToFastDecayStructures();
	bool IsLinkedToWaterOrPowerSource();
	bool IsAllowedToDemolish(class AShooterPlayerController* ForPC);
	int IsAllowedToBuild(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, struct FPlacementData* OutPlacementData, bool bDontAdjustForMaxRange, const struct FRotator& PlayerViewRotation, bool bFinalPlacement);
	bool IsActiveEventStructure();
	void STATIC_GetStructuresInRange(class UWorld* TheWorld, const struct FVector& AtLocation, float WithinRange, class UClass* StructureClass, TArray<class APrimalStructure*>* StructuresOut, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure);
	int GetStructureColorValue(int ColorRegionIndex);
	struct FLinearColor GetStructureColor(int ColorRegionIndex);
	struct FName GetSnapPointName(int SnapPointIndex);
	int GetPinCode();
	int STATIC_GetNumStructuresInRangeStructureTypeFlag(class UWorld* TheWorld, const struct FVector& AtLocation, int TypeFlag, float WithinRange, bool bCheckBPCountStructureInRange, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure, bool bCheckWithAltCollisionChannel);
	void STATIC_GetNearbyStructuresOfClass(class UWorld* World, class UClass* StructureClass, const struct FVector& Location, float Range, TArray<class APrimalStructure*>* Structures);
	struct FStructureVariant GetDefaultVariant();
	class ADayCycleManager* GetDayCycleManager();
	class APrimalStructure* STATIC_GetClosestStructureToPoint(class UWorld* ForWorld, const struct FVector& AtPoint, float OverlapRadius);
	class UClass* GetBedFilterClass();
	class UStaticMeshComponent* GetAdditionalComponentForDyePreview();
	void ForceReplicateLinkedStructures();
	bool FinalStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, const struct FName& BoneName, bool bFlipped);
	void DisableStructurePickup();
	void DestroyStructuresPlacedOnFloor();
	void Demolish(class APlayerController* ForPC, class AActor* DamageCauser);
	void DelayedDisableSnapParent();
	void CreateDynamicMaterials(class UMeshComponent* ForceCreateForComponent);
	void ClientUpdateLinkedStructures(TArray<uint32_t> NewLinkedStructures);
	void ClearStructureLinks(class APlayerController* ForPC);
	void ClearCustomColors();
	bool CanPickupStructureFromRecentPlacement();
	bool CanBeStoredByExosuit(class AShooterPlayerController* ForPC);
	bool CanAttachToExosuit(class AShooterPlayerController* ForPC);
	void CallDrawHUD(class AShooterHUD* HUD);
	void CallDrawFloatingHUD(class AShooterHUD* HUD);
	bool BPUseCountStructureInRange();
	void BPUpdatedHealth(bool bDoReplication);
	void BPUnstasis();
	void BPTriggerStasisEvent();
	bool BPTreatAsFoundationForSnappedStructure(class APrimalStructure* OtherStructure, const struct FPlacementData& WithPlacementData);
	void BPStructurePreGetMultiUseEntries(class APlayerController* ForPC);
	void BPRefreshedStructureColors();
	bool BPPreventUsingAsFloorForStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* StructureToPlaceOnMe);
	bool BPPreventStasis();
	bool BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime, class APrimalStructure* FromStructure);
	bool BPPreventPlacingStructureOntoMe(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FHitResult& ForHitResult);
	bool BPPreventPlacingOnFloorStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* FloorStructure);
	bool BPPreventPlacementOnPawn(class APlayerController* PC, class APrimalCharacter* forCharacter, const struct FName& ForBone);
	bool BPPreventCharacterBasing(class AActor* OtherActor, class UPrimitiveComponent* BasedOnComponent);
	void BPPostSetStructureCollisionChannels();
	void BPPostLoadedFromSaveGame();
	void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void BPPlacedStructure(class APlayerController* ForPC);
	struct FVector BPOverrideTargetLocation(const struct FVector& attackPos);
	bool BPOverrideSnappedToTransform(class APrimalStructure* childStructure, int ChildSnapFromIndex, const struct FName& ChildSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int SnapToIndex, const struct FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int* bForceInvalidateSnap);
	bool BPOverrideSnappedFromTransform(class APrimalStructure* ParentStructure, int ParentSnapFromIndex, const struct FName& ParentSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int SnapToIndex, const struct FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int* bForceInvalidateSnap);
	struct FRotator BPOverridePlacementRotation(const struct FVector& ViewPos, const struct FRotator& ViewRot);
	bool BPOverrideDemolish(class AShooterPlayerController* ForPC);
	struct FString BPOverrideCantBuildReasonString(int CantBuildReason);
	bool BPOverrideAllowStructureAccess(class AShooterPlayerController* ForPC, bool bIsAccessAllowed, bool bForInventoryOnly);
	void BPOnVariantSwitch(int NewVariantIndex);
	void BPOnStructurePickup(class APlayerController* PlayerController, class UClass* ItemType, class UPrimalItem* NewlyPickedUpItem, bool bIsQuickPickup);
	void BPOnLinkedStructureDestroyed(class APrimalStructure* DestroyedStructure);
	void BPOnDemolish(class APlayerController* ForPC, class AActor* DamageCauser);
	void BPNotifyAmmoBoxReloadedStructure(class APrimalStructure* ReloadedStructure);
	void BPNetRefreshStructureColors(bool bUseColors);
	int BPIsAllowedToBuildEx(const struct FPlacementData& OutPlacementData, int CurrentAllowedReason, class APlayerController* PC, bool bFinalPlacement, bool bChoosingRotation);
	int BPIsAllowedToBuild(const struct FPlacementData& OutPlacementData, int CurrentAllowedReason);
	bool BPImpactEffect(const struct FHitResult& HitRes, const struct FVector& ShootDirection);
	void BPHandleStructureEnabled(bool bEnabled);
	bool BPHandleBedFastTravel(class AShooterPlayerController* ForPC, class APrimalStructure* ToBed);
	int STATIC_BPGetStructureID(class APrimalStructure* PrimalStructure);
	TArray<struct FPrimalStructureSnapPoint> BPGetSnapPoints();
	void BPGetInfoFromConsumedItemForPlacedStructure(class UPrimalItem* ItemToConsumed);
	class APrimalStructure* STATIC_BPGetFromID(class UWorld* World, int TheStructureID);
	float BPGetAmmoBoxReloadPercent();
	void BPGetAllLinkedStructures(TArray<class APrimalStructure*>* OutLinkedStructures);
	void BPGetAggroDinoOnDamageSettings(TArray<struct FName>* AggroDinoClassesCustomTags, float* AggroDinoClassesRange);
	bool BPForceConsideredEnemyFoundation(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FVector& TestAtLocation);
	void BPDefaultProcessEditText(class AShooterPlayerController* ForPC, const struct FString& TextToUse, bool checkedBox);
	int BPCheckItemRequiementsToBuild(class UPrimalItem* ItemToConsumed);
	void BPBeginPreview();
	void BPApplyCustomDurabilityOnPickup(class UPrimalItem* pickedup);
	bool BPAllowSwitchToVariant(int VariantIndex);
	bool BPAllowSnapRotationForStructure(int ThisSnapPointIndex, const struct FName& ThisSnapPointName, class APrimalStructure* OtherStructure, int OtherStructureSnapPointIndex, const struct FName& OtherStructureSnapPointName);
	bool BPAllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC);
	bool BPAllowPickupGiveItem(class APlayerController* ForPC);
	void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
	void BlueprintDrawPreviewHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
	void BlueprintDrawHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
	void BlueprintAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void ApplyPrimalItemSettingsToStructure(class UMeshComponent* meshToColorize, class UPrimalItem* AssociatedPrimalItem);
	bool AllowStructureAccess(class APlayerController* ForPC);
	bool AllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC);
};

// Class ShooterGame.PrimalStructureItemContainer
// 0x0328 (FullSize[0x0E10] - InheritedSize[0x0AE8])
class APrimalStructureItemContainer : public APrimalStructure
{
public:
	class UPrimalInventoryComponent*                   MyInventoryComponent;                                      // 0x0AE8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bAdjustDamageAsPlayerWithEquipmenet : 1;                   // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyConsumeDurabilityOnEquipmentForEnemies : 1;           // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoActivateContainer : 1;                                // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanToggleActivation : 1;                                  // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoActivateWhenFueled : 1;                               // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowCustomName : 1;                                      // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bContainerActivated : 1;                                   // 0x0AF0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bOnlyUseSpoilingMultipliersIfActivated : 1;                // 0x0AF0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCraftingSubstractConnectedWater : 1;                      // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceNoPinLocking : 1;                                    // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerBPNotifyInventoryItemChanges : 1;                   // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClientBPNotifyInventoryItemChanges : 1;                   // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayActivationOnInventoryUI : 1;                       // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetFuelConsumptionMultiplier : 1;                    // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventToggleActivation : 1;                              // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerBPNotifyInventoryItemChangesUseQuantity : 1;        // 0x0AF1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStartedUnderwater : 1;                                    // 0x0AF2(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCheckStartedUnderwater : 1;                               // 0x0AF2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayActivationOnInventoryUISecondary : 1;              // 0x0AF2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayActivationOnInventoryUITertiary : 1;               // 0x0AF2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFuelAllowActivationWhenNoPower : 1;                       // 0x0AF2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPoweredAllowBattery : 1;                                  // 0x0AF2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPoweredUsingBattery : 1;                                  // 0x0AF2(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bPoweredHasBattery : 1;                                    // 0x0AF2(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bPoweredAllowSolar : 1;                                    // 0x0AF3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPoweredUsingSolar : 1;                                    // 0x0AF3(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	float                                              SolarRefreshIntervalMin;                                   // 0x0AF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SolarRefreshIntervalMax;                                   // 0x0AF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SolarRefreshInterval;                                      // 0x0AFC(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastSolarRefreshTime;                                      // 0x0B00(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      BatteryClassOverride;                                      // 0x0B08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                PoweredOverrideCounter;                                    // 0x0B10(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              NotifyNearbyPowerGeneratorDistance;                        // 0x0B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NotifyNearbyPowerGeneratorOctreeGroup;                     // 0x0B18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UseBPApplyPinCode : 1;                                     // 0x0B1C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_3IFL[0x3];                                     // 0x0B1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  ActivateMaterials;                                         // 0x0B20(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>                  InActivateMaterials;                                       // 0x0B30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FItemToDisplayInStructureTooltip>    ItemsToDisplayInStructureTooltip;                          // 0x0B40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UChildActorComponent*                        MyChildEmitterSpawnable;                                   // 0x0B50(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsLocked : 1;                                             // 0x0B58(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsPinLocked : 1;                                          // 0x0B58(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bHasFuel : 1;                                              // 0x0B58(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsUnderwater : 1;                                         // 0x0B58(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      UnknownData_54RI[0x7];                                     // 0x0B59(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     BoxName;                                                   // 0x0B60(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame)
	int                                                MaxBoxNameLength;                                          // 0x0B70(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableActivationUnderwater : 1;                          // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventAutoActivateWhenConnectedToWater : 1;         // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsLocking : 1;                                      // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsPinLocking : 1;                                   // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDropInventoryOnDestruction : 1;                           // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyWhenAllItemsRemoved : 1;                           // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDrinkingWater : 1;                                        // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPoweredWaterSourceWhenActive : 1;                         // 0x0B74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bActiveRequiresPower : 1;                                  // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsPowerJunction : 1;                                      // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoActivateIfPowered : 1;                                // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLastToggleActivated : 1;                                  // 0x0B75(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bSupportsPinActivation : 1;                                // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsPowered : 1;                                            // 0x0B75(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bOnlyAllowTeamActivation : 1;                              // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateItemFuelClass : 1;                               // 0x0B75(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOpenSceneAction : 1;                                   // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GBTU : 1;                                      // 0x0B76(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPActivated : 1;                                       // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanBeActivated : 1;                                  // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanBeActivatedByPlayer : 1;                          // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOnContainerActiveHealthDecrease : 1;                    // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPIsValidWaterSourceForPipe : 1;                          // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAutoActivateWhenNoPower : 1;                         // 0x0B76(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoActivateWhenNoPower : 1;                              // 0x0B77(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	float                                              InsulationRange;                                           // 0x0B78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperThermiaInsulation;                                    // 0x0B7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypoThermiaInsulation;                                     // 0x0B80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ContainerActiveDecreaseHealthSpeed;                        // 0x0B84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FuelConsumptionIntervalsMultiplier;                        // 0x0B88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DropInventoryOnDestructionLifespan;                        // 0x0B8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     ActivateContainerString;                                   // 0x0B90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DeactivateContainerString;                                 // 0x0BA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      ContainerActiveHealthDecreaseDamageTypePassive;            // 0x0BB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ActiveRequiresFuelItems;                                   // 0x0BB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      FuelItemsConsumeInterval;                                  // 0x0BC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              FuelItemsConsumedGiveItems;                                // 0x0BD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	double                                             NetDestructionTime;                                        // 0x0BE8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	uint32_t                                           CurrentPinCode;                                            // 0x0BF0(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AXQ9[0x4];                                     // 0x0BF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             CurrentFuelTimeCache;                                      // 0x0BF8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastCheckedFuelTime;                                       // 0x0C00(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                LinkedPowerJunctionStructureID;                            // 0x0C08(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	int                                                CurrentItemCount;                                          // 0x0C0C(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                MaxItemCount;                                              // 0x0C10(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalStructure>             LinkedPowerJunctionStructure;                              // 0x0C14(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OF1N[0x4];                                     // 0x0C1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      NextConsumeFuelGiveItemType;                               // 0x0C20(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4LGZ[0x8];                                     // 0x0C28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastActiveStateChangeTime;                                 // 0x0C30(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R7FX[0x8];                                     // 0x0C38(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPrimalMapMarkerEntryData                   MapMarkerLocationInfo;                                     // 0x0C40(0x0028) (Net, Transient)
	float                                              BasedCharacterDamageInterval;                              // 0x0C68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BasedCharacterDamageAmount;                                // 0x0C6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      BasedCharacterDamageType;                                  // 0x0C70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EngramRequirementClassOverride;                            // 0x0C78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                      LinkedBlueprintSpawnActorPoint;                            // 0x0C80(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PoweredNearbyStructureTemplate;                            // 0x0C88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoweredNearbyStructureRange;                               // 0x0C90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BYKX[0x4];                                     // 0x0C94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystem*                             JunctionLinkParticleTemplate;                              // 0x0C98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      UISceneTemplate;                                           // 0x0CA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     OpenSceneActionName;                                       // 0x0CA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DisabledOpenSceneActionName;                               // 0x0CB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      RequiresItemForOpenSceneAction;                            // 0x0CC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bRequiresItemExactClass : 1;                               // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyWhenAllItemsRemovedExceptDefaults : 1;             // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInventoryForcePreventRemoteAddItems : 1;                  // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInventoryForcePreventItemAppends : 1;                     // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_R4XR : 1;                                      // 0x0CD0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseDeathCacheCharacterID : 1;                             // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideAutoActivateToggle : 1;                               // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCooldownOnTransferAll : 1;                             // 0x0CD0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmmoContainerBuff : 1;                                 // 0x0CD1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OFYN[0x6];                                     // 0x0CD2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             DeathCacheCreationTime;                                    // 0x0CD8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8KCA[0x18];                                    // 0x0CE0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystemComponent*                    JunctionLinkCableParticle;                                 // 0x0CF8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	struct FVector                                     JunctionCableBeamOffsetStart;                              // 0x0D00(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     JunctionCableBeamOffsetEnd;                                // 0x0D0C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ContainerActivatedSound;                                   // 0x0D18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ContainerDeactivatedSound;                                 // 0x0D20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DemolishInventoryDepositClass;                             // 0x0D28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FuelItemTrueClass;                                         // 0x0D30(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      ReplicatedFuelItemClass;                                   // 0x0D38(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int16_t                                            ReplicatedFuelItemColorIndex;                              // 0x0D40(0x0002) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3QDS[0x6];                                     // 0x0D42(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystem*                             DefaultParticleTemplate;                                   // 0x0D48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultAudioTemplate;                                      // 0x0D50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              OverrideParticleTemplateItemClasses;                       // 0x0D58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystem*>                     OverrideParticleTemplates;                                 // 0x0D68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                          OverrideAudioTemplates;                                    // 0x0D78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxActivationDistance;                                     // 0x0D88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6LOS[0x4];                                     // 0x0D8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     BoxNamePrefaceString;                                      // 0x0D90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      TribeGroupInventoryRank;                                   // 0x0DA0(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPGetQuantityOfItemWithoutCheckingInventory : 1;       // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSetPlayerConstructor : 1;                            // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateLastActivatedTime : 1;                           // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsAmmoContainer : 1;                                      // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerBPNotifyInventoryItemChangesUseSwapped : 1;         // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPNotifyRemoteViewerChange : 1;                           // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideDescriptiveName : 1;                         // 0x0DA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BQ48[0x6];                                     // 0x0DA2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      FuelConsumeDecreaseDurabilityAmounts;                      // 0x0DA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              RandomFuelUpdateTimeMin;                                   // 0x0DB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomFuelUpdateTimeMax;                                   // 0x0DBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastDeactivatedTime;                                       // 0x0DC0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastActivatedTime;                                         // 0x0DC8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              ValidCraftingResourceMaxDurability;                        // 0x0DD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ActivationCooldownTime;                                    // 0x0DD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UsablePriority;                                            // 0x0DD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y30V[0x4];                                     // 0x0DDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint64_t                                           DeathCacheCharacterID;                                     // 0x0DE0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    LocalCorpseEmitter;                                        // 0x0DE8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	float                                              SinglePlayerFuelConsumptionIntervalsMultiplier;            // 0x0DF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoweredBatteryDurabilityToDecreasePerSecond;               // 0x0DF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DropInventoryDepositTraceDistance;                         // 0x0DF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9LTL[0x4];                                     // 0x0DFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class AShooterPlayerController>> ValidatedByPinCodePlayerControllers;                       // 0x0E00(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer");
		return ptr;
	}



	bool VerifyPinCode(int pinCode);
	void UpdateTribeGroupInventoryRank(unsigned char NewRank);
	void UpdateSolarPower();
	void UpdateContainerActiveHealthDecrease();
	void TryActivation();
	void SetPoweredOverrideCounter(int NewPoweredOverrideCounter);
	void RefreshPowerJunctionLink();
	void RefreshInventoryItemCounts();
	void PowerGeneratorBuiltNearbyPoweredStructure(class APrimalStructureItemContainer* PoweredStructure);
	void OnContainerRenamed();
	void NetUpdateLocation(const struct FVector& NewLocation);
	void NetUpdateBoxName(const struct FString& NewName);
	void NetSetContainerActive(bool bSetActive, class UClass* NetReplicatedFuelItemClass, int16_t NetReplicatedFuelItemColorIndex);
	void MovePowerJunctionLink();
	bool IsValidForDinoFeedingContainer(class APrimalDinoCharacter* ForDino);
	bool IsValidatedPinCodePlayerController(class APlayerController* ForPC);
	bool IsPlayerControllerInPinCodeValidationList(class APlayerController* PlayerController);
	bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
	int GetDeathCacheCharacterID();
	void EnableActive();
	bool CanBeActivated();
	void BPSetPlayerConstructor(class APlayerController* PC);
	void BPRename(const struct FString& NewName);
	void BPPreGetMultiUseEntries(class APlayerController* ForPC);
	struct FString BPOverrideDescriptiveName();
	void BPOnContainerActiveHealthDecrease();
	void BPNotifyRemoteViewerChange(bool bOpened);
	void BPNotifyPowerChanged();
	void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem);
	bool BPIsValidWaterSourceForPipe(class APrimalStructureWaterPipe* ForWaterPipe);
	int BPGetQuantityOfItemWithoutCheckingInventory(class UClass* ItemToCheckFor);
	float BPGetFuelConsumptionMultiplier();
	void BPContainerDeactivated();
	void BPContainerActivated();
	bool BPCanBeActivatedByPlayer(class AShooterPlayerController* PC);
	bool BPCanBeActivated();
	bool BPApplyPinCode(class AShooterPlayerController* ForPC, int appledPinCode, bool bIsSetting, int TheCustomIndex);
	bool AllowToggleActivation(class AShooterPlayerController* ForPC);
	int AddToValidatedByPinCodePlayerControllers(class AShooterPlayerController* ForPC);
};

// Class ShooterGame.MissionDispatcher
// 0x00C0 (FullSize[0x0ED0] - InheritedSize[0x0E10])
class AMissionDispatcher : public APrimalStructureItemContainer
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0E10(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    ParticleSystemComponent;                                   // 0x0E18(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UPrimalInventoryComponent*                   TheInventoryComponent;                                     // 0x0E20(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                              MissionActors;                                             // 0x0E28(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              MissionTypes;                                              // 0x0E38(0x0010) (Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization)
	int                                                AutoStartMissionTypesIndex;                                // 0x0E48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EMissionDispatcherTriggerMode> MissionDispatcherTriggerMode;                              // 0x0E4C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_OL2V[0x3];                                     // 0x0E4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               AdditionalMissionTriggerKeys;                              // 0x0E50(0x0010) (Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization)
	unsigned char                                      bAllowConcurrentMissions : 1;                              // 0x0E60(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAllowJoinMissionInProgress : 1;                           // 0x0E60(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bForceStartMission : 1;                                    // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPCanSpawnMission : 1;                                 // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPGetMissionStartLocation : 1;                         // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPOnMissionStarted : 1;                                // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPActivateMissionActors : 1;                           // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPDeactivateMissionActors : 1;                         // 0x0E60(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPOnRunningMissionDeactivated : 1;                     // 0x0E61(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPOverrideMultiUseMissionList : 1;                     // 0x0E61(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bParticleSystemActiveOnlyWhenMissionNotRunning : 1;        // 0x0E61(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseMissionMetaTags : 1;                                   // 0x0E61(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_HA9G[0x6];                                     // 0x0E62(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMissionType*                                RunningMission;                                            // 0x0E68(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MaxDistanceAllowToStartMission;                            // 0x0E70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XE6N[0x5C];                                    // 0x0E74(0x005C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionDispatcher");
		return ptr;
	}



	class AMissionType* StartMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, struct FString* OutClientFailureReason);
	void OnRunningMissionDeactivated(class AMissionType* Mission);
	void MultiSetParticleSystemActive(bool bIsActive);
	void MultiDeactivateMissionActors();
	void MultiActivateMissionActors();
	bool IsValidDispatcherForMissionType(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
	int GetFallbackSeed(class UClass* ForMission, bool bRemoveSeed);
	void GenerateFallbackSeeds();
	void ClearFallbackSeeds(class UClass* OptionalForMission);
	TArray<class UClass*> BPOverrideMultiUseMissionList(class APlayerController* ForPC, class AShooterCharacter* StartingCharacter);
	void BPOnRunningMissionDeactivated(class AMissionType* Mission);
	void BPOnMissionStarted(class AMissionType* NewMission, class AShooterCharacter* StartingCharacter);
	void BPOnMissionFailToStart(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
	struct FVector BPGetMissionStartLocation(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
	void BPDeactivateMissionActors();
	bool BPCanSpawnMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
	void BPActivateMissionActors();
	void AddFallbackSeed(class UClass* ForMission, int Seed, int MaxNumberOfFallbackSeeds);
};

// Class ShooterGame.MissionType
// 0x0648 (FullSize[0x0AB8] - InheritedSize[0x0470])
class AMissionType : public AActor
{
public:
	class USceneComponent*                             MissionRoot;                                               // 0x0470(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UPrimalInventoryComponent*                   MissionInventory;                                          // 0x0478(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                MissionVersion;                                            // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_YIHU[0x4];                                     // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               PrereqMissionTags;                                         // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FName>                               PreventsStargingMissionsOfTags;                            // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FName>                               BuffTagsThatPreventMission;                                // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<class UClass*>                              UnlockPrequisites;                                         // 0x04B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<class UClass*>                              PrereqMissionTypes;                                        // 0x04C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	float                                              MissionTimeOfDayUnlockTime;                                // 0x04D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              MissionTimeOfDayLockTime;                                  // 0x04DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TEnumAsByte<ShooterGame_EMissionDispatchMode>      DispatchMode;                                              // 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_RVR0[0x3];                                     // 0x04E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MissionDispatcherMaxDistance;                              // 0x04E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              MissionWildDinoOutgoingDamageScale;                        // 0x04E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MissionWildDinoIncomingDamageScale;                        // 0x04EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxPlayerCount;                                            // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                MaxDinosPerPlayerAllowedOnMission;                         // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalMissionCooldown;                                     // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              PerPlayerMissionCooldown;                                  // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                TargetPlayerLevel;                                         // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                MinPlayerLevel;                                            // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                MaxPlayerLevel;                                            // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bSupportsMissionTimeOfDayLocking : 1;                      // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyAllowMountsOnMission : 1;                             // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTreatPlayerLevelRangeAsHardCap : 1;                       // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPStaticIsPlayerEligibleForMission : 1;                // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoSendMissionCompleteNotification : 1;                  // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoSendMissionCompleteAlert : 1;                         // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoRewardLootOnMissionComplete : 1;                      // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoRewardXPOnMissionComplete : 1;                        // 0x050C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPGetExtraLocalMissionIndicators : 1;                  // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMissionPreventsCryoDeploy : 1;                            // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMissionPreventsMekDeploy : 1;                             // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMissionPreventsDinoSpawner : 1;                           // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMissionPreventsFlyers : 1;                                // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMissionPreventsVehicle : 1;                               // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanRideMissionDino : 1;                              // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisabledOnXboxSinglePlayer : 1;                           // 0x050D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisabledOnPS4SinglePlayer : 1;                            // 0x050E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QTNK[0x1];                                     // 0x050F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MissionDisplayName;                                        // 0x0510(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MissionDescription;                                        // 0x0520(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MissionSuccessMessage;                                     // 0x0530(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                MissionSuccessMessageColor;                                // 0x0540(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	struct FString                                     MissionFailedMessage;                                      // 0x0550(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                MissionFailedMessageColor;                                 // 0x0560(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	struct FString                                     MissionAlertTitle;                                         // 0x0570(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MissionInitiatedString;                                    // 0x0580(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              MissionCompleteAlertDisplayTime;                           // 0x0590(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_J7L9[0x4];                                     // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  MissionIcon;                                               // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	class USoundBase*                                  CombatMusicOverride;                                       // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TArray<struct FLootTableEntry>                     RewardLootTable;                                           // 0x05A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	int                                                RewardItemCount;                                           // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              RewardXPRatio;                                             // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                FirstTimeCompletionHexagonRewardBonus;                     // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                FirstTimeCompletionHexagonRewardOverride;                  // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	int                                                HexagonsOnCompletion;                                      // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	bool                                               bDivideHexogonsOnCompletion;                               // 0x05CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	bool                                               bAutoRewardFromCustomItemSets;                             // 0x05CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	bool                                               bRollExtraLootSetsPerPlayer;                               // 0x05CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_N9Q9[0x1];                                     // 0x05CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinimumItemSetGenerationRolls;                             // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	bool                                               bEqualRewardsToAllParticipants;                            // 0x05D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_5B7C[0x3];                                     // 0x05D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GenerateItemSetsQualityMultiplierMin;                      // 0x05D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              GenerateItemSetsQualityMultiplierMax;                      // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              MinItemSets;                                               // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              MaxItemSets;                                               // 0x05E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              NumItemSetsPower;                                          // 0x05E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bSetsRandomWithoutReplacement : 1;                         // 0x05EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_QCN2[0x3];                                     // 0x05ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupplyCrateItemSet>                 CustomItemSets;                                            // 0x05F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization)
	unsigned char                                      bUseCustomMissionsUIRewardsLabelText : 1;                  // 0x0600(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_05Z6[0x7];                                     // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CustomMissionsUIRewardsLabelText;                          // 0x0608(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	struct FName                                       InitialMissionPhase;                                       // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TArray<struct FMissionPhase>                       Phases;                                                    // 0x0620(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FMissionPhaseData>                   PhaseData;                                                 // 0x0630(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	class UClass*                                      MissionInventoryTemplate;                                  // 0x0640(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	class UClass*                                      LeaderboardType;                                           // 0x0648(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TArray<struct FLeaderboardRow>                     DefaultLeaderboardRows;                                    // 0x0650(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FMissionWorldBuffData>               SuccessWorldBuffs;                                         // 0x0660(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FMissionWorldBuffData>               FailureWorldBuffs;                                         // 0x0670(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	TArray<struct FName>                               DisableTekArmorBuffs;                                      // 0x0680(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	unsigned char                                      bAlwaysCreateMissionInventory : 1;                         // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoUpdateRequirements : 1;                               // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoUpdateWorldIndicators : 1;                            // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUsePerPlayerWorldIndicators : 1;                          // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUsePerPlayerPhaseRequirements : 1;                        // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoDeactivateMissionBuff : 1;                            // 0x0690(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bMissionWeaponsHaveInfiniteAmmo : 1;                       // 0x0690(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseDinoEvents : 1;                                        // 0x0690(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bDestroyMissionDinosOnDeactivate : 1;                      // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAllowHarvestingMissionDinos : 1;                          // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUsePlayerEvents : 1;                                      // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseInventoryEvents : 1;                                   // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseTriggerEvents : 1;                                     // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseStructureEvents : 1;                                   // 0x0691(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPTryCompletePhase : 1;                                // 0x0691(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPGenerateMissionRewards : 1;                          // 0x0691(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bDebugWorldIndicators : 1;                                 // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoDeactivateMissionWithNoPlayers : 1;                   // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bAutoSaveMissionCompleteStatusPerPlayer : 1;               // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bRepeatableMission : 1;                                    // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bDisableLevelUpSoundDuringMission : 1;                     // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPOverrideMissionTimerColor : 1;                       // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseBPOverrideMissionIndicatorString : 1;                  // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bForceCompleteOnDeactivate : 1;                            // 0x0692(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bRemovePlayerFromMissionOnDeath : 1;                       // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bPersistentMission : 1;                                    // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      bUseMissionTagAsStringIfLookupFails : 1;                   // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bScaleMinDistanceToWaypointByRotationRate : 1;             // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_5G3I : 1;                                      // 0x0693(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventShowingMissionTime : 1;                            // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowNegativeMissionStartNetworkTime : 1;                 // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowInUI : 1;                                             // 0x0693(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_MORH[0x4];                                     // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTaggedString>                       CustomMissionRequirements;                                 // 0x0698(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bSingletonMission : 1;                                     // 0x06A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BOEP[0x3];                                     // 0x06A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDistanceToWaypointMultiplier;                           // 0x06AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MissionDebugFlags;                                         // 0x06B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FYV2[0x4];                                     // 0x06B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TriggerKeys;                                               // 0x06B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, CPF_SkipSerialization)
	float                                              MissionMaxDurationSeconds;                                 // 0x06C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	float                                              MissionDurationConsoleOffsetSeconds;                       // 0x06CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TEnumAsByte<ShooterGame_EMissionTimerMode>         MissionTimerUIMode;                                        // 0x06D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	TEnumAsByte<ShooterGame_EMissionTimerMode>         MissionDurationUIMode;                                     // 0x06D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_428Q[0x6];                                     // 0x06D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MissionObjectiveTimeLabelString;                           // 0x06D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization)
	float                                              LifetimeAfterDeactivated;                                  // 0x06E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_ZW61[0x4];                                     // 0x06EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTaggedString>                       MissionStrings;                                            // 0x06F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      MissionBuffType;                                           // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	bool                                               bListEntryOnly;                                            // 0x0708(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseThrottledTick;                                         // 0x0709(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_AGL4[0x2];                                     // 0x070A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTimeRange                                  ThrottledTickTimeRange;                                    // 0x070C(0x0008) (Edit, DisableEditOnInstance, CPF_SkipSerialization)
	bool                                               bUseThrottledServerTick;                                   // 0x0714(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_RPSS[0x3];                                     // 0x0715(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTimeRange                                  ThrottledServerTickTimeRange;                              // 0x0718(0x0008) (Edit, DisableEditOnInstance, CPF_SkipSerialization)
	bool                                               bUseThrottledClientTick;                                   // 0x0720(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization)
	unsigned char                                      UnknownData_5N1E[0x3];                                     // 0x0721(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTimeRange                                  ThrottledClientTickTimeRange;                              // 0x0724(0x0008) (Edit, DisableEditOnInstance, CPF_SkipSerialization)
	unsigned char                                      UnknownData_M5C2[0x4];                                     // 0x072C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterCharacter*                           StartedByCharacter;                                        // 0x0730(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FCharacterAndControllerPair>         PlayersOnMission;                                          // 0x0738(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	double                                             MissionStartNetworkTime;                                   // 0x0748(0x0008) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                             PostSetupMissionStartNetworkTime;                          // 0x0750(0x0008) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ShooterGame_EMissionState>             MissionState;                                              // 0x0758(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_H3TP[0x7];                                     // 0x0759(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  CurrentMissionMusic;                                       // 0x0760(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AMissionSpline*>                      DinoPathingSplines;                                        // 0x0768(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               UseDynamicMissionStrings;                                  // 0x0778(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N1O9[0x3];                                     // 0x0779(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PrepAreaRadius;                                            // 0x077C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PrepDuration;                                              // 0x0780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPrepUseTargetingTeamOfStartingPlayer;                     // 0x0784(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_ETargetingTeamBehavior>    PrepTargetingTeamBehavior;                                 // 0x0785(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5JTA[0x2];                                     // 0x0786(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PrepAreaEmitter;                                           // 0x0788(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bSetPrepAreaEmitterLifespanToPrepDuration;                 // 0x0790(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LMQJ[0x7];                                     // 0x0791(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystem*                             PrepAreaPlayerInclusionParticles;                          // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPrepAreaAutoSendNotificationToIncludedPlayers;            // 0x07A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JBHG[0x7];                                     // 0x07A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PrepAreaNotificationPrefix;                                // 0x07A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  MissionSuccessSound;                                       // 0x07B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  MissionFailedSound;                                        // 0x07C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               LevelsToLoad;                                              // 0x07C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LevelsToLoadSinglePlayerAndListenServer;                   // 0x07D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    MissionPhaseStartedEvent;                                  // 0x07E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MissionPhaseEndedEvent;                                    // 0x07F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MissionDeactivatedEvent;                                   // 0x0808(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MissionResetTimerEvent;                                    // 0x0818(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      MissionCustomData;                                         // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class APrimalDinoCharacter*>                MissionDinos;                                              // 0x0830(0x0010) (ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic)
	TArray<class APrimalStructure*>                    MissionStructures;                                         // 0x0840(0x0010) (ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DWZV[0x50];                                    // 0x0850(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ADroppedItemMission*>                 MissionDroppedItems;                                       // 0x08A0(0x0010) (ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic)
	TArray<struct FTeleportedCharacter>                TeleportedCharacters;                                      // 0x08B0(0x0010) (ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic)
	TArray<struct FPlayerItems>                        PlayerUsableItems;                                         // 0x08C0(0x0010) (ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic)
	class AActor*                                      MissionDispatcher;                                         // 0x08D0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AShooterCharacter*>                   PlayersPendingAddToMission;                                // 0x08D8(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_6WT2[0x8];                                     // 0x08E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      Gen2TeleportBuff;                                          // 0x08F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_6RQ8[0x20];                                    // 0x08F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MissionPhaseIndex;                                         // 0x0918(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_ZFI6[0xA8];                                    // 0x091C(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseGen2TeleportBuff : 1;                                  // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_CRNJ : 1;                                      // 0x09C4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasRunSetup : 1;                                          // 0x09C4(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bSuspendedDueToStasis : 1;                                 // 0x09C4(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bSaveMissionItemData : 1;                                  // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAbsoluteForcePreventLeavingMission : 1;                   // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasActivatedSuccessFailureWorldBuffs : 1;                 // 0x09C4(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUseBPGetMissionTargetingDesire : 1;                       // 0x09C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideRandomWanderLocation : 1;                    // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowTargetingOtherMissionDinos : 1;                      // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyReverseTeleportOnMissionDeactivation : 1;             // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesFallbackSeeds : 1;                                    // 0x09C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_2M9I[0x2];                                     // 0x09C6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MissionDepositInventoryClass;                              // 0x09C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastThrottledTickEventTime;                                // 0x09D0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CurrentThrottledTickEventInterval;                         // 0x09D8(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6RHS[0x4];                                     // 0x09DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastThrottledServerTickEventTime;                          // 0x09E0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CurrentThrottledServerTickEventInterval;                   // 0x09E8(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_6S4K[0x4];                                     // 0x09EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastThrottledClientTickEventTime;                          // 0x09F0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CurrentThrottledClientTickEventInterval;                   // 0x09F8(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_X6ZU[0x4];                                     // 0x09FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastAutoSwitchPhaseTime;                                   // 0x0A00(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CurrentAutoSwitchPhaseInterval;                            // 0x0A08(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_D7T1[0xC];                                     // 0x0A0C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               SplineSpanwerTriggerKeys;                                  // 0x0A18(0x0010) (Edit, ZeroConstructor)
	struct FName                                       OnFailureKillAllTamesInTileStreamingVolumeCustomTag;       // 0x0A28(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AMissionSpline*>                      SplineSpawners;                                            // 0x0A30(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_HVCN[0x58];                                    // 0x0A40(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             ActivePreventsMissions;                                    // 0x0A98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             ExtraReferences;                                           // 0x0AA8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionType");
		return ptr;
	}



	void UpdateWorldIndicators(bool bForceNetUpdate);
	void UpdateRequirements(bool bForceNetUpdate);
	void UpdateMissionPrepArea(const struct FVector& PrepAreaWorldLocation, float MinUpdateFrequencyInSeconds);
	bool TryCompletePhase(bool bForceChange);
	bool TryChangeMissionPhase(const struct FName& NewPhase, bool bForceChange);
	float STATIC_TotalMaxHealth_Players(TArray<class AShooterCharacter*> PlayerArray);
	float STATIC_TotalMaxHealth_Dinos(TArray<class APrimalDinoCharacter*> DinoArray);
	float STATIC_TotalMaxHealth_Characters(TArray<class APrimalCharacter*> CharacterArray);
	float STATIC_TotalCurrentHealth_Players(TArray<class AShooterCharacter*> PlayerArray);
	float STATIC_TotalCurrentHealth_Dinos(TArray<class APrimalDinoCharacter*> DinoArray);
	float STATIC_TotalCurrentHealth_Characters(TArray<class APrimalCharacter*> CharacterArray);
	bool TeleportCharacterForMission(class APrimalCharacter* Character, const struct FVector& NewLocation, bool bOverrideRotation, const struct FRotator& RotationOverride, bool bForceSetReturnLocation, bool bWasMountedDino, bool bSkipDinoFailChecks);
	void SuspendMission();
	void StopMissionMusic();
	void StaticOnReplicatedMissionDataUpdated(class APrimalBuff_MissionData* missionData);
	void StaticOnMissionDataInitialized(class APrimalBuff_MissionData* missionData);
	bool STATIC_StaticGetTaggedString(class UClass* MissionType, const struct FName& Tag, struct FString* OutString);
	class AShooterWeapon* SpawnMissionWeapon(class AShooterCharacter* ForPlayer, class UClass* WeaponItem, float ItemQuality, bool AutoEquip);
	class APrimalStructure* SpawnMissionStructure(class UClass* StructureType, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AShooterPlayerController* OwnerPlayerController, int TargetingTeamOverride);
	class ADroppedItemMission* SpawnMissionItem(class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int quantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FVector& WorldLocation, const struct FRotator& WorldRotation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
	TArray<class APrimalDinoCharacter*> SpawnMissionDinoGroupExtended(int NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, TArray<struct FDinoSetup> DinoSetups, TEnumAsByte<ShooterGame_ESpawnPattern> Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bRandomizeDinos, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck);
	TArray<class APrimalDinoCharacter*> SpawnMissionDinoGroup(int NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, TEnumAsByte<ShooterGame_ESpawnPattern> Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier);
	class APrimalDinoCharacter* SpawnMissionDino(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck);
	class AMissionType* STATIC_SpawnMission(class UObject* WorldContextObject, class UClass* MissionType, class AShooterCharacter* forCharacter, const struct FVector& Location, struct FString* FailureReason, class AActor* MissionDispatcherActor, bool bForceSpawn);
	void SpawnEmitterForPlayers(TArray<class AShooterCharacter*> Players, class UClass* EmitterType, const struct UObject_FTransform& EmitterTransform, float EmitterLifespan);
	void STATIC_SortMissionWorldIndicatorArrayByDistance(const struct FVector& WorldLocation, class APrimalCharacter* forCharacter, bool bReverseSort, TArray<struct FMissionWorldIndicator>* InOutWorldIndicators);
	void SetupMissionPrepArea(const struct FVector& PrepAreaWorldLocation, const struct FRotator& PrepAreaEmitterRotation, const struct FVector& PrepAreaEmitterScale);
	void SetSpecificSplineKeyTarget(class APrimalDinoCharacter* ForDino, int index);
	void SetReverseTeleportReturnLocation(class APrimalCharacter* Character, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetPlayerPrepAreaState(class AShooterCharacter* PlayerPawn, bool bInsidePrepArea);
	void STATIC_SetPlayerParticleSystemIndicator(class AShooterCharacter* PlayerPawn, class UParticleSystem* IndicatorParticles, float RemoveAfterDuration, bool bForceNetUpdate);
	void SetPhaseStartedDelegate(const struct FName& PhaseName, const struct FScriptDelegate& Delegate);
	void SetPhaseEndedDelegate(const struct FName& PhaseName, const struct FScriptDelegate& Delegate);
	void SetPhaseCompleted(int PhaseIndex, bool bCompleted);
	void SetMissionTimeRemaining(float SecondsRemaining);
	void SetMissionMusic(class USoundBase* LoopingMusicTrack);
	void SetMissionDeactivationTimer(float NumSeconds);
	bool SetMissionCompletedStatus(class AShooterCharacter* PlayerCharacter, bool bCompleted, bool bUseOverrideVersion, int OverrideVersion, bool bUseOverrideCompleteUtcTime, double CompleteUtcTime);
	bool SetDinoAITargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget, float AcceptableRadius);
	bool SetDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget);
	bool SetDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget);
	void ServerRequestToggleWeapon(class AShooterCharacter* Character);
	void SendNotificationToPlayer(class AShooterCharacter* Player, const struct FName& StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
	void SendNotificationToAllPlayers(const struct FName& StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
	void SendMissionAlertToPlayer(class AShooterCharacter* Player, TEnumAsByte<ShooterGame_EMissionAlertType> AlertType, const struct FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
	void SendMissionAlertToAllPlayers(TEnumAsByte<ShooterGame_EMissionAlertType> AlertType, const struct FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
	bool ReverseTeleportCharacter(class APrimalCharacter* Character);
	void ResetSplinePoints(class APrimalDinoCharacter* ForDino);
	void ResetMissionTimer();
	void RemovePlayerUsableItem(class AShooterCharacter* Character, const struct FItemNetID& ItemId);
	void RemovePlayerFromMission(class AShooterCharacter* PlayerCharacter, bool bCompletedSuccessfully, bool bRemoveSilently);
	int RemoveItemsFromInventory_Balanced(bool* bIsBalanced, TArray<class APrimalCharacter*> FromCharacters, class UClass* ItemClass, int TotalAmountToRemove, bool bMoveToMissionInventory, bool bOnlyRemoveIfEnough, bool bExactClassMatch, bool bIgnoreHotbar);
	int RemoveItemsFromInventory(class UPrimalInventoryComponent* inventory, class UClass* ItemClass, int AmountToRemove, bool bMoveToMissionInventory, bool bExactClassMatch, bool bIgnoreHotbar);
	void ReAddPlayerFromReconnect(class AShooterCharacter* Player);
	void ReactivateSuspendedMission();
	void STATIC_RacePlayerData_SetTargetCheckpoint(TArray<struct FRacePlayerData>* InOutPlayerData, int PlayerIndex, int NewTargetCheckpoint);
	void STATIC_RacePlayerData_SetCheckpointData(TArray<struct FRacePlayerData>* InOutPlayerData, int PlayerIndex, int CheckpointIndex, bool bCheckpointReached, float CheckpointTime);
	int STATIC_RacePlayerData_NumCheckpoints(TArray<struct FRacePlayerData> PlayerData);
	void STATIC_RacePlayerData_Initialize(TArray<struct FRacePlayerData>* InOutPlayerData, TArray<class AShooterPlayerController*> Controllers, int NumCheckpoints);
	int STATIC_RacePlayerData_IndexOfController(TArray<struct FRacePlayerData> PlayerData, class AShooterPlayerController* Controller);
	int STATIC_RacePlayerData_GetTargetCheckpoint(TArray<struct FRacePlayerData> PlayerData, int PlayerIndex);
	int STATIC_RacePlayerData_GetPlayerRanking(TArray<struct FRacePlayerData> PlayerData, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints, int PlayerIndex);
	void STATIC_RacePlayerData_GetCheckpointData(TArray<struct FRacePlayerData> PlayerData, int PlayerIndex, int CheckpointIndex, bool* bCheckpointReached, float* CheckpointTime);
	void STATIC_RacePlayerData_GetAllPlayerRankings(TArray<struct FRacePlayerData> PlayerData, TArray<int>* OutRankings, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints);
	bool STATIC_RacePlayerData_FixupControllers(TArray<struct FRacePlayerData>* InOutPlayerData);
	bool RaceClosestPlayerToCheckpoint(TArray<struct FRacePlayerData> PlayerData, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints, int A, int B);
	void PostLoadWorldFixup();
	void PlayMissionMusic(class USoundBase* LoopingMusicToPlay);
	void OpenLeaderboardsForPlayer(class AShooterCharacter* Player, TArray<struct FLeaderboardRow> Rows);
	void OpenLeaderboardsForAllPlayers(TArray<struct FLeaderboardRow> Rows);
	void OnUpdateRequirements(const struct FName& PhaseName, TArray<struct FMissionPhaseRequirement> NewRequirements);
	void OnThrottledTick(float DeltaTime);
	void OnThrottledServerTick(float DeltaTime);
	void OnThrottledClientTick(float DeltaTime);
	void OnRep_MissionState();
	void OnRep_MissionPhaseIndex();
	void OnPlayerSpawned(class AShooterCharacter* PlayerPawn);
	void OnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, const struct FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, const struct FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnMissionPhaseStarted(const struct FName& OldPhase, const struct FName& NewPhase);
	void OnMissionPhaseEvent__DelegateSignature(class AMissionType* Mission, const struct FName& OldPhaseName, const struct FName& NewPhaseName);
	void OnMissionPhaseEnded(const struct FName& OldPhase, const struct FName& NewPhase);
	void OnMissionEvent__DelegateSignature(class AMissionType* Mission);
	void OnInventoryItemRemoved(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountRemoved);
	void OnInventoryItemAdded(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountAdded, bool bEquippedItem);
	int STATIC_NumLivingPlayers(TArray<class AShooterCharacter*> PlayerArray);
	int STATIC_NumLivingDinos(TArray<class APrimalDinoCharacter*> DinoArray);
	int STATIC_NumLivingCharacters(TArray<class APrimalCharacter*> CharacterArray);
	struct FString NonStaticGetPhaseRequirementDescription(const struct FMissionPhaseRequirement& Req);
	void MultiResetMissionTimer(double NewMissionStartNetworkTime);
	void MultiMissionStateChange(TEnumAsByte<ShooterGame_EMissionState> NewState);
	void MultiMissionPhaseStarted(const struct FName& OldPhaseName, const struct FName& NewPhaseName);
	void MultiMissionPhaseEnded(const struct FName& OldPhaseName, const struct FName& NewPhaseName);
	void MissionPhaseHandler__DelegateSignature(const struct FName& OldPhaseName, const struct FName& NewPhaseName);
	int MissionFindPathAsync(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	void MissionAI_SetReversPathForDino(class APrimalDinoCharacter* ForDino, bool ShouldReverseAtEnd);
	void MissionAI_SetForcePathSplineForDino(class APrimalDinoCharacter* ForDino, class USplineComponent* Path);
	bool MissionAI_IsAtPathDestination(class APrimalDinoCharacter* ForDino, float MaxDistance, const struct FVector& TargetOffset, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, float DebugDrawDuration);
	class AActor* MissionAI_GetTarget(class APrimalDinoCharacter* ForDino);
	void STATIC_MissionAI_GetMissionFromController(class AActor* ControllerActor, TEnumAsByte<ShooterGame_EBoolExecResult>* OutResult, class AMissionType** Mission, class APrimalDinoCharacter** DinoPawn, class APrimalDinoAIController** DinoController);
	bool MissionAI_FindPathToTarget(class APrimalDinoCharacter* ForDino, struct FVector* NextTargetLocation);
	struct FMissionAlertEntry STATIC_ItemToAlertEntry(class UPrimalItem* Item);
	bool IsPlayerOnMission(class AShooterCharacter* PlayerCharacter);
	bool STATIC_IsPlayerEligibleForMission(class UClass* MissionType, class APlayerController* Controller, struct FString* Reason);
	bool IsPhaseNameValid(const struct FName& Name);
	bool IsPhaseComplete(const struct FName& PhaseName);
	bool IsMissionComplete(class AShooterCharacter* forCharacter, class AShooterPlayerController* ForController);
	bool STATIC_IsMetaDataMissionType(class UObject* WorldContextObject, class UClass* MissionType);
	bool STATIC_IsFriendlyWithAnyTargetingTeam(class APrimalCharacter* Character, TArray<int> TargetingTeams);
	bool STATIC_IsFriendlyWithAllTargetingTeams(class APrimalCharacter* Character, TArray<int> TargetingTeams);
	bool IsActive();
	bool STATIC_HasPlayerCompletedMissionByTag(const struct FName& MissionTagName, class AShooterCharacter* Character, int* VersionCompleted, double* UtcTimeCompleted);
	bool STATIC_HasPlayerCompletedMission(class UClass* MissionType, class AShooterCharacter* Character, int* VersionCompleted, double* UtcTimeCompleted);
	void STATIC_GivePlayerXP(class AShooterCharacter* Player, float XPAmount);
	TArray<class UPrimalItem*> STATIC_GivePlayerLoot(class AShooterCharacter* Player, TArray<struct FLootTableEntry> LootTable);
	void GetTargetingTeamsOfAllPlayersOnMission(TArray<int>* OutTargetingTeams);
	bool GetTaggedString(const struct FName& Tag, struct FString* OutString);
	bool GetReverseTeleportReturnLocation(class APrimalCharacter* Character, struct FVector* ReverseTeleportLocation, struct FRotator* ReverseTeleportRotation);
	float GetRemainingTime();
	struct FName STATIC_GetRealMissionTagFromMetaData(class UObject* WorldContextObject, class UClass* MissionType);
	void GetPlayerUsableItems(class AShooterCharacter* Character, TArray<struct FItemNetID>* OutItemIDs);
	void GetPhaseRequirements(const struct FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements, class AShooterCharacter* ForPlayer);
	float STATIC_GetPhaseRequirementProgress(const struct FMissionPhaseRequirement& Req);
	struct FString STATIC_GetPhaseRequirementDescription(class UClass* ForMission, const struct FMissionPhaseRequirement& Req);
	struct FString GetPhaseDisplayText();
	void GetPerPlayerWorldIndicators(class AShooterPlayerController* Controller, class AShooterCharacter* Character, TArray<struct FMissionWorldIndicator>* WorldIndicators);
	void GetNearbyStructures(class UObject* WorldContextObject, TArray<class APrimalStructure*>* OutStructures, class UClass* StructureType, bool bExactTypeMatch, const struct FVector& Location, float Radius);
	void STATIC_GetNearbyPlayersEligibleForMission(class UObject* WorldContextObject, TArray<class AShooterCharacter*>* OutCharacters, class UClass* MissionType, const struct FVector& Location, float Radius, bool bSortByDistanceToLocation, bool bRespectMissionMaxPlayerCount, int InTargetingTeam, TEnumAsByte<ShooterGame_ETargetingTeamBehavior> TargetingTeamBehavior);
	void STATIC_GetNearbyPlayersAndTamedDinos(class UObject* WorldContextObject, TArray<class APrimalCharacter*>* OutCharacters, const struct FVector& Location, float Radius, int OnlyFriendlyWithTargetingTeam);
	void STATIC_GetNearbyPlayers(class UObject* WorldContextObject, TArray<class AShooterCharacter*>* OutCharacters, const struct FVector& Location, float Radius, int OnlyFriendlyWithTargetingTeam);
	void STATIC_GetNearbyMissionDispatchers(class UObject* WorldContextObject, class UClass* ForMissionType, class AShooterCharacter* ForPlayer, const struct FVector& SearchOrigin, TArray<class AMissionDispatcher*>* OutDispatchers, float Radius, bool bSortByDistance, bool bRequireMissionInDisaptcher);
	void STATIC_GetNearbyDinos(class UObject* WorldContextObject, TArray<class APrimalDinoCharacter*>* OutCharacters, const struct FVector& Location, float Radius, bool bIncludeTamed, bool bIncludeWild, int OnlyFriendlyWithTargetingTeam);
	void STATIC_GetNearbyCharacters(class UObject* WorldContextObject, TArray<class APrimalCharacter*>* OutCharacters, const struct FVector& Location, float Radius);
	struct FVector STATIC_GetMissionWorldIndicatorWorldLocation(const struct FMissionWorldIndicator& WorldIndicator, class APrimalCharacter* forCharacter);
	class UTexture2D* STATIC_GetMissionWorldIndicatorIcon(const struct FMissionWorldIndicator& WorldIndicator);
	struct FString STATIC_GetMissionWorldIndicatorDescription(class UClass* FromMissionType, const struct FMissionWorldIndicator& WorldIndicator);
	struct FName STATIC_GetMissionTagForMission(class UClass* MissionType);
	struct FName GetMissionTag();
	bool GetMissionLeaderboardRows(TArray<struct FLeaderboardRow>* OutRows);
	float STATIC_GetMissionDurationInSeconds(class UClass* MissionType);
	struct FString STATIC_GetMissionDurationFromTag(const struct FName& MissionTag, class AShooterCharacter* Character);
	struct FString GetMissionDisplayName(class APlayerController* ShootCont);
	class APrimalBuff_MissionData* STATIC_GetMissionDataForCharacter(class AShooterCharacter* Character, bool bCreateIfMissing);
	struct FName GetMissionClassName();
	class APrimalBuff* GetMissionBuff(class AShooterCharacter* Character);
	int GetIntFromMissionType(const struct FName& Tag, class AShooterCharacter* PlayerPawn);
	struct FVector STATIC_GetDispatcherPointLocation(class UObject* WorldContextObject, class UClass* ForMissionType);
	bool GetDifficultyString(class UWorld* World, struct FString* diffString, struct FLinearColor* diffColor);
	void GetCurrentWorldIndicators(TArray<struct FMissionWorldIndicator>* WorldIndicators);
	int GetCurrentSplineKeyTarget(class APrimalDinoCharacter* ForDino);
	struct FName GetCurrentMissionPhaseName();
	int GetCurrentMissionPhaseIndex();
	void GetAllPlayersOnMission(TArray<class AShooterCharacter*>* OutCharacters);
	void GetAllPlayerControllersOnMission(TArray<class AShooterPlayerController*>* OutControllers);
	void GetAllPlayerControllersInvolvedInMission(TArray<class AShooterPlayerController*>* OutPlayerControllers);
	void GetAllPlayerCharactersInvolvedInMission(TArray<class AShooterCharacter*>* OutPlayerCharacters);
	void STATIC_GetAllMissionTriggersWithKey(class UObject* WorldContextObject, const struct FName& TriggerKey, TArray<class AMissionTrigger*>* OutTriggerActors, bool bSortByTriggerOrder, bool bReverseSort);
	TArray<struct FName> GetAllMissionTriggerKeys();
	void STATIC_GetAllMissionSplinesWithKey(class UObject* WorldContextObject, const struct FName& TriggerKey, TArray<class AMissionSpline*>* OutSplineActors, bool bSortByTriggerOrder, bool bReverseSort);
	void STATIC_GetAllMissionServerSidePointsWithKey(class UObject* WorldContextObject, const struct FName& TriggerKey, TArray<class AMissionServerSidePoint*>* OutServerSidePointActors, bool bSortByTriggerOrder, bool bReverseSort, bool bExcludeMissionBounds);
	void GeneratePhaseRequirements(const struct FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements);
	void GeneratePerPlayerPhaseRequirements(class AShooterPlayerController* Controller, class AShooterCharacter* Character, const struct FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements);
	void STATIC_FindMissionsMatchingTag(class UObject* WorldContextObject, const struct FName& MissionTag, TArray<class UClass*>* Missions);
	class AMissionSpline* STATIC_FindClosestSplineActorWithTriggerKey(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FName& TriggerKey);
	class AMissionSpline* STATIC_FindClosestSplineActor(const struct FVector& WorldLocation, TArray<class AMissionSpline*> Splines);
	class USplineComponent* FindClosestPathingSpline(const struct FVector& WorldLocation);
	int FinalizeMissionPrep(bool bForceAdd);
	void DeactivateMission();
	int CountMissionLeaderboardRows();
	int CountInventoryItemsFromAllPlayersInMission(class UClass* ItemType, bool bRequireExactClassMatch);
	int STATIC_CountInventoryItems(class APrimalCharacter* Character, class UClass* ItemType, bool bRequireExactClassMatch);
	bool ClearReverseTeleportReturnLocation(class APrimalCharacter* Character);
	bool ClearDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino);
	bool ClearDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino);
	void CleanupInvalidPlayers(bool RemoveIfInvalid);
	bool CanStartPhase(const struct FName& PhaseName);
	bool STATIC_CanStartMission(class UClass* MissionType, class APlayerController* Controller, struct FString* ClientFailureReason, class AActor** OutMissionDispatcher);
	float STATIC_CalcXPRatio(TEnumAsByte<ShooterGame_ELevelExperienceRampType> RampType, int Level, float Ratio);
	float CalculateMissionExperienceForPlayer(class AShooterCharacter* Player);
	bool BPTryCompletePhase(const struct FName& PhaseName);
	bool BPStaticIsPlayerEligibleForMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, struct FString* OutReason);
	bool BPStaticCanStartMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, struct FString* ClientFailureReason, class AActor** OutSelectedMissionDispatcher);
	int BPPhaseNameToIndex(const struct FName& Name, bool* bIndexIsValid);
	bool BPOverrideRandomWanderLocation(class APrimalDinoCharacter* Dino, const struct FVector& inVec, struct FVector* outVec);
	bool BPOverrideMissionTimerColor(class AShooterPlayerController* ShooterContr, const struct FLinearColor& DefaultColor, const struct FLinearColor& CurrentColor, struct FLinearColor* TimerOverrideColor);
	struct FString BPOverrideMissionIndicatorString(class AShooterCharacter* forCharacter, const struct FMissionWorldIndicator& Indicator, const struct FString& String);
	void BPOnReceivedMissionPathFindingResult(int ID, class UNavigationPath* Path, unsigned char Result);
	void BPOnPlayerRemovedFromMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess);
	void BPOnPlayerAddedToMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
	void BPOnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void BPOnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void BPOnMissionTimedOut();
	void BPOnMissionSuspended();
	void BPOnMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionStructureDamage(class APrimalStructure* Structure, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void BPOnMissionServerSetup();
	void BPOnMissionPlayerRespawned(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
	void BPOnMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountRemoved);
	void BPOnMissionPlayerDied(class AShooterCharacter* Player, class AShooterPlayerController* Controller, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountAdded, bool bEquippedItem);
	void BPOnMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* ByPC, class UPrimalItem* InventoryItem);
	void BPOnMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionDinoDamage(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void BPOnMissionDeactivated();
	void BPOnMissionComplete(class AShooterCharacter* ForPlayer, class AShooterPlayerController* ForController, bool bLastPhaseSuccess, float XPRewarded, TArray<class UPrimalItem*> ItemsRewarded);
	void BPOnMissionCheat(const struct FName& CheatName, bool bSetValue, float Value);
	void BPOnMissionActivated();
	bool BPIsPhaseComplete(const struct FName& PhaseName);
	struct FString BPGetPhaseDisplayText(const struct FName& PhaseName);
	struct FString BPGetMissionTimerText(class AShooterPlayerController* ShootCont);
	float BPGetMissionTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
	struct FString BPGetMissionDurationText(class AShooterPlayerController* ShootCont);
	void BPGetMetaTagsAsInts(TArray<int>* OutTagIds);
	void BPGetExtraLocalMissionIndicators(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, TArray<struct FMissionWorldIndicator> IndicatorsIn, TArray<struct FMissionWorldIndicator>* IndicatorsOut);
	void BPGenerateMissionRewards(const struct FCharacterAndControllerPair& Player, bool bCompletedSuccessfully, float* XPReward, TArray<class UPrimalItem*>* GeneratedItems);
	bool BPCanRideMissionDino(class AShooterCharacter* Character, class APrimalDinoCharacter* Dino);
	bool BPAllowTimeout();
	bool BPAllowPlayerToLeaveMission(class AShooterCharacter* PlayerPawn);
	bool AllowMissionCreation(class AShooterCharacter* forCharacter, const struct FVector& Location, class AActor* MissionDispatcherActor, struct FString* FailureReason);
	void AddPlayerUsableItem(class AShooterCharacter* Character, class UPrimalItem* Item);
	bool AddPlayerToMission(class AShooterCharacter* PlayerCharacter, bool bForceAdd);
	int AddPlayersInRadiusToMission(const struct FVector& WorldLocation, float Radius, int MaxPlayersToAdd, bool bPrioritizeByDistanceToWorldLocation, int InTargetingTeam, TEnumAsByte<ShooterGame_ETargetingTeamBehavior> TargetingTeamBehavior, bool bForceAdd);
	bool AddMissionLeaderboardRow(class AShooterPlayerController* Controller, double NetworkTime, float FloatValue, int IntValue, const struct FName& NameValue, const struct FString& StringValue);
};

// Class ShooterGame.NewMissionModuleBase
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UNewMissionModuleBase : public UObject
{
public:
	unsigned char                                      DebugLifetime : 1;                                         // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      IsSubModule : 1;                                           // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      RequiresUpateMissionPrepAreaByMission : 1;                 // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      DeactivateMissionOnModuleLimitPassed : 1;                  // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_P79U[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ModuleTimeLimit;                                           // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FStruct_MissionModule_Travel                TravelStruct;                                              // 0x0030(0x0038) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                              SubmodulesToRunAtStart;                                    // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              SubmodulesToRunOnComplete;                                 // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AMissionType_ModularMissionBase*             MyOuter;                                                   // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TArray<class AMissionServerSidePoint*>             ModuleNavPoints;                                           // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	unsigned char                                      ModuleEndedBefore : 1;                                     // 0x00A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor)
	unsigned char                                      CurrentlyDelayed : 1;                                      // 0x00A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor)
	unsigned char                                      UnknownData_3D7W[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.NewMissionModuleBase");
		return ptr;
	}



	void TriggerHandleMissionModuleBegin();
	int SetOuter(class AMissionType_ModularMissionBase* NewOuter);
	void RunSubModulesOnComplete();
	void RunSubModulesAtStart();
	void OnOuterDestroyed();
	int HandleMissionTriggerOverlapEnd(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	int HandleMissionTriggerOverlapBegin(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	int HandleMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	int HandleMissionStructureDamaged(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	int HandleMissionProjectileExploded(class AShooterProjectile* Projectile);
	int HandleMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountRemoved);
	int HandleMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int AmountAdded, bool bEquippedItem);
	int HandleMissionModuleEnd();
	int HandleMissionModuleBegin();
	TArray<struct FMissionWorldIndicator> HandleMissionGetPerPlayerIndicators(class AShooterCharacter* Character);
	int HandleMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* PC, class UPrimalItem* Item);
	int HandleMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	int HandleMissionDinoDamaged(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	int HandleLastMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	int HandleLastMissionProjectileExploded(class AShooterProjectile* Projectile);
	int HandleLastMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	class UWorld* GetWorld();
	struct FString GetModuleRequirementsTitle();
	TArray<struct FMissionPhaseRequirement> GetModuleRequirementsMessage();
	float BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
};

// Class ShooterGame.MissionType_ModularMissionBase
// 0x0090 (FullSize[0x0B48] - InheritedSize[0x0AB8])
class AMissionType_ModularMissionBase : public AMissionType
{
public:
	unsigned char                                      UnknownData_DE0H[0x8];                                     // 0x0AB8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              Modules;                                                   // 0x0AC0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              DelayBeforeInitalModule;                                   // 0x0AD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MissionTimeRemainingAfterEscapePhase;                      // 0x0AD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AShooterProjectile*>                  MissionProjectiles;                                        // 0x0AD8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	unsigned char                                      MissionCompleted : 1;                                      // 0x0AE8(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor)
	unsigned char                                      CurrentModuleCompleted : 1;                                // 0x0AE8(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor)
	unsigned char                                      UnknownData_Z2I1[0x3];                                     // 0x0AE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrModule;                                                // 0x0AEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	struct FName                                       CurrRequirementsTitle;                                     // 0x0AF0(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	class UNewMissionModuleBase*                       CurrentModule;                                             // 0x0AF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	double                                             CurrentModuleStartTime;                                    // 0x0B00(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CurrentModuleTimeLimit;                                    // 0x0B08(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                NumDeadMissionDinos;                                       // 0x0B0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	int                                                NumDestroyedMissionStructures;                             // 0x0B10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9WOE[0x4];                                     // 0x0B14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              SpawnedForModuleActors;                                    // 0x0B18(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FMissionWorldIndicator>              SpecialWorldIndicators;                                    // 0x0B28(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<class UNewMissionModuleBase*>               AdditionalModules;                                         // 0x0B38(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionType_ModularMissionBase");
		return ptr;
	}



	class AActor* SpawnActorForMissionModule(class UClass* ActorClass, const struct UObject_FTransform& ActorTransform, bool bSpawnEvenIfColliding);
	void SetupMissionModules();
	void RemoveSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToRemove);
	void RemoveAllSpecialWorldIndicators();
	void RegisterProjectile(class AShooterProjectile* theProjectile);
	void MultiMissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct UObject_FTransform& TheTransform, float OverrideTimeDilation);
	void MultiFireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, TArray<class AActor*> SubprojectileTargets, class AActor* FiringActor);
	void MultiDeactivateWarmerColderHUD();
	void MultiActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, TArray<struct FVector> Locations);
	void MissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct UObject_FTransform& TheTransform, float OverrideTimeDilation);
	class AShooterProjectile* FireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, TArray<class AActor*> SubprojectileTargets, class AActor* FiringActor);
	void ExecuteNextMissionModule();
	void DeactivateWarmerColderHUD();
	void CreateLeaderboardEntry(class AShooterPlayerController* ForPC);
	void BPOnMissionProjectileExpoloded(class AShooterProjectile* theProjectile);
	void AddSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToAdd);
	void ActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, TArray<struct FVector> Locations);
};

// Class ShooterGame.NPCSpawnEntriesContainer
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UNPCSpawnEntriesContainer : public UObject
{
public:
	TArray<struct FNPCSpawnEntry>                      NPCSpawnEntries;                                           // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FNPCSpawnLimit>                      NPCSpawnLimits;                                            // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxDesiredNumEnemiesMultiplier;                            // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N8JN[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.NPCSpawnEntriesContainer");
		return ptr;
	}



};

// Class ShooterGame.NPCZoneManager
// 0x0188 (FullSize[0x05F8] - InheritedSize[0x0470])
class ANPCZoneManager : public AInfo
{
public:
	TArray<class ANPCZoneVolume*>                      LinkedZoneVolumes;                                         // 0x0470(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FLinkedZoneSpawnVolumeEntry>         LinkedZoneSpawnVolumeEntries;                              // 0x0480(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                              DefaultZoneSpawnVolumeFloors;                              // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FName>                               DefaultZoneSpawnVolumeFloorTags;                           // 0x04A0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	class UClass*                                      NPCSpawnEntriesContainerObject;                            // 0x04B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bEnabled;                                                  // 0x04B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceInEditor;                                            // 0x04B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNeverSpawnInWater;                                        // 0x04BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlySpawnInWater;                                         // 0x04BB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NMR1[0x4];                                     // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               OnlyAllowSpawningOnActorTags;                              // 0x04C0(0x0010) (Edit, ZeroConstructor)
	bool                                               bAllowExtentTest;                                          // 0x04D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlyCheckMySublevelWater;                                 // 0x04D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O7NH[0x2];                                     // 0x04D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinDesiredNumberOfNPC;                                     // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SP_MinDesiredNumberOfNPC;                                  // 0x04D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CK6Y[0x4];                                     // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DesiredNumberOfNPCMultiplier;                              // 0x04E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheSpawnPointMinimumFloorNormal;                           // 0x04E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheNewNewEditorNumberOfNPCMultiplier;                      // 0x04E8(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              KillOffOverweightNPCStasisTime;                            // 0x04EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VSZ7[0x4];                                     // 0x04F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TheMinimumPlayerDistanceFromSpawnPoint;                    // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheIncreaseNPCInterval;                                    // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_TheIncreaseNPCInterval;                                 // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheIncreaseNPCIntervalMax;                                 // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheDecreaseNPCInterval;                                    // 0x0504(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              NPCAIRangeMultiplier;                                      // 0x0508(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NPCAIAggroNotifyNeighborsRangeMultiplier;                  // 0x050C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNPCDontWander;                                            // 0x0510(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNPCWildIgnoreWild;                                        // 0x0511(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNPCNoKillXP;                                              // 0x0512(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNPCPreventSaving;                                         // 0x0513(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceUntameable;                                          // 0x0514(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUsesManualSpawning;                                       // 0x0515(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreVolumeEcompassingCheck;                             // 0x0516(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bSpawnAllNPCEntries;                                       // 0x0517(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlyUseInSingleplayer;                                    // 0x0518(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOnlyUseInDedicatedServer;                                 // 0x0519(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SK4Y[0x2];                                     // 0x051A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NPCWanderRadiusMultiplier;                                 // 0x051C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxNumberSpawnZoneRandomPointChecks;                       // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TheNPCFullIncreaseMaximumIterations;                       // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheMinimumTamedDinoDistanceFromSpawnPoint;                 // 0x0528(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheMinimumStructureDistanceFromSpawnPoint;                 // 0x052C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NPCLerpToMaxRandomBaseLevel;                               // 0x0530(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ManualSpawningNPCLerpToMaxRandomBaseLevel;                 // 0x0534(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaximumNumberNearbyCoreStructures;                         // 0x0538(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                AbsoluteMaximumNumberNearbyCoreStructures;                 // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAutoKillUseGlobalStasisArray;                             // 0x0540(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S6F1[0x7];                                     // 0x0541(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ANPCZoneVolume*                              HardLimitWildDinosToVolume;                                // 0x0548(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bTraceForSpawnAgainstWater;                                // 0x0550(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bNPCForcePreventExitingWater;                              // 0x0551(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseSpawnPointOverrideRotation;                            // 0x0552(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KVFH[0x5];                                     // 0x0553(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AVolume*                                     NPCLimitTargetsToVolume;                                   // 0x0558(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NPCLevelMultiplier;                                        // 0x0560(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ForceOverrideNPCBaseLevel;                                 // 0x0564(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1DA1[0x24];                                    // 0x0568(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumNPCSpawned;                                             // 0x058C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                NumSpawnFailures;                                          // 0x0590(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_APEY[0x4];                                     // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastIncreaseNPCTime;                                       // 0x0598(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastDecreaseNPCTime;                                       // 0x05A0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YR39[0x8];                                     // 0x05A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CloseStructureDistanceFromSpawnPoint;                      // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IJF7[0x4];                                     // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              SpawnPointOverrides;                                       // 0x05B8(0x0010) (Edit, ZeroConstructor)
	struct FName                                       NonDedicatedFreezeWildDinoPhysicsIfLevelUnloaded;          // 0x05C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded;         // 0x05D0(0x0010) (Edit, ZeroConstructor)
	float                                              MinimumManualSpawnInterval;                                // 0x05E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GOCR[0x4];                                     // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastManuallySpawnedTime;                                   // 0x05E8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreNPCRandomClassReplacements;                         // 0x05F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAllowSpawnPointOverridesNonDedicatedLevelUnloadedFreezing; // 0x05F1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L0S8[0x2];                                     // 0x05F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TheNPCDynamicIncreaseMaximumIterations;                    // 0x05F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.NPCZoneManager");
		return ptr;
	}



	TArray<class APrimalDinoCharacter*> STATIC_StaticSpawnNPCs(class UObject* WorldContext, class ANPCZoneManager* AtZoneManager, class UClass* TheNPCSpawnEntries, const struct FVector& AtSpawnPoint, const struct FRotator& AtRotation, int UseSpawnVolumeIndex);
	void CheckIncreaseNPC();
};

// Class ShooterGame.NPCZoneSpawnVolume
// 0x0000 (FullSize[0x04A8] - InheritedSize[0x04A8])
class ANPCZoneSpawnVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.NPCZoneSpawnVolume");
		return ptr;
	}



};

// Class ShooterGame.NPCZoneVolume
// 0x0058 (FullSize[0x0500] - InheritedSize[0x04A8])
class ANPCZoneVolume : public AVolume
{
public:
	unsigned char                                      bOnlyCountWaterDinos : 1;                                  // 0x04A8(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, NoDestructor)
	unsigned char                                      bOnlyCountLandDinos : 1;                                   // 0x04A8(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, NoDestructor)
	unsigned char                                      bDoHigherQualityLedgeDetection : 1;                        // 0x04A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCountTamedDinos : 1;                                      // 0x04A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SY5B[0x7];                                     // 0x04A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              OnlyCountDinoClasses;                                      // 0x04B0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UClass*>                              IgnoreDinoClasses;                                         // 0x04C0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FHibernationCountInfo>               HibernatedEntities;                                        // 0x04D0(0x0010) (ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	float                                              HibernatedCountWeights;                                    // 0x04E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UC31[0x1C];                                    // 0x04E4(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.NPCZoneVolume");
		return ptr;
	}



	void OnEndOverlap(class AActor* Actor);
	void OnBeginOverlap(class AActor* Actor);
};

// Class ShooterGame.ObjectMap
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class UObjectMap : public UObject
{
public:
	TArray<struct FObjectListItem>                     ObjectsList;                                               // 0x0028(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_2XR8[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SizeX;                                                     // 0x0088(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic)
	int                                                SizeY;                                                     // 0x008C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic)
	int                                                CellSize;                                                  // 0x0090(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_9AHC[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ObjectMap");
		return ptr;
	}



	void Init(int InSizeX, int InSizeY, int InCellSize);
	int GetSizeY();
	int GetSizeX();
	int GetSize();
};

// Class ShooterGame.ObjectSerializer
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UObjectSerializer : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ObjectSerializer");
		return ptr;
	}



};

// Class ShooterGame.OceanDinoManager
// 0x01F8 (FullSize[0x0668] - InheritedSize[0x0470])
class AOceanDinoManager : public AActor
{
public:
	float                                              ViewerNumDinosGatherRadius;                                // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerDinoSpawnRadiusMin;                                  // 0x0474(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerDinoSpawnRadiusMax;                                  // 0x0478(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerDinoSpawnViewOffsetMin;                              // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerDinoSpawnViewOffsetMax;                              // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0P04[0x4];                                     // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FOceanDinoDepthEntry>                OceanDinoDepthEntries;                                     // 0x0488(0x0010) (Edit, ZeroConstructor)
	int                                                MaxValidSpawnPointAttempts;                                // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxNumViewersToUpdatePerFrame;                             // 0x049C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerNumDinosTargetMinPlayers;                            // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewerNumDinosTargetMaxPlayers;                            // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RaftMinViewerSpeed;                                        // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TL0G[0x54];                                    // 0x04AC(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NumDinosMinPlayers;                                        // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NumDinosMaxPlayers;                                        // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      KilledOceanDinoAreaDeathBuff;                              // 0x0508(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               OceanVolumeTags;                                           // 0x0510(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_OAPP[0x140];                                   // 0x0520(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinViewerDeltaDistanceToRefreshOceanSpawns;                // 0x0660(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BEPU[0x4];                                     // 0x0664(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.OceanDinoManager");
		return ptr;
	}



};

// Class ShooterGame.PaintingTexture
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UPaintingTexture : public UObject
{
public:
	uint32_t                                           Revision;                                                  // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SZTY[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  Texture;                                                   // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_4MWU[0x28];                                    // 0x0038(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PaintingTexture");
		return ptr;
	}



};

// Class ShooterGame.PaintingCache
// 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
class UPaintingCache : public UObject
{
public:
	unsigned char                                      UnknownData_QY0U[0x90];                                    // 0x0028(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UPaintingTexture*>                    PaintingTextures;                                          // 0x00B8(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_W94F[0x20];                                    // 0x00C8(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PaintingCache");
		return ptr;
	}



};

// Class ShooterGame.PaintingStreamingComponent
// 0x0070 (FullSize[0x0148] - InheritedSize[0x00D8])
class UPaintingStreamingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_3JCJ[0x70];                                    // 0x00D8(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PaintingStreamingComponent");
		return ptr;
	}



	void ServerSendNextChunk(class UStructurePaintingComponent* PaintingComponent);
	void ServerRequestPaintingStream(class UStructurePaintingComponent* PaintingComponent);
	void ServerCancelPaintingStream(class UStructurePaintingComponent* PaintingComponent);
	void ClientRecieveChunk(class UStructurePaintingComponent* PaintingComponent, TArray<unsigned char> Bytes);
	void ClientEndStreamingJob(class UStructurePaintingComponent* PaintingComponent);
	void ClientCancelSteamingJob(class UStructurePaintingComponent* PaintingComponent);
	void ClientBeginStreamingJob(class UStructurePaintingComponent* PaintingComponent, int Revision);
};

// Class ShooterGame.PointOfInterestActor
// 0x0440 (FullSize[0x08B0] - InheritedSize[0x0470])
class APointOfInterestActor : public AActor
{
public:
	unsigned char                                      UnknownData_2G5R[0x10];                                    // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             PointRootComp;                                             // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USphereComponent*                            PointUseSphereComp;                                        // 0x0488(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UTextRenderComponent*                        PointTextComp;                                             // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UTextRenderComponent*                        PointTitleTextComp;                                        // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FPointOfInterestData                        MyPointOfInterestData;                                     // 0x04A0(0x0140) (Edit, Protected)
	struct FPointOfInterestCompanionBehavior           MyPointOfInterestCompanionBehavior;                        // 0x05E0(0x02B0) (Edit, Protected)
	struct FVector                                     UseSphereLocOffset;                                        // 0x0890(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              UseSphereRadius;                                           // 0x089C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              TitleTextZOffset;                                          // 0x08A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bHasBeenViewed : 1;                                        // 0x08A4(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected)
	unsigned char                                      bSyncWithPointManager : 1;                                 // 0x08A4(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, NoDestructor, Protected)
	unsigned char                                      bPreventViewMultiUseEntry : 1;                             // 0x08A4(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bDebugPointActor_Persistent : 1;                           // 0x08A4(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bDebugPointActor_Single : 1;                               // 0x08A4(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bDebugPointActor_ClearDebugLines : 1;                      // 0x08A4(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_SY00[0x3];                                     // 0x08A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APointOfInterestManagerList*                 MyPointManager;                                            // 0x08A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PointOfInterestActor");
		return ptr;
	}



	void RefreshPointData();
	bool IsPointOfInterestValid();
	struct FPointOfInterestData GetMyPointOfInterestData();
	struct FPointOfInterestCompanionBehavior GetMyPointOfInterestCompanionBehavior();
};

// Class ShooterGame.PrimalEmitterSpawnable
// 0x0060 (FullSize[0x0520] - InheritedSize[0x04C0])
class APrimalEmitterSpawnable : public AEmitter
{
public:
	class USceneComponent*                             RootTransformComp;                                         // 0x04C0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             SoundToPlay;                                               // 0x04C8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UClass*                                      CameraShake;                                               // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraShakeInnerRadius;                                    // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraShakeOuterRadius;                                    // 0x04DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraShakeFalloff;                                        // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraShakeScaleMultiplier;                                // 0x04E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FDecalData                                  DecalToSpawn;                                              // 0x04E8(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      bCameraShakeOrientTowardsEpicenter : 1;                    // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHighPrioritySound : 1;                                    // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShallowEmitterSpawnable : 1;                              // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShallowEmitterDontSpawnOutOfView : 1;                     // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowLoopingEmitter : 1;                                  // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceNoRotation : 1;                                      // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTickSoundInRangePlayback : 1;                             // 0x0508(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_K43C[0x3];                                     // 0x0509(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShallowEmitterDontSpawnOutOfViewCheckRadius;               // 0x050C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShallowEmitterOverrideSecondsBeforeInactive;               // 0x0510(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ActivateSoundFadeInDuration;                               // 0x0514(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeactivateSoundFadeOutDuration;                            // 0x0518(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShallowEmitterSpawnableMaxDistance;                        // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalEmitterSpawnable");
		return ptr;
	}



};

// Class ShooterGame.PrimalBuff
// 0x0448 (FullSize[0x0968] - InheritedSize[0x0520])
class APrimalBuff : public APrimalEmitterSpawnable
{
public:
	float                                              DeactivationLifespan;                                      // 0x0520(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InstigatorAttachmentSocket;                                // 0x0524(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InstigatorAttachmentSocket_PlayerOverride;                 // 0x052C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSlowInstigatorFalling : 1;                                // 0x0534(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeactivateOnJump : 1;                                     // 0x0534(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventJump : 1;                                          // 0x0534(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDinoRiding : 1;                                    // 0x0534(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDinoDismount : 1;                                  // 0x0534(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BZXP[0x3];                                     // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPNotifyPreventDismounting : 1;                        // 0x0538(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_VZ5R[0x3];                                     // 0x0539(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bPreventCarryOrPassenger : 1;                              // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeactivated : 1;                                          // 0x053C(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsesInstigator : 1;                                       // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFollowTarget : 1;                                         // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddCharacterValues : 1;                                   // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyAddCharacterValuesUnderwater : 1;                     // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableIfCharacterUnderwater : 1;                         // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseInstigatorItem : 1;                                    // 0x053C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnTargetStasis : 1;                                // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAoETraceToTargets : 1;                                    // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAOEOnlyApplyOtherBuffToWildDinos : 1;                     // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAoEIgnoreDinosTargetingInstigator : 1;                    // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAoEOnlyOnDinosTargetingInstigator : 1;                    // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffForceNoTick : 1;                                      // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffForceNoTickDedicated : 1;                             // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCustomDepthStencilIgnoreHealth : 1;                       // 0x053D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCompleteCustomDepthStencilOverride : 1;                   // 0x053E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseActivateSoundFadeInDuration : 1;                       // 0x053E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDinoIgnoreBuffPostprocessEffectWhenRidden : 1;            // 0x053E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlayerIgnoreBuffPostprocessEffectWhenRidingDino : 1;      // 0x053E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteForcedFlee : 1;                                     // 0x053E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_1L2U[0x1];                                     // 0x053F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RemoteForcedFleeDuration;                                  // 0x0540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     AoETraceToTargetsStartOffset;                              // 0x0544(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       Target;                                                    // 0x0550(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class UPrimalItem>                  InstigatorItem;                                            // 0x0558(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SlowInstigatorFallingAddZVelocity;                         // 0x0560(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SlowInstigatorFallingDampenZVelocity;                      // 0x0564(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeactivateAfterTime;                                       // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeaponRecoilMultiplier;                                    // 0x056C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReceiveDamageMultiplier;                                   // 0x0570(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MeleeDamageMultiplier;                                     // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DepleteInstigatorItemDurabilityPerSecond;                  // 0x0578(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ValuesToAddPerSecond[0xC];                                 // 0x057C(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I97E[0x4];                                     // 0x05AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStatusValueModifierDescription             BuffDescription;                                           // 0x05B0(0x0050) (Edit, DisableEditOnInstance)
	float                                              CharacterAdd_DefaultHyperthermicInsulation;                // 0x0600(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterAdd_DefaultHypothermicInsulation;                 // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterMultiplier_ExtraWaterConsumptionMultiplier;       // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterMultiplier_ExtraFoodConsumptionMultiplier;        // 0x060C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterMultiplier_SubmergedOxygenDecreaseSpeed;          // 0x0610(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ViewMinExposureMultiplier;                                 // 0x0614(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ViewMaxExposureMultiplier;                                 // 0x0618(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              XPtoAdd;                                                   // 0x061C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              XPtoAddRate;                                               // 0x0620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                DinoColorizationPriority;                                  // 0x0624(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoColorizationInterpSpeed;                               // 0x0628(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPDinoRefreshColorization : 1;                         // 0x062C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideInventoryWeightMultipliers : 1;                   // 0x062C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeactivateAfterAddingXP : 1;                              // 0x062C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ZIBQ[0x3];                                     // 0x062D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemMultiplier>                     OverrideInventoryItemClassWeightMultipliers;               // 0x0630(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_6ZIC[0x60];                                    // 0x0640(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOnlyActivateSoundForInstigator : 1;                       // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAOEBuffCarnosOnly : 1;                                    // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCausesCryoSickness : 1;                                   // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bModifyMaxSpeed : 1;                                       // 0x06A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisplayHUDProgressBar : 1;                                // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUsePreventTargeting : 1;                             // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUsePreventTargetingTurret : 1;                       // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPOverrideWeaponBob : 1;                                  // 0x06A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyPlayerBoneModifiers : 1;                       // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDediServerUseBPModifyPlayerBoneModifiers : 1;             // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNonDedicatedPlayerPostAnimUpdate : 1;                // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsCharacterHardAttached : 1;                         // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoCharacterDetachment : 1;                                // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoCharacterDetachmentIncludeRiding : 1;                   // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoCharacterDetachmentIncludeCarrying : 1;                 // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInitializedCharacterAnimScriptInstance : 1;          // 0x06A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanBeCarried : 1;                                    // 0x06A2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePostAdjustDamage : 1;                                  // 0x06A2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventFallDamage : 1;                                    // 0x06A2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnInstigatorCapsuleComponentHit : 1;                 // 0x06A2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_L6II : 1;                                      // 0x06A2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPOverrideCameraViewTarget : 1;                        // 0x06A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPForceCameraStyle : 1;                                // 0x06A2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsValidUnstasisActor : 1;                            // 0x06A2(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOverrideIsNetRelevantFor : 1;                        // 0x06A3(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventClearRiderOnDinoImmobilize : 1;                    // 0x06A3(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAlwaysShowBuffDescription : 1;                            // 0x06A3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              SubmergedMaxSpeedModifier;                                 // 0x06A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UnsubmergedMaxSpeedModifier;                               // 0x06A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SubmergedMaxAccelerationModifier;                          // 0x06AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UnsubmergedMaxAccelerationModifier;                        // 0x06B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SubmergedRotationRateModifier;                             // 0x06B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UnsubmergedRotationRateModifier;                           // 0x06B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrictionModifier;                                          // 0x06BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FDamagePrimalCharacterStatusValueModifier> CharacterStatusValueModifiers;                             // 0x06C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	double                                             BuffStartTime;                                             // 0x06D0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MFPA[0x8];                                     // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bForcedOnSpectatorPlayerController;                        // 0x06E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7ZD1[0x7];                                     // 0x06E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          BuffPostProcessEffect;                                     // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              PreventActorClassesTargeting;                              // 0x06F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      PreventActorClassesTargetingRanges;                        // 0x0700(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class AMissionType*                                RelatedMission;                                            // 0x0710(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHasRelatedMission;                                        // 0x0718(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HBGM[0x3];                                     // 0x0719(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAOEApplyOtherBuffOnPlayers : 1;                           // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAOEApplyOtherBuffOnDinos : 1;                             // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAOEApplyOtherBuffIgnoreSameTeam : 1;                      // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAOEApplyOtherBuffRequireSameTeam : 1;                     // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffDrawFloatingHUD : 1;                                  // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddResetsBuffTime : 1;                                    // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAoEBuffAllowIfAlreadyBuffed : 1;                          // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetResetBuffStart : 1;                                    // 0x071C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImmobilizeTarget : 1;                                     // 0x071D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForcePlayerProne : 1;                                     // 0x071D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideBuffFromHUD : 1;                                      // 0x071D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHideTimerFromHUD : 1;                                     // 0x071D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBPAddMultiUseEntries : 1;                                 // 0x071D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBuffPersistent : 1;                                     // 0x071D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPUseBumpedByPawn : 1;                                    // 0x071D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPUseBumpedPawn : 1;                                      // 0x071D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowBuffWhenInstigatorDead : 1;                          // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNotifyDamage : 1;                                         // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowBuffStasis : 1;                                      // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bApplyStatModifierToPlayers : 1;                           // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bApplyStatModifierToDinos : 1;                             // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnWildDino : 1;                                    // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnDino : 1;                                        // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnPlayer : 1;                                      // 0x071E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnBigDino : 1;                                     // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnBossDino : 1;                                    // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventOnRobotDino : 1;                                   // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDisease : 1;                                            // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventAddingOtherBuff : 1;                          // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventRunning : 1;                                  // 0x071F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              PreventIfMovementMassGreaterThan;                          // 0x0720(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RUOJ[0x4];                                     // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AOEOtherBuffToApply;                                       // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AOEBuffRange;                                              // 0x0730(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterAOEBuffDamage;                                    // 0x0734(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CharacterAOEBuffResistance;                                // 0x0738(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Maximum2DVelocityForStaminaRecovery;                       // 0x073C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAddReactivates : 1;                                       // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAoEApplyDamageAllTargetables : 1;                         // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustCharacterMovementImpulse : 1;                  // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustImpulseFromDamage : 1;                         // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetHUDElements : 1;                                  // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetCameraShakeScalar : 1;                            // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDrawMissionDinoTargetHealthbars : 1;                 // 0x0740(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YWF4[0x7];                                     // 0x0741(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  PostprocessBlendablesToExclude;                            // 0x0748(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_DTOR[0x18];                                    // 0x0758(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BuffToGiveOnDeactivation;                                  // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              BuffClassesToCancelOnActivation;                           // 0x0778(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ActivePreventsBuffClasses;                                 // 0x0788(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              BuffRequiresOwnerClass;                                    // 0x0798(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              BuffPreventsOwnerClass;                                    // 0x07A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              XPEarningMultiplier;                                       // 0x07B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPSetupForInstigator;                                  // 0x07BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPDeactivated;                                         // 0x07BD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPOverrideBuffToGiveOnDeactivation;                    // 0x07BE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPCustomAllowAddBuff;                                  // 0x07BF(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPInformDamageCauserOfBuffAdded;                       // 0x07C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPActivated : 1;                                       // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPHandleOnStartFire : 1;                               // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPHandleOnStartAltFire : 1;                            // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPHandleOnStopAltFire : 1;                             // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventFlight : 1;                                   // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRequireController : 1;                                    // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontPlayInstigatorActiveSoundOnDino : 1;                  // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddExtendBuffTime : 1;                                    // 0x07C1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTickingDeactivation : 1;                               // 0x07C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckPreventInput : 1;                                    // 0x07C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPDrawBuffStatusHUD : 1;                                  // 0x07C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnableStaticPathing : 1;                                  // 0x07C2(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bHUDFormatTimerAsTimecode : 1;                             // 0x07C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_L59O[0x1];                                     // 0x07C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     staticPathingDestination;                                  // 0x07C4(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LJD0[0x8];                                     // 0x07D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPPreventThrowingItem : 1;                             // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventInputDoesOffset : 1;                               // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNotifyExperienceGained : 1;                               // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyTickWhenVisible : 1;                                  // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPAdjustStatusValueModification : 1;                      // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_JHFL : 1;                                      // 0x07D8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPNotifyOtherBuffActivated : 1;                        // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyOtherBuffDeactivated : 1;                      // 0x07D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventFirstPerson : 1;                              // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAddUnderwaterCharacterStatusValues : 1;              // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventInstigatorAttack : 1;                              // 0x07D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOnInstigatorMovementModeChangedNotify : 1;           // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventInstigatorMovementMode : 1;                   // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideTalkerCharacter : 1;                         // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffHandleInstigatorMultiUseEntries : 1;                  // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventInstigatorAttack : 1;                         // 0x07D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventOnStartJump : 1;                              // 0x07DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_HJTZ[0x5];                                     // 0x07DB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalBuffPersistentData*                   MyBuffPersistentData;                                      // 0x07E0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffPersistentDataClass;                                   // 0x07E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FMaxStatScaler>                      MaxStatScalers;                                            // 0x07F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TWeakObjectPtr<class AActor>                       DamageCauser;                                              // 0x0800(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ExtraActivationSoundToPlay;                                // 0x0808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPersistentBuffSurvivesLevelUp;                            // 0x0810(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YWBF[0x3];                                     // 0x0811(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AoEApplyDamage;                                            // 0x0814(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AoEApplyDamageInterval;                                    // 0x0818(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TLVU[0x4];                                     // 0x081C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AoEApplyDamageType;                                        // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ForceNetworkSpatializationMaxLimitBuffType;                // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ForceNetworkSpatializationBuffMaxLimitNum;                 // 0x0830(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceNetworkSpatializationBuffMaxLimitRange;               // 0x0834(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationRange;                                           // 0x0838(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperThermiaInsulation;                                    // 0x083C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypoThermiaInsulation;                                     // 0x0840(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     AoEBuffLocOffset;                                          // 0x0844(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AoEClassesToInclude;                                       // 0x0850(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AoEClassesToExclude;                                       // 0x0860(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUseBPExcludeAoEActor;                                     // 0x0870(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOverrideBuffDescription;                                  // 0x0871(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOverrideBuffType;                                         // 0x0872(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOnlyTickIfPlayerCharacter;                                // 0x0873(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOnlyTickWhenPossessed;                                    // 0x0874(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDestroyWhenUnpossessed;                                   // 0x0875(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6XD0[0xA];                                     // 0x0876(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OnlyForInstigatorSoundFadeInTime;                          // 0x0880(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBuffTickServer;                                        // 0x0884(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBuffTickClient;                                        // 0x0885(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AU7N[0x2];                                     // 0x0886(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BuffTickServerMaxTime;                                     // 0x0888(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BuffTickServerMinTime;                                     // 0x088C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BuffTickClientMaxTime;                                     // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BuffTickClientMinTime;                                     // 0x0894(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseRemoteClientTick;                                      // 0x0898(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LWP4[0x3];                                     // 0x0899(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BuffTickRemoteClientMaxTime;                               // 0x089C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BuffTickRemoteClientMinTime;                               // 0x08A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bContinueTickingServerAfterDeactivate;                     // 0x08A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bContinueTickingClientAfterDeactivate;                     // 0x08A5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X4K7[0x26];                                    // 0x08A6(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AddBuffMaxNumStacks;                                       // 0x08CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DeactivatedSound;                                          // 0x08D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDeactivatedSoundOnlyLocal;                                // 0x08D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableBloom;                                             // 0x08D9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bBPModifyCharacterFOV;                                     // 0x08DA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7QCJ[0x1];                                     // 0x08DB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PostProcessInterpSpeedDown;                                // 0x08DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PostProcessInterpSpeedUp;                                  // 0x08E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVCameraSpeedInterpolationMultiplier;                     // 0x08E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsCarryBuff;                                              // 0x08E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CPGQ[0x7];                                     // 0x08E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPostProcessMaterialAdjuster>        PostprocessMaterialAdjusters;                              // 0x08F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bBPOverrideCharacterWalkVelocity : 1;                      // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBPOverrideCharacterSwimmingVelocity : 1;                  // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBPOverrideCharacterNewFallVelocity : 1;                   // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBPOverrideCharacterFlyingVelocity : 1;                    // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOverrideCharacterWalkingVelocity : 1;                // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOverrideCharacterSwimmingVelocity : 1;               // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOverrideCharacterFlyingVelocity : 1;                 // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOverrideCharacterNewFallVelocity : 1;                // 0x0900(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOverrideCharacterLanding : 1;                             // 0x0901(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOverrideCharacterMovementInput : 1;                       // 0x0901(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_SJ7A[0xE];                                     // 0x0902(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AOEBuffIntervalMin;                                        // 0x0910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AOEBuffIntervalMax;                                        // 0x0914(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumVelocityZForSlowingFall;                            // 0x0918(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JORX[0x4];                                     // 0x091C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAllowMultiUseEntriesFromSelf : 1;                         // 0x0920(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GN0Y[0x3];                                     // 0x0921(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPHandleOnStopFire : 1;                                // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceCrosshair : 1;                                       // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventLogoutSleeping : 1;                                // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseInterceptInstigatorPlayerEmote : 1;                    // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTriggerBPStasis : 1;                                      // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTriggerBPUnstasis : 1;                                    // 0x0924(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	bool                                               bAddTPVCameraOffset;                                       // 0x0925(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOverrideTPVCameraOffset;                                  // 0x0926(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K1AV[0x1];                                     // 0x0927(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     TPVCameraOffset;                                           // 0x0928(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOverrideTPVCameraOffsetMultiplier;                        // 0x0934(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3ZC3[0x3];                                     // 0x0935(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     TPVCameraOffsetMultiplier;                                 // 0x0938(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseCenteredTPVCamera;                                     // 0x0944(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBlueprintAnimNotifications;                            // 0x0945(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPGetGravity : 1;                                      // 0x0946(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPOnOwnerMassTeleportEvent : 1;                        // 0x0946(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPShouldForceOwnerDedicatedMovementTickPerFrame : 1;   // 0x0946(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_MDHD[0x1];                                     // 0x0947(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAllowOnlyCustomFallDamage : 1;                            // 0x0948(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ILF3[0x3];                                     // 0x0949(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPGetMoveAnimRate : 1;                                 // 0x094C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPOverrideTargetingDesire : 1;                         // 0x094C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBuffPreventsApplyingLevelUps : 1;                         // 0x094C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBuffPreSerializeForInstigator : 1;                        // 0x094C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOverrideWaterJumpVelocity : 1;                       // 0x094C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UZYV[0x3];                                     // 0x094D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBP_OnOwnerDealtDamage : 1;                             // 0x0950(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseGetGravityZScale : 1;                                  // 0x0950(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_AdjustDamageEx : 1;                                 // 0x0950(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OverrideTerminalVelocity : 1;                       // 0x0950(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBuffOverrideFinalWanderLocation : 1;                   // 0x0950(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bModifyMaxAcceleration : 1;                                // 0x0950(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bModifyRotationRate : 1;                                   // 0x0950(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bModifyFriction : 1;                                       // 0x0950(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableFootstepsParticles : 1;                            // 0x0951(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowAddingWithoutController : 1;                    // 0x0951(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowWhileBuried : 1;                                // 0x0951(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBP_OnOwnerTeleported : 1;                              // 0x0951(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPAdjustRadialDamage : 1;                              // 0x0951(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseForcedBuffAimOverride : 1;                             // 0x0951(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventTekArmorBuffs : 1;                            // 0x0951(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffPreventsInventoryAccess : 1;                          // 0x0951(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bReactivateWithNewDamageCauser : 1;                        // 0x0952(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPDinoNameColorOverride : 1;                           // 0x0952(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffPreventsCryo : 1;                                     // 0x0952(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBuffOverrideInventoryAccessInput : 1;                  // 0x0952(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bListenForInput : 1;                                       // 0x0952(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInterceptUseAction : 1;                                   // 0x0952(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInterceptWeaponToggle : 1;                                // 0x0952(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventNotifySound : 1;                              // 0x0952(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBuffDrawFloatingHUDRemotePlayers : 1;                     // 0x0953(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseConsolidatedMultiUseWheel : 1;                         // 0x0953(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	float                                              CharacterMultiplier_DefaultExtraDamageMultiplier;          // 0x0954(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceAlwaysAllowBuff : 1;                                 // 0x0958(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceSelfTick : 1;                                        // 0x0958(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceInstigatorTick : 1;                                  // 0x0958(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSkipInstigatorTick : 1;                                   // 0x0958(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OQ5B : 2;                                      // 0x0958(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowTurretsToTargetInstigatorIfTraceHitsBuff : 1;        // 0x0958(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YPUJ[0x3];                                     // 0x0959(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StaminaDrainMultiplier;                                    // 0x095C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NW1U[0x8];                                     // 0x0960(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuff");
		return ptr;
	}



	struct FVector UpdateStaticPathingDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool useRandomNegativeXDir, bool orientRandOffsetByRotation, const struct FRotator& randOffsetByRotation, float GroundCheckSpreadOverride);
	void UpdateBuffPersistentData();
	void UpdateBuffLifetime(float NewLifetime, bool bRestartBuffLifetime);
	class APrimalBuff* STATIC_StaticAddBuff(class UClass* BuffClass, class APrimalCharacter* forCharacter, class UPrimalItem* AssociatedItem, class AActor* DamageCauser, bool bForceOnClient);
	bool ShouldForceOwnerDedicatedMovementTickPerFrame();
	void SetValueToAddPerSecond(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatusValueType, float Value);
	void SetupForInstigator();
	void SetBuffCauser(class AActor* CausedBy);
	void ServerRequestRelatedMissionData();
	void ResetServerBuffTick(float MinTime, float MaxTime);
	void ResetClientBuffTick(float MinTime, float MaxTime);
	bool ResetBuffStart();
	bool ReduceBuffTime(float AmountOfTimeToReduce);
	bool PreventJump();
	bool PreventInstigatorMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	bool PreventInstigatorAttack(int AttackIndex);
	bool PreventBlockingWithShield();
	bool PreventActorTargeting(class AActor* ByActor);
	void OnOwnerTeleported();
	void OnInputEvent(class APrimalCharacter* ForPrimalCharacter, TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	void OnCapsuleHitCallback(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBuffLifetimeUpdated();
	void NotifyDamage(float DamageAmount, class UClass* DamageClass, class AController* EventInstigator, class AActor* TheDamageCauser);
	void NotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
	void NotifyBumpedByPawn(class APrimalCharacter* BumpedBy);
	void NetSyncBuffLifetime();
	void NetResetBuffStart();
	void NetDeactivate();
	void Multi_SyncBuffLifetime(float NewDeactivateAfterTime);
	bool IsOwningClient();
	bool InterceptInstigatorPlayerEmoteAnim(class UAnimMontage* EmoteAnim);
	void InstigatorDie();
	bool HideBuffFromHUD();
	void HandleBuffAnimNotify(const struct FName& AnimNotifyName, const struct FString& AnimNotifyStringData);
	float GetValueToAddPerSecond(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatusValueType);
	struct FString GetUniqueName();
	float GetTimeLeft();
	float GetRemainingTime();
	float GetOverrideWaterJumpVelocity(float OutOfWaterZ);
	class APlayerController* GetInstigatorPlayerController();
	float GetHUDProgressBarPercent();
	struct FRotator GetForcedBuffAimOverride(bool bIsWeaponAim);
	struct FString GetDebugInfoString();
	double GetDeactivationTime();
	int GetBuffType();
	float GetBuffTickServerDeltaTime();
	float GetBuffTickClientDeltaTime();
	class UMaterialInstanceDynamic* GetBuffPostprocessMaterial();
	float GetBuffPostprocessIntensity();
	struct FStatusValueModifierDescription GetBuffDescription();
	bool ExtendBuffTime(float AmountOfAdditionalTime);
	void DrawBuffFloatingHUD(int BuffIndex, class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
	void DinoInstigatorReceivedRider(class AShooterCharacter* Rider);
	void DinoInstigatorClearedRider();
	void ClientReceiveRelatedMissionData(class AMissionType* InMission, bool InHasRelatedMission);
	void BuffTickServer(float DeltaTime);
	void BuffTickClient(float DeltaTime);
	void BuffPostAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType);
	bool BuffOverrideInventoryAccessInput(class AController* InController, bool bInputPressed);
	bool BuffOverrideFinalWanderLocation(struct FVector* outVec);
	float BuffAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType);
	void BPUnstasis();
	void BPStasis();
	bool BPShouldForceOwnerDedicatedMovementTickPerFrame();
	void BPSetupForInstigator(class AActor* ForInstigator);
	void BPResetBuffStart();
	void BPReactivateWithDamageCauser(class AActor* ForInstigator, class AActor* ForDamageCauser);
	bool BPPreventThrowingItem(class UPrimalItem* ForItem);
	TArray<struct FName> BPPreventTekArmorBuffs();
	bool BPPreventRunning();
	bool BPPreventOnStartJump();
	bool BPPreventNotifySound(class USoundBase* SoundIn);
	bool BPPreventInstigatorMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	bool BPPreventInstigatorAttack(int AttackIndex);
	bool BPPreventflight();
	bool BPPreventFirstPerson();
	bool BPPreventCharacterStatusValueModifiers(class APrimalCharacter* ForInstigator);
	bool BPPreventCharacterLanding(const struct FVector& ImpactPoint, const struct FVector& ImpactAccel, const struct FVector& ImpactVelocity, struct FVector* NewVelocity);
	bool BPPreventAddingOtherBuff(class UClass* anotherBuffClass);
	void BPPreSetupForInstigator(class AActor* ForInstigator);
	void BPPreSerializeForInstigator(bool bBeginningSerialize);
	struct FVector BPOverrideWeaponBob(const struct FVector& InWeaponBob);
	float BPOverrideTargetingDesire(class AActor* forTarget, float ForTargetingDesireValue);
	class APrimalCharacter* BPOverrideTalkerCharacter();
	bool BPOverrideIsNetRelevantFor(class APlayerController* RealViewer, class AActor* Viewer, const struct FVector& SrcLocation);
	struct FVector BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
	void BPOverrideCameraViewTarget(const struct FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV);
	class UClass* BPOverrideBuffToGiveOnDeactivation();
	void BPOnOwnerMassTeleportEvent(TEnumAsByte<ShooterGame_EMassTeleportState> EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void BPOnInstigatorMovementModeChangedNotify(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void BPOnInstigatorCapsuleComponentHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BPOnInputEvent(TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	void BPNotifyPreventDismounting(class APrimalDinoCharacter* FromDino);
	void BPNotifyOtherBuffDeactivated(class APrimalBuff* OtherBuff);
	void BPNotifyOtherBuffActivated(class APrimalBuff* OtherBuff);
	void BPNotifyExperienceGained(float ActualExpGained, float ExpectedExpGain, TEnumAsByte<ShooterGame_EXPType> ExpTypeGained);
	void BPNonDedicatedPlayerPostAnimUpdate();
	TArray<struct FBoneModifier> BPModifyPlayerBoneModifiers(TArray<struct FBoneModifier> InBoneModifiers);
	bool BPIsValidUnStasisCaster();
	bool BPIsCharacterHardAttached();
	bool BPInterceptWeaponToggle();
	bool BPInterceptUseAction();
	void BPInstigatorUnpossessed();
	void BPInstigatorSleeped(bool bIsSleeped);
	void BPInstigatorReceivedKillingDamage();
	void BPInstigatorPossessed(class AController* ByController);
	void BPInstigatorLocalPossessed(class AShooterPlayerController* ByController);
	void BPInstigatorDied();
	void BPInitializedCharacterAnimScriptInstance();
	bool BPInformDamageCauserOfBuffAdded(class APrimalCharacter* forCharacter, class AActor* DamageCauser);
	void BPHandleOnStopFire(bool bFromGamepad);
	void BPHandleOnStopAltFire(bool bFromGamepad);
	void BPHandleOnStartFire(bool bFromGamepad);
	void BPHandleOnStartAltFire(bool bFromGamepad);
	float BPGetMoveAnimRate();
	void BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements);
	float BPGetGravityZScale(float currentScale);
	struct FColor BPGetDinoNameColorOverride(class AShooterHUD* HUD, const struct FColor& ColorToOverride);
	struct FString BPGetDebugInfoString();
	float BPGetBabyImprintingSpeedMultiplier();
	int BPForceDinoNameTargetingTeamOverride(class AShooterHUD* HUD, int TargetingTeamToCheck);
	TEnumAsByte<ShooterGame_ECameraStyle> BPForceCameraStyle(class APrimalCharacter* ForViewTarget);
	bool BPExcludeAoEActor(class AActor* ActorToConsider);
	void BPDrawBuffStatusHUD(class AShooterHUD* HUD, float XPos, float YPos, float ScaleMult);
	void BPDinoRefreshColorization(TArray<struct FLinearColor> DinoColors, TArray<struct FLinearColor>* OverrideColors);
	void BPDeactivated(class AActor* ForInstigator);
	void BPDeactivate();
	bool BPCustomAllowAddBuff(class APrimalCharacter* forCharacter, class AActor* DamageCauser);
	bool BPCheckPreventInput(TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	void BPCharacterDetach();
	bool BPCanBeCarried(class APrimalCharacter* ByCarrier);
	bool BPBuffPreventUploading();
	float BPBPGetCameraShakeScalar(class UClass* currentShake, float currentScale);
	void BPAnimNotifyCustomState_End(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	float BPAdjustStatusValueModification(class UPrimalCharacterStatusComponent* ForComponent, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float InAmount, class UClass* DamageTypeClass, bool bManualModification);
	float BPAdjustRadialDamage(float currentDamage, const struct FVector& Origin, const struct FRadialDamageEvent& DamageEvent);
	struct FVector BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
	float BPAdjustDamage_Ex(float Damage, const struct FHitResult& HitInfo, const struct FVector& ImpulseDir, class AController* EventInstigator, class AActor* InDamageCauser, class UClass* TheDamgeType);
	struct FVector BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
	void BPActivated(class AActor* ForInstigator);
	float BP_OverrideTerminalVelocity();
	float BP_OverrideMoveRightInput(float CurrentInput);
	float BP_OverrideMoveForwardInput(float CurrentInput);
	struct FVector BP_OverrideCharacterWalkingVelocity(const struct FVector& InitialVelocity, float Friction, float DeltaTime);
	struct FVector BP_OverrideCharacterSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime);
	struct FVector BP_OverrideCharacterFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
	void BP_OnOwnerTeleported();
	void BP_OnOwnerDealtDamage(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
	void BP_OnBuffLifetimeUpdated();
	float BP_ModifyCharacterFOV(float inFOV);
	bool AllowPostProcessEffect();
	void AddDamageStatusValueModifier(class APrimalCharacter* addToCharacter, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, bool bSpeedToAddInSeconds, bool bContinueOnUnchangedValue, bool bResetExistingModifierDescriptionIndex, bool bSetValue, bool bSetAdditionalValue, float LimitExistingModifierDescriptionToMaxAmount, float DamageMultiplierAmountToAdd, float SpeedToAdd, int StatusValueModifierDescriptionIndex, bool bUsePercentualDamage, bool bMakeUntameable, float PercentualDamage, class UClass* ScaleValueByCharacterDamageType);
	void AddBuffLifetime(float AdditionalLifetime);
};

// Class ShooterGame.PrimalBuff_Companion
// 0x0798 (FullSize[0x1100] - InheritedSize[0x0968])
class APrimalBuff_Companion : public APrimalBuff
{
public:
	class USceneComponent*                             CompanionRoot;                                             // 0x0968(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      CompanionMeshComp;                                         // 0x0970(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USphereComponent*                            CompanionUseSphereComp;                                    // 0x0978(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AShooterCharacter>            MyPlayer;                                                  // 0x0980(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AShooterPlayerController>     MyPC;                                                      // 0x0988(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDebugCompanion : 1;                                       // 0x0990(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsOrbitingPointOfInterest : 1;                            // 0x0990(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bHasReachedPointOrbit : 1;                                 // 0x0990(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      UnknownData_69MN[0x3];                                     // 0x0991(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReachPointOrbitWithinDist;                                 // 0x0994(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReactionDialogVolumeMultiplier;                            // 0x0998(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CompanionViewDot;                                          // 0x099C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundAttenuation*                           CompanionSoundAttenuation;                                 // 0x09A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DefaultMissionCompanionReactionData;                       // 0x09A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    CurrentCompanionReactionVFX;                               // 0x09B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             CurrentCompanionReactionSFX;                               // 0x09B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	TArray<struct FPointOfInterestData_ForCompanion>   CurrentPointsOfInterest;                                   // 0x09C0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TEnumAsByte<ShooterGame_ECompanionState>           CompanionState_Current;                                    // 0x09D0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	TEnumAsByte<ShooterGame_ECompanionState>           CompanionState_Previous;                                   // 0x09D1(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6IRQ[0x6];                                     // 0x09D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCompanionReactionData>              ReactionStack;                                             // 0x09D8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UMaterialInterface*>                  DialogueIconOverrideStack;                                 // 0x09E8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<int>                                        CurrentIDStack;                                            // 0x09F8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	struct FVector                                     CurrentFocusedLocation;                                    // 0x0A08(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8B1S[0xC];                                     // 0x0A14(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPointOfInterestData_ForCompanion           CurrentFocusedPointData;                                   // 0x0A20(0x03F0) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FCompanionEventData                         CurrentEventData;                                          // 0x0E10(0x0050) (BlueprintVisible, BlueprintReadOnly, Transient)
	class AActor*                                      CurrentEventActor;                                         // 0x0E60(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       LastPointTag_StartOrbit;                                   // 0x0E68(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       LastPointTag_ReachedOrbit;                                 // 0x0E70(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastPlayedReactionNetworkTime;                             // 0x0E78(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bShowsHexagonsInInventory : 1;                             // 0x0E80(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnableDebugReactions : 1;                                 // 0x0E80(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_20GB[0x7];                                     // 0x0E81(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCompanionReactionData                      PreviouslyPlayedReaction;                                  // 0x0E88(0x00A0) (Edit, BlueprintVisible, DisableEditOnTemplate)
	unsigned char                                      bDontPlayEnglishLinesAsLocalizationFallback : 1;           // 0x0F28(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_020G[0x7];                                     // 0x0F29(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             FullyTranslatedLanguages;                                  // 0x0F30(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      HUDOverlayToolTipWidgetExtended;                           // 0x0F40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  AsyncLoadedDialogueAnimTexture;                            // 0x0F48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class USoundCue*                                   AsyncLoadedSoundCue;                                       // 0x0F50(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class USoundWave*                                  AsyncLoadedSoundWave;                                      // 0x0F58(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       AnimTextureParamName;                                      // 0x0F60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       AnimTextureStartTimeParamName;                             // 0x0F68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       AnimTextureDurationParamName;                              // 0x0F70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              AnimTextureDurationOffset;                                 // 0x0F78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bIsAwaitingLoadedTexture : 1;                              // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bHasFinishedLoadingTexture : 1;                            // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bIsAwaitingLoadedSoundCue : 1;                             // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bHasFinishedLoadingSoundWave : 1;                          // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bIsAwaitingLoadedSoundWave : 1;                            // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bHasFinishedLoadingSoundCue : 1;                           // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bProbablyPlayingReaction : 1;                              // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bHasSomePaddingBeforePlayingReaction : 1;                  // 0x0F7C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bGoingToTryToSplitSoundCueForLocalization : 1;             // 0x0F7D(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bHasPlayedDefaultReactionAnimTexture : 1;                  // 0x0F7D(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bIsPlayingFallbackReactionAnimTexture : 1;                 // 0x0F7D(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bForceCompanionHidden : 1;                                 // 0x0F7D(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_DYF7[0x2];                                     // 0x0F7E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrentReactionSFXIndex;                                   // 0x0F80(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                PreviousReactionSFXIndex;                                  // 0x0F84(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FStringAssetReference                       CurrentSoundWaveStringAssetReference;                      // 0x0F88(0x0010) (Edit, ZeroConstructor, Protected)
	struct FStringAssetReference                       CurrentSoundCueStringAssetReference;                       // 0x0F98(0x0010) (Edit, ZeroConstructor, Protected)
	struct FStringAssetReference                       CurrentAnimTextureStringAssetReference;                    // 0x0FA8(0x0010) (Edit, ZeroConstructor, Protected)
	TArray<class UMaterialInstanceDynamic*>            MeshDynamicMaterials;                                      // 0x0FB8(0x0010) (ZeroConstructor, Transient, Protected)
	class UMaterialInterface*                          CompanionReactionSubtitleIcon;                             // 0x0FC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FStringAssetReference                       DefaultReactionAnimtexture;                                // 0x0FD0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected)
	struct FLocalizedSoundWaveAnimTexturePairArrays    LocalizedAudioTracks;                                      // 0x0FE0(0x0020) (Edit, Protected)
	bool                                               IsUsingLocalizedAudioTrack;                                // 0x1000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	bool                                               DebugBypassVRTeleportRestrictions;                         // 0x1001(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               ForcedMonologueCheat;                                      // 0x1002(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LUPY[0x5];                                     // 0x1003(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TAssetPtr<class UClass>                            FinalBossFightEasy;                                        // 0x1008(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_9J2T[0x4];                                     // 0x1003(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TAssetPtr<class UClass>                            FinalBossFightMed;                                         // 0x1028(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_8SY4[0x4];                                     // 0x1028(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TAssetPtr<class UClass>                            FinalBossFightHard;                                        // 0x1048(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_YLFU[0x4];                                     // 0x1048(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TAssetPtr<class UClass>                            FinalBossFightFlowTest;                                    // 0x1068(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_NY1F[0x4];                                     // 0x1068(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              AllowedHLNAFocusedSelectedRemoteTargetDistance;            // 0x1088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HCZW[0x1C];                                    // 0x108C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnReactionPlayed_Delegate;                                 // 0x10A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReactionStopped_Delegate;                                // 0x10B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReactionAnimPlayed_Delegate;                             // 0x10C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReactionComponentSpawned_VFX_Delegate;                   // 0x10D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReactionComponentSpawned_SFX_Delegate;                   // 0x10E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_HPCK[0x8];                                     // 0x10F8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuff_Companion");
		return ptr;
	}



	bool TraceForCompanionBlockersFromPlayer(struct FVector* AdjustedLocation, const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bDebug, float TraceRadius);
	void Tick_UpdateCompanionTransform(float DeltaTime);
	void Tick_UpdateCompanionState(float DeltaTime);
	void Tick_CompanionSearchForPOIs(float DeltaTime);
	void Tick_CompanionReactions(float DeltaTime);
	void Tick_CompanionEvents(float DeltaTime);
	void StopCompanionReaction();
	void StopCompanionMontage(class UAnimMontage* AnimToStop, float BlendOutTime);
	void StopCompanionEventExternal();
	void StopCompanionEvent();
	void StartCompanionEventExternal(class AActor* EventActor, struct FCompanionEventData* WithEventData);
	void StartCompanionEvent(class AActor* EventActor, struct FCompanionEventData* WithEventData);
	bool ShouldOrbitPointOfInterest(const struct FPointOfInterestData_ForCompanion& WithPointData);
	void SetUpAnimTexture();
	void SetCompaionHiddenSetting(bool isHidden);
	void Server_SetCompanionState(TEnumAsByte<ShooterGame_ECompanionState> NewState);
	void RefreshCompanionColorization();
	void PlayLinkedCompanionReactionsByExplorerNoteIndex(int index);
	float PlayCompanionMontage(class UAnimMontage* AnimToPlay, float BlendInTime, float BlendOutTime, float PlayRate);
	void OutputAsyncLoadedFiles();
	void OnSpawnHexagons(float OverrideCollectSFXVolume, bool VFXImmediatelyAttracts);
	void OnSpawnedForPlayer();
	void OnRep_CompanionState();
	void OnPlayerPlayAnimation(class UAnimMontage* PlayedAnim, float AnimDuration, const struct FName& StartSectionName);
	void OnPlayerDeath(class APrimalCharacter* DiedCharacter);
	void OnMyPlayerMissionStarted(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission);
	void OnMyPlayerMissionComplete(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission, bool bSuccess);
	void OnMadeHexagonPurchase();
	void OnFoundPoI(struct FPointOfInterestData_ForCompanion* FoundPointData, class AActor* FoundPointActor);
	void OnEndOverlapCompanionEventTrigger(class AActor* ForTrigger);
	void OnCompanionStateChanged();
	void OnCompanionReactionStopped(const struct FCompanionReactionData& StoppedReactionData, int UniqueID);
	void OnCompanionReactionPlayed(const struct FCompanionReactionData& PlayedReactionData, int UniqueID);
	void OnCompanionEventStarted(const struct FCompanionEventData& StartingEventData);
	void OnCompanionEventEnded(const struct FCompanionEventData& StoppingEventData);
	void OnBeginOverlapCompanionEventTrigger(class AActor* ForTrigger);
	void NotifyItemCrafted(class UPrimalItem* anItem);
	void NotifyItemAddedToCropPlot(class UPrimalItem* anItem);
	void NotifyHasTamedDino(class UClass* DinoClass);
	void Net_SetCompanionState(TEnumAsByte<ShooterGame_ECompanionState> NewState);
	bool IsPlayingCompanionReaction();
	bool IsPlayerLookingAtCompanion();
	bool IsPlayerADS();
	bool IsCompanionReadyToMonologue();
	bool IsCompanionAbleToMonologue();
	bool HasCompanionReachedPointOrbit(const struct FPointOfInterestData_ForCompanion& OfPointData);
	struct FVector STATIC_GetPointCompanionWorldOrbitOrigin(const struct FPointOfInterestData_ForCompanion& ForPointData);
	class AShooterHUD* GetMyPlayerHUD();
	struct FCompanionReactionData GetCurrentCompanionReactionData();
	struct FCompanionEventData GetCurrentCompanionEventData();
	struct FVector GetCompanionWorldLocation();
	bool GetClosestNearbyPointOfInterest(struct FPointOfInterestData_ForCompanion* ClosestPointData, struct FVector* ClosestPointLoc);
	TArray<class AActor*> STATIC_GetAllExplorerNotesInWorld(class UWorld* World);
	bool ForceUnhibernateAtLocation(const struct FVector& AtLocation);
	bool ForceHibernateAtLocation(const struct FVector& AtLocation, TArray<class AActor*> ActorsToHibernate);
	void FocusOnRemoteTarget();
	void DrawFocusedActorToolTip(class AActor* targetedActor);
	void Delegate_OnCompanionReactionVfxSpawned__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UParticleSystemComponent* SpawnedComp_VFX);
	void Delegate_OnCompanionReactionStopped__DelegateSignature(class APrimalBuff_Companion* ReactingCompanion, const struct FCompanionReactionData& ReactionData, int UniqueID);
	void Delegate_OnCompanionReactionSfxSpawned__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UAudioComponent* SpawnedComp_SFX);
	void Delegate_OnCompanionReactionPlayed__DelegateSignature(class APrimalBuff_Companion* ReactingCompanion, const struct FCompanionReactionData& ReactionData, int UniqueID);
	void Delegate_OnCompanionReactionAnimPlayed__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UAnimMontage* PlayedAnim);
	void ClientToggleForceMonologue(bool Newval);
	void ClientOutputAsyncLoadedFiles();
	void ClientAllowVRTeleport();
	void Client_AddCompanionReaction(const struct FCompanionReactionData& WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int UniqueID);
	bool CanStartCompanionEvent(class AActor* EventActor, struct FCompanionEventData* WithEventData);
	bool CanRemotelyFocusOnRemoteActorForTooltip(class AActor* targetedActor);
	bool CanPlayEnvironmentalCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData);
	bool CanPlayCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData);
	void AnimateOutHLNASubtitleIcon();
	void AnimateInHLNASubtitleIcon();
	void AddCompanionReaction(struct FCompanionReactionData* WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int UniqueID);
};

// Class ShooterGame.CompanionEventTrigger
// 0x0060 (FullSize[0x0910] - InheritedSize[0x08B0])
class ACompanionEventTrigger : public APointOfInterestActor
{
public:
	class UBoxComponent*                               BoxTriggerComp;                                            // 0x08B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UTextRenderComponent*                        EventTitleTextComp;                                        // 0x08B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FCompanionEventData                         MyEventData;                                               // 0x08C0(0x0050) (Edit, DisableEditOnTemplate, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CompanionEventTrigger");
		return ptr;
	}



	void OnEndOverlap(class AActor* Actor);
	void OnBeginOverlap(class AActor* Actor);
};

// Class ShooterGame.PointOfInterestCosmeticActor
// 0x0150 (FullSize[0x05C0] - InheritedSize[0x0470])
class APointOfInterestCosmeticActor : public AActor
{
public:
	class USceneComponent*                             CosmeticRootComp;                                          // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    CosmeticParticlesComp;                                     // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FPointOfInterestData                        MyPointOfInterestData;                                     // 0x0480(0x0140) (BlueprintVisible, BlueprintReadOnly, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PointOfInterestCosmeticActor");
		return ptr;
	}



};

// Class ShooterGame.PreviewImage
// 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
class UPreviewImage : public UObject
{
public:
	unsigned char                                      UnknownData_RMJI[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOV;                                                       // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DTEO[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTarget2D*                      RenderTarget;                                              // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MeshScale;                                                 // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LightBrightness;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    LightRotation;                                             // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    MeshRotation;                                              // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CameraLocation;                                            // 0x0068(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    CameraRotation;                                            // 0x0074(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESkyLightSourceType>            AmbientSourceType;                                         // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VDTT[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                AmbientCubemap;                                            // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      AmbientLightColor;                                         // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientBrightness;                                         // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWorld*                                      GameWorld;                                                 // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	TArray<class USceneComponent*>                     PreviewComponents;                                         // 0x00A0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected)
	class UMeshComponent*                              PreviewMesh;                                               // 0x00B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class UWorld*                                      PreviewWorld;                                              // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class USceneCaptureComponent2D*                    CaptureComponent;                                          // 0x00C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class UDirectionalLightComponent*                  DirctionalLight;                                           // 0x00C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class USkyLightComponent*                          SkyLight;                                                  // 0x00D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PreviewImage");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIState
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UPrimalAIState : public UObject
{
public:
	class APrimalDinoCharacter*                        Pawn;                                                      // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       AnimationCustomName;                                       // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UPrimalAIState*>                      ChildStates;                                               // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	class UPrimalAIState*                              ParentState;                                               // 0x0048(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      IsInAnimationState : 1;                                    // 0x0050(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      IsInAttackState : 1;                                       // 0x0050(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldResetInLosingTarget : 1;                            // 0x0050(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPCanUseState : 1;                                        // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSkipIntervalCheck : 1;                               // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSkipRangeCheck : 1;                                  // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	bool                                               bUseBPCanAttack;                                           // 0x0051(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPOverrideAttackWeight;                                // 0x0052(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8XDH[0x5];                                     // 0x0053(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIState");
		return ptr;
	}



	void TickAnimationStateEvent(float DeltaTime, const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	void TickAnimationState(float DeltaTime, const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	void StartAnimationStateEvent(const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	void StartAnimationState(const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	bool ShouldSkipRangeCheckEvent();
	bool ShouldSkipIntervalCheckEvent();
	void SetLastAttackTime();
	void SetInAnimationStateActive(bool Value);
	void OnTickEvent(float DeltaSeconds);
	void OnTick(float DeltaSeconds);
	void OnEndEvent();
	void OnEnd();
	void OnChildStateEndedEvent(class UPrimalAIState* PrimalAIState);
	bool OnCanUseStateEvent();
	void OnBeginEvent(class UPrimalAIState* InParentState);
	void OnBegin(class UPrimalAIState* InParentState);
	struct FString GetDebugInfoString();
	void EndAnimationStateEvent(const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	void EndAnimationState(const struct FName& CustomEventName, TEnumAsByte<Engine_ENetRole> Role);
	bool CanUseState();
	float BPOverrideAttackWeight(float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget);
	bool BPIsChildState();
	struct FString BPGetDebugInfoString();
	bool BPCanAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget);
};

// Class ShooterGame.PrimalAIStateBPBase
// 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
class UPrimalAIStateBPBase : public UPrimalAIState
{
public:
	unsigned char                                      bCanAttackWhileFlying : 1;                                 // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClearAttackStateOnEnd : 1;                                // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnClearAttackState : 1;                              // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_E5SM : 1;                                      // 0x0058(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsMeleeAttack : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTickEvent : 1;                                         // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_R7WP[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTickEventTime;                                          // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxTickEventTime;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseTickAnimationStateEvent : 1;                           // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPShouldEndAttack : 1;                                 // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAnimNotifyCustomEvent : 1;                         // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEndStateWhenAttackAnimCompletes : 1;                      // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAttackStart : 1;                                   // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAttackEnd : 1;                                     // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAttackTick : 1;                                    // 0x0064(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_7A0J[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinAttackTickTime;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxAttackTickTime;                                         // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_43QT[0x30];                                    // 0x0070(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateBPBase");
		return ptr;
	}



	bool SpawnAndFireProjectile(class UClass* ProjectileClass, const struct FName& ProjectileSocket, float ProjectileInterval, bool bOverrideProjectileSpawn, const struct FVector& OverrideSpawnLoc, const struct FRotator& OverrideSpawnRot);
	void SetLastAttackTimeToNow(float Offset);
	bool IsTimeSinceStateBegin(float CheckTimeSince, bool bForceTrueAtZeroTime);
	float GetTimeSinceStateBegin();
	double GetStateBeginTime();
	void GetLastAttackTimeAndInterval(double* LastAttackTime, float* AttackInterval);
	void FinishState();
	void DealMeleeDamageDirect(class AActor* TargetActor, const struct FVector& DamageSourceWorldLocation, float DamageAmount, float DamageImpulse, class UClass* DamageTypeClass, bool bUseBlueprintAdjustOutputDamage, bool bInstantlyHarvestCorpse);
	void DealMeleeDamage(class AActor* Actor, const struct FHitResult& FromHitResult);
	bool BPShouldEndAttack();
	void BPOnClearAttackState();
	void BPOnAttackTick(float DeltaTime);
	void BPOnAttackStart(int AttackIndex);
	void BPOnAttackEnd(int AttackIndex);
	void BPOnAnimNotifyCustomEvent(const struct FName& CustomEventName, class UAnimSequenceBase* Animation, TEnumAsByte<Engine_ENetRole> Role);
};

// Class ShooterGame.PrimalAIStateDinoMeleeState
// 0x0038 (FullSize[0x0090] - InheritedSize[0x0058])
class UPrimalAIStateDinoMeleeState : public UPrimalAIState
{
public:
	class UClass*                                      SpawnProjectileClass;                                      // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SpawnProjectileInterval;                                   // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpawnProjectileSocket;                                     // 0x0064(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bCanAttackWhileFlying : 1;                                 // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClearAttackStateOnEnd : 1;                                // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoSecondarySwingTrace : 1;                                // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GSBV : 2;                                      // 0x006C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDontActuallyDealDamage : 1;                               // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnHitActor : 1;                                      // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetSocketLocation : 1;                               // 0x006C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_JQ1E[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              SecondarySwingRadiusTargetClasses;                         // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SecondarySwingRadius;                                      // 0x0080(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SecondarySwingLocOffset;                                   // 0x0084(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoMeleeState");
		return ptr;
	}



	void BPOnHitActor(const struct FHitResult& HitResult);
	void BPGetSocketLocation(const struct FName& SocketName, struct FVector* SocketLocation);
};

// Class ShooterGame.PrimalAIStateDinoFlyerGrab
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UPrimalAIStateDinoFlyerGrab : public UPrimalAIStateDinoMeleeState
{
public:
	class APrimalCharacter*                            FirstHit;                                                  // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoFlyerGrab");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIStateDinoGrabAndReleaseState
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UPrimalAIStateDinoGrabAndReleaseState : public UPrimalAIStateDinoMeleeState
{
public:
	class APrimalCharacter*                            FirstHit;                                                  // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoGrabAndReleaseState");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIStateDinoRangedState
// 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
class UPrimalAIStateDinoRangedState : public UPrimalAIState
{
public:
	float                                              AccuracyWeight;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClampAngle;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     WorldGeometryTargetLocOffset;                              // 0x0060(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     CharacterTargetLocOffset;                                  // 0x006C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bScaleProjDamageByDinoDamage : 1;                          // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGetTargetDirection : 1;                                   // 0x0078(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bUseAimSocket : 1;                                         // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_H08K : 1;                                      // 0x0078(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseRangedSockets : 1;                                     // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRangedAttack : 1;                                    // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRangedAttackOnBegin : 1;                             // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLeadTarget : 1;                                           // 0x0078(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_FHHU[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       AimSocket;                                                 // 0x007C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8SSL[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               RangedSockets;                                             // 0x0088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SpreadOffset;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7Z3T[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoRangedState");
		return ptr;
	}



	void PreventAttackForTime(float Time);
	struct FVector OffsetVectorRandomlyReturnsAltered(const struct FVector& InVector, float minPercent, float maxPercent);
	float GetZGravityOffset(const struct FVector& ProjectileVelocity, const struct FVector& ProjectileStartLocation, const struct FVector& ProjectileFinalLocation);
	struct FVector FindDirectionToLeadTarget(const struct FVector& VectorToHitTargetStandingStill, float extraTimeAllowed, const struct FVector& currentVelocityOfTarget);
	struct FVector ClampProjectileVectorInForwardDirection(const struct FVector& OriginalShootingDirection, const struct FName& RangedSocket);
	void BPRangedAttackOnBegin(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
	void BPRangedAttack(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
};

// Class ShooterGame.PrimalAIStateBotRangedState
// 0x0020 (FullSize[0x00C0] - InheritedSize[0x00A0])
class UPrimalAIStateBotRangedState : public UPrimalAIStateDinoRangedState
{
public:
	bool                                               bDrawDebug;                                                // 0x00A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_04KD[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ChanceBotWillAimDirectlyAtPlayer;                          // 0x00A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChanceBotWillAimDirectlyAtDino;                            // 0x00A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChanceBotWillCompletelyMissPlayer;                         // 0x00AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChanceBotWillCompletelyMissDino;                           // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ConeHalfAngle;                                             // 0x00B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ConeHalfAngleRandRange;                                    // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPGetSocketLocation;                                   // 0x00BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_34U2[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateBotRangedState");
		return ptr;
	}



	struct FVector BPGetSocketLocation();
};

// Class ShooterGame.PrimalAIStateDinoSpiderRangedWebState
// 0x0030 (FullSize[0x00D0] - InheritedSize[0x00A0])
class UPrimalAIStateDinoSpiderRangedWebState : public UPrimalAIStateDinoRangedState
{
public:
	struct FName                                       SprayStartSocket;                                          // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SprayEndSocket;                                            // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bClampDirection : 1;                                       // 0x00B0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_W9MP[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeBetweenProjectile;                                     // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LeadTime;                                                  // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VR8X[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             NextSprayTime;                                             // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              SpreadOffsetPitch;                                         // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NumberOfProjectilesMultiplier;                             // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoSpiderRangedWebState");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIStateDinoSpineyLizardTailRangeState
// 0x0008 (FullSize[0x00A8] - InheritedSize[0x00A0])
class UPrimalAIStateDinoSpineyLizardTailRangeState : public UPrimalAIStateDinoRangedState
{
public:
	unsigned char                                      UnknownData_ENF0[0x8];                                     // 0x00A0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoSpineyLizardTailRangeState");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIStateDinoSpiderMinions
// 0x0078 (FullSize[0x00D0] - InheritedSize[0x0058])
class UPrimalAIStateDinoSpiderMinions : public UPrimalAIState
{
public:
	class UClass*                                      MinionCharacterTypeClass;                                  // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              MinionCharacterTypeClasses;                                // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      MinionCharacterTypeClassesWeights;                         // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      MinionMaxCount;                                            // 0x0080(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9MJZ[0x17];                                    // 0x0081(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     SpawnRandomOffset;                                         // 0x0098(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SpawnFixedOffset;                                          // 0x00A4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EggSocket;                                                 // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFirstBatch;                                               // 0x00B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPreventMinionTaming;                                      // 0x00B9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventMinionSaving;                                      // 0x00BA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2FLM[0x1];                                     // 0x00BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BatchMinionCoolDown;                                       // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LastBatchTime;                                             // 0x00C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      BatchCount;                                                // 0x00C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      AbsoluteMaxMinions;                                        // 0x00C5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      RemainingMinionBatchCount;                                 // 0x00C6(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LFWR[0x1];                                     // 0x00C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OverrideMinionBaseLevel;                                   // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NumMinionsToSpawn;                                         // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoSpiderMinions");
		return ptr;
	}



};

// Class ShooterGame.PrimalAIStateDinoSpiderRangedAcidState
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UPrimalAIStateDinoSpiderRangedAcidState : public UPrimalAIState
{
public:
	struct FName                                       SprayStartSocket;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeBetweenProjectile;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bScaleProjDamageByDinoDamage;                              // 0x0064(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAimAtTarget;                                              // 0x0065(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZR5O[0x2];                                     // 0x0066(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             NextSprayTime;                                             // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalAIStateDinoSpiderRangedAcidState");
		return ptr;
	}



};

// Class ShooterGame.PrimalBotRidingComponent
// 0x0010 (FullSize[0x00E8] - InheritedSize[0x00D8])
class UPrimalBotRidingComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class APrimalBotCharacter>          Rider;                                                     // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalBotCharacter>          Claimer;                                                   // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBotRidingComponent");
		return ptr;
	}



};

// Class ShooterGame.PrimalBuffPersistentData
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UPrimalBuffPersistentData : public UObject
{
public:
	bool                                               bPermanentlyPersist;                                       // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FYLM[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ForPrimalBuffClass;                                        // 0x0030(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FString                                     ForPrimalBuffClassString;                                  // 0x0038(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuffPersistentData");
		return ptr;
	}



};

// Class ShooterGame.PrimalBuffPersistentData_MissionData
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UPrimalBuffPersistentData_MissionData : public UPrimalBuffPersistentData
{
public:
	class AMissionType*                                ActiveMission;                                             // 0x0048(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ActiveMissionIndex;                                        // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_TDUO[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSerializedMissionData>              missionData;                                               // 0x0058(0x0010) (BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuffPersistentData_MissionData");
		return ptr;
	}



};

// Class ShooterGame.PrimalCableActor
// 0x0008 (FullSize[0x0478] - InheritedSize[0x0470])
class APrimalCableActor : public AActor
{
public:
	class UPrimalCableComponent*                       CableComponent;                                            // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCableActor");
		return ptr;
	}



};

// Class ShooterGame.PrimalCableComponent
// 0x0068 (FullSize[0x06E0] - InheritedSize[0x0678])
class UPrimalCableComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_VX4H[0x8];                                     // 0x0678(0x0008) Fix Super Size
	struct FComponentReference                         AttachEndTo;                                               // 0x0680(0x0018) (Edit)
	struct FVector                                     EndLocation;                                               // 0x0698(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CableLength;                                               // 0x06A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumSegments;                                               // 0x06A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SubstepTime;                                               // 0x06AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                SolverIterations;                                          // 0x06B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxParticleSpeed;                                          // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CableWidth;                                                // 0x06B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumSides;                                                  // 0x06BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TileMaterial;                                              // 0x06C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bRenderFirstHalfOnly;                                      // 0x06C4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_THQR[0x1B];                                    // 0x06C5(0x001B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCableComponent");
		return ptr;
	}



	void SpreadOutParticles(const struct FVector& StartPosition, const struct FVector& EndPosition);
	void SetAttachEndOverrideComponent(class USceneComponent* Component);
	void MarkRenderDynamicDataDirtyBP();
	void GetEndPositions(struct FVector* OutStartPosition, struct FVector* OutEndPosition);
	struct FCableParticle GetCableParticle(int idx);
	struct FVector GetCableMidPoint();
	class USceneComponent* GetAttachEndOverrideComponent();
};

// Class ShooterGame.PrimalCharacter
// 0x0A90 (FullSize[0x1160] - InheritedSize[0x06D0])
class APrimalCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData_YD4B[0x8];                                     // 0x06D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     OldLocation;                                               // 0x06D8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FRotator                                    OldRotation;                                               // 0x06E4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              EffectorInterpSpeed;                                       // 0x06F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HalfLegLength;                                             // 0x06F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TwoLeggedVirtualPointDistFactor;                           // 0x06F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FullIKDistance;                                            // 0x06FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IKAfterFallingTime;                                        // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SimpleIkRate;                                              // 0x0704(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     GroundCheckExtent;                                         // 0x0708(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H42Q[0x4];                                     // 0x0714(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastForceAimedCharactersTime;                              // 0x0718(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                JumpAnim;                                                  // 0x0720(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                LandedAnim;                                                // 0x0728(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                HurtAnim;                                                  // 0x0730(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                HurtAnim_Flying;                                           // 0x0738(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                PinnedAnim;                                                // 0x0740(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             HurtFX;                                                    // 0x0748(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                                   HurtSound;                                                 // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RootBodyBoneName;                                          // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FDecalData                                  HurtDecalData;                                             // 0x0760(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_7B7W[0x18];                                    // 0x0780(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsVoiceTalking;                                           // 0x0798(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7R3U[0x1];                                     // 0x0799(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBlueprintJumpInputEvents : 1;                          // 0x079A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOverrideAccessInventoryInput : 1;                    // 0x079A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableCameraShakeOnNotifyHit : 1;                        // 0x079A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHasBuffPreSerializeForInstigator : 1;                     // 0x079A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_NX29[0x5];                                     // 0x079B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TribeName;                                                 // 0x07A0(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame)
	float                                              WaterSubmergedDepthThreshold;                              // 0x07B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProneWaterSubmergedDepthThreshold;                         // 0x07B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMovementMode>                  SubmergedWaterMovementMode;                                // 0x07B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMovementMode>                  UnSubmergedWaterMovementMode;                              // 0x07B9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0G2A[0x6];                                     // 0x07BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDamageTypeAdjuster>                 DamageTypeAdjusters;                                       // 0x07C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SnapshotScale;                                             // 0x07D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B549[0x4];                                     // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPrimalSnapshotPose>                 SnapshotPoses;                                             // 0x07D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      PoopItemClass;                                             // 0x07E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TaxidermySkinClass;                                        // 0x07F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DragBoneName;                                              // 0x07F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       DragSocketName;                                            // 0x0800(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDragDistance;                                           // 0x0808(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDragDistanceTimeout;                                    // 0x080C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               BonesToIngoreWhileDragged;                                 // 0x0810(0x0010) (Edit, ZeroConstructor)
	float                                              PreviewCameraMaxZoomMultiplier;                            // 0x0820(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDefaultZoomMultiplier;                        // 0x0824(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDistanceScaleFactor;                          // 0x0828(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L1R0[0x4];                                     // 0x082C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  StartDraggedSound;                                         // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  EndDraggedSound;                                           // 0x0838(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class APrimalCharacter*                            DraggedCharacter;                                          // 0x0840(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class APrimalCharacter*                            DraggingCharacter;                                         // 0x0848(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T2ZR[0x40];                                    // 0x0850(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StasisConsumerRangeMultiplier;                             // 0x0890(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsSleeping : 1;                                           // 0x0894(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bWantsToRun : 1;                                           // 0x0894(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bActiveRunToggle : 1;                                      // 0x0894(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsBeingDragged : 1;                                       // 0x0894(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bDisableSpawnDefaultController : 1;                        // 0x0894(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bIsDragging : 1;                                           // 0x0894(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bIsDraggingWithGrapHook : 1;                               // 0x0894(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bDeathKeepCapsuleCollision : 1;                            // 0x0894(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteRunning : 1;                                        // 0x0895(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bCanRun : 1;                                               // 0x0895(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseHealthDamageMaterialOverlay : 1;                       // 0x0895(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBlinking : 1;                                           // 0x0895(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bSleepedWaterRagdoll : 1;                                  // 0x0895(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bCanBeTorpid : 1;                                          // 0x0895(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDebugIK : 1;                                              // 0x0895(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDebugIK_ShowTraceNames : 1;                               // 0x0895(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceAlwaysUpdateMesh : 1;                                // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRagdollIgnoresPawnCapsules : 1;                           // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePoopAnimationNotify : 1;                               // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBigDino : 1;                                            // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeathUseRagdoll : 1;                                      // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBeCarried : 1;                                         // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanNotifyTeamAggroAI : 1;                            // 0x0896(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDamageNotifyTeamAggroAI : 1;                              // 0x0896(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUseBP_OverrideCameraTargetOriginLocation : 1;             // 0x0897(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetOverrideCameraInterpSpeed : 1;                    // 0x0897(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRecentlyUpdateIk : 1;                                     // 0x0897(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIKEnabled : 1;                                            // 0x0897(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsCarried : 1;                                            // 0x0897(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bIsCarriedAsPassenger : 1;                                 // 0x0897(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bUseBPPreventFallDamage : 1;                               // 0x0897(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyIsDamageCauserOfAddedBuff : 1;                 // 0x0897(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventProjectileAttachment : 1;                          // 0x0898(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_0JQZ[0x7];                                     // 0x0899(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      ImmobilizationActor;                                       // 0x08A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceIKOnDedicatedServer : 1;                             // 0x08A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIgnoreAllImmobilizationTraps : 1;                         // 0x08A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTriggerIgnoredTraps : 1;                             // 0x08A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsImmobilized : 1;                                        // 0x08A8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor)
	unsigned char                                      bCanIgnoreWater : 1;                                       // 0x08A8(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      bIsDead : 1;                                               // 0x08A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      ReplicateAllBones : 1;                                     // 0x08A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      AutoStopReplicationWhenSleeping : 1;                       // 0x08A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCanDrag : 1;                                              // 0x08A9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCanBeDragged : 1;                                         // 0x08A9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsesRunningAnimation : 1;                                 // 0x08A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceNetDidLand : 1;                                      // 0x08A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventSimpleIK : 1;                                      // 0x08A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyAllowRunningWhileFlying : 1;                          // 0x08A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOrbitCamera : 1;                                          // 0x08A9(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_O9TL : 1;                                      // 0x08A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_7EGE : 7;                                      // 0x08AA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDraggedFromExtremitiesOnly : 1;                           // 0x08AA(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnableIK : 1;                                             // 0x08AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOnlyPlayPoopAnimWhileWalking : 1;                         // 0x08AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBlueprintAnimNotifyCustomEvent : 1;                    // 0x08AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoDamageImpulse : 1;                                      // 0x08AB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventImmobilization : 1;                                // 0x08AB(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_07CP[0x4];                                     // 0x08AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_AUCS : 1;                                      // 0x08B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSleepingUseRagdoll : 1;                                   // 0x08B0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDediForceUnregisterSKMesh : 1;                            // 0x08B0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReadyToPoop : 1;                                          // 0x08B0(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bHasDynamicBase : 1;                                       // 0x08B0(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_L4AL : 3;                                      // 0x08B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_A2FG : 1;                                      // 0x08B1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDieIfLeftWater : 1;                                       // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsAmphibious : 1;                                         // 0x08B1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmphibiousTargeting : 1;                               // 0x08B1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsWaterDino : 1;                                          // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFlyerDino : 1;                                          // 0x08B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreTargetingCarnivores : 1;                            // 0x08B1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_UGCE : 1;                                      // 0x08B1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_1M3E : 1;                                      // 0x08B2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsPlayingLowHealthAnim : 1;                               // 0x08B2(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowCharacterPainting : 1;                               // 0x08B2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTickStatusComponent : 1;                                  // 0x08B2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GDU0 : 1;                                      // 0x08B2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDontActuallyEmitPoop : 1;                                 // 0x08B2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPHUDOverideBuffProgressBar : 1;                          // 0x08B2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRunningWhileSwimming : 1;                            // 0x08B2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyBumpedByPawn : 1;                              // 0x08B3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyBumpedPawn : 1;                                // 0x08B3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustDamage : 1;                                    // 0x08B3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_WQC6 : 5;                                      // 0x08B3(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPTimerServer : 1;                                     // 0x08B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPTimerNonDedicated : 1;                               // 0x08B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTriggerBPStasis : 1;                                      // 0x08B4(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSetCharacterMeshseMaterialScalarParamValue : 1;      // 0x08B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YZJN[0x3];                                     // 0x08B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BPTimerServerMin;                                          // 0x08B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BPTimerServerMax;                                          // 0x08BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BPTimerNonDedicatedMin;                                    // 0x08C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BPTimerNonDedicatedMax;                                    // 0x08C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             NextBPTimerServer;                                         // 0x08C8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             NextBPTimerNonDedicated;                                   // 0x08D0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsMounted : 1;                                            // 0x08D8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bPreventTargetingByTurrets : 1;                            // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDelayFootstepsUnderMinInterval : 1;                       // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSleepingDisableIK : 1;                                    // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRagdollRetainAnimations : 1;                              // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAddedAttachments : 1;                                // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanPlayLandingAnim : 1;                                   // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyHasRunningAnimationWhenWalking : 1;                   // 0x08D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YC09 : 1;                                      // 0x08D9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventTargetingAndMovement : 1;                          // 0x08D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventMovement : 1;                                      // 0x08D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_0HG6 : 1;                                      // 0x08D9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBPPreventInputType : 1;                                   // 0x08D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventAllInput : 1;                                 // 0x08D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAllBuffs : 1;                                      // 0x08D9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      LastIsInsideVaccumSealedCube : 1;                          // 0x08D9(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPreventJump : 1;                                          // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventStasis : 1;                                   // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnStasis : 1;                                      // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreSerializeSaveGame : 1;                            // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPostLoadedFromSaveGame : 1;                          // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseHeavyCombatMusic : 1;                                  // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_JEZV : 1;                                      // 0x08DA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBPModifyAllowedViewHitDir : 1;                            // 0x08DA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPLimitPlayerRotation : 1;                                // 0x08DB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPManagedFPVViewLocation : 1;                             // 0x08DB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPCameraRotationFinal : 1;                                // 0x08DB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerBPNotifyInventoryItemChangesUseQuantity : 1;        // 0x08DB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerBPNotifyInventoryItemChanges : 1;                   // 0x08DB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_4M00[0x4];                                     // 0x08DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastCausedDamageTime;                                      // 0x08E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsAtMaxInventoryItems : 1;                                // 0x08E8(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bUseBPOnStaminaDrained : 1;                                // 0x08E8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BBMN : 1;                                      // 0x08E8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPGrabDebugSnapshot : 1;                               // 0x08E8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsAttachedOtherCharacter : 1;                             // 0x08E8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bUseBPOnLethalDamage : 1;                                  // 0x08E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPAdjustTorpidityDamage : 1;                           // 0x08E8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPForceCameraStyle : 1;                                // 0x08E8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRemovedAsPassenger : 1;                              // 0x08E9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableFPV : 1;                                           // 0x08E9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bConsumeZoomInput : 1;                                     // 0x08E9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_E7I6[0x6];                                     // 0x08EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ImmobilizationTrapsToIgnore;                               // 0x08F0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_AL54[0x8];                                     // 0x0900(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalDinoCharacter>         CarryingDino;                                              // 0x0908(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       DediOverrideCapsuleCollisionProfileName;                   // 0x0910(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DediOverrideMeshCollisionProfileName;                      // 0x0918(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnaredFromSocket;                                          // 0x0920(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DeathDestructionDepositInventoryClass;                     // 0x0928(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageNotifyTeamAggroMultiplier;                           // 0x0930(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageNotifyTeamAggroRange;                                // 0x0934(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageNotifyTeamAggroRangeFalloff;                         // 0x0938(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReplicatedCurrentHealth;                                   // 0x093C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ReplicatedMaxHealth;                                       // 0x0940(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ReplicatedCurrentTorpor;                                   // 0x0944(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ReplicatedMaxTorpor;                                       // 0x0948(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1DWK[0x4];                                     // 0x094C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalProjectileGrapplingHook*              LastGrapHookPullingMe;                                     // 0x0950(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T1RS : 2;                                      // 0x0958(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bInRagdoll : 1;                                            // 0x0958(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor)
	unsigned char                                      bIsNPC : 1;                                                // 0x0958(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor)
	unsigned char                                      UnknownData_PDNU : 4;                                      // 0x0958(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsDraggingWithOffset : 1;                                 // 0x0959(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsDraggedWithOffset : 1;                                  // 0x0959(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPreventRunningWhileWalking : 1;                           // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanLandOnWater : 1;                                       // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustMoveForward : 1;                               // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustMoveRight : 1;                                 // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetGravity : 1;                                      // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDamageWhenMounted : 1;                               // 0x0959(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAttachmentReplication : 1;                         // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnMovementModeChangedNotify : 1;                     // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnAnimPlayedNotify : 1;                              // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideCharacterNewFallVelocity : 1;                // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OnSetRunningEvent : 1;                              // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTurretFastTargeting : 1;                             // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyingOrWaterDinoPreventBackwardsRun : 1;                 // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideFlyingVelocity : 1;                          // 0x095A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSleepingDisableRagdoll : 1;                               // 0x095B(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bDestroyOnStasisWhenDead : 1;                              // 0x095B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventLiveBlinking : 1;                                  // 0x095B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_G65B : 1;                                      // 0x095B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceAlwaysUpdateMeshAndCollision : 1;                    // 0x095B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_O85K : 3;                                      // 0x095B(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPGetHUDElements : 1;                                  // 0x095C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHurtAnim : 1;                                      // 0x095C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ZM5W[0x3];                                     // 0x095D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterCharacter*                           LastGrapHookPullingOwner;                                  // 0x0960(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPCanBeBaseForCharacter : 1;                           // 0x0968(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanBaseOnCharacter : 1;                              // 0x0968(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnLanded : 1;                                        // 0x0968(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnableMoveCollapsing : 1;                                 // 0x0968(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_ForceAllowBuffClasses : 1;                          // 0x0968(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_N6J1[0x3];                                     // 0x0969(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     DragOffset;                                                // 0x096C(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPCheckJumpInput : 1;                                  // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideHurtAnim : 1;                                // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideDamageCauserHitMarker : 1;                   // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsSkinned : 1;                                            // 0x0978(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bUseBPAdjustImpulseFromDamage : 1;                         // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustCharacterMovementImpulse : 1;                  // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyFOVInterpSpeed : 1;                            // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bVerifyBasingForSaddleStructures : 1;                      // 0x0978(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OverrideTerminalVelocity : 1;                       // 0x0979(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBP_ShouldForceDisableTPVCameraInterpolation : 1;       // 0x0979(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAllowPlayMontage : 1;                                // 0x0979(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventPerPixelPainting : 1;                              // 0x0979(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPItemSlotOverrides : 1;                               // 0x0979(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_349O[0xE];                                     // 0x097A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastIkUpdateTime;                                          // 0x0988(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MLFG[0x24];                                    // 0x0990(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DraggedBoneIndex;                                          // 0x09B4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                customBitFlags;                                            // 0x09B8(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RunningSpeedModifier;                                      // 0x09BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ROCD[0x10];                                    // 0x09C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                DeathAnim;                                                 // 0x09D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   DeathSound;                                                // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   RunLoopSound;                                              // 0x09E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   RunStopSound;                                              // 0x09E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class USoundCue*>                           FootStepSoundsPhysMat;                                     // 0x09F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           LandedSoundsPhysMat;                                       // 0x0A00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MeshRootSocketName;                                        // 0x0A10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4IK8[0x8];                                     // 0x0A18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxFallSpeed;                                              // 0x0A20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FallDamageMultiplier;                                      // 0x0A24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             RunLoopAC;                                                 // 0x0A28(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FConstraintInstance                         DraggingConstraint;                                        // 0x0A30(0x0160) (ContainsInstancedReference)
	unsigned char                                      UnknownData_X2HH[0x8];                                     // 0x0B90(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalStructureExplosiveTransGPS*           CurrentTransponder;                                        // 0x0B98(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BGRC[0x4];                                     // 0x0BA0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ServerTargetCarriedYaw;                                    // 0x0BA4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  NetDynamicMusicSound;                                      // 0x0BA8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalDinoCharacter>         MountedDino;                                               // 0x0BB0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              MountedDinoTime;                                           // 0x0BB8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QVEP[0x2C];                                    // 0x0BBC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AActor>                       LastBasedMovementActorRef;                                 // 0x0BE8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GrabWeightThreshold;                                       // 0x0BF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DragWeight;                                                // 0x0BF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DescriptiveName;                                           // 0x0BF8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVector_NetQuantize>                 ReplicatedRagdollPositions;                                // 0x0C08(0x0010) (Net, ZeroConstructor, Transient, RepNotify, Protected)
	TArray<struct FRotator_NetQuantize>                ReplicatedRagdollRotations;                                // 0x0C18(0x0010) (Net, ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_HA7X[0x50];                                    // 0x0C28(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              KillXPBase;                                                // 0x0C78(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R0YV[0x14];                                    // 0x0C7C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RagdollReplicationInterval;                                // 0x0C90(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E9H4[0x4];                                     // 0x0C94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBoneDamageAdjuster>                 BoneDamageAdjusters;                                       // 0x0C98(0x0010) (Edit, ZeroConstructor)
	float                                              ClientRotationInterpSpeed;                                 // 0x0CA8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ClientLocationInterpSpeed;                                 // 0x0CAC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDragMovementSpeed;                                      // 0x0CB0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    CurrentAimRot;                                             // 0x0CB4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CurrentRootLoc;                                            // 0x0CC0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1ZU9[0x14];                                    // 0x0CCC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalCharacterStatusComponent*             MyCharacterStatusComponent;                                // 0x0CE0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_51PR[0x8];                                     // 0x0CE8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalInventoryComponent*                   MyInventoryComponent;                                      // 0x0CF0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                                SyncedMontage;                                             // 0x0CF8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B78U[0xC];                                     // 0x0D00(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MontageSyncInterval;                                       // 0x0D0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastRunningTime;                                           // 0x0D10(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOffset;                                           // 0x0D18(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOffsetMultiplier;                                 // 0x0D24(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOrgOffset;                                        // 0x0D30(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandedSoundMaxRange;                                       // 0x0D3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FallingDamageHealthScaleBase;                              // 0x0D40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FootstepsMaxRange;                                         // 0x0D44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinTimeBetweenFootsteps;                                   // 0x0D48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YBZX[0xC];                                     // 0x0D4C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTimeBetweenFootstepsRunning;                            // 0x0D58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M681[0x4];                                     // 0x0D5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAnimMontage*>                        AnimationsPreventInput;                                    // 0x0D60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      DeathHarvestingComponent;                                  // 0x0D70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UPrimalHarvestingComponent*                  MyDeathHarvestingComponent;                                // 0x0D78(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H08R[0x40];                                    // 0x0D80(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshComponentUpdateFlag>       PreDragComponentUpdateFlag;                                // 0x0DC0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EShooterPhysMaterialType>  TargetableDamageFXDefaultPhysMaterial;                     // 0x0DC1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RPVE[0x6];                                     // 0x0DC2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                PoopAnimation;                                             // 0x0DC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             CorpseDestructionTime;                                     // 0x0DD0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               bIsHost;                                                   // 0x0DD8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TZ4Y[0x3];                                     // 0x0DD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CorpseLifespan;                                            // 0x0DDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVStructurePlacingHeightMultiplier;                       // 0x0DE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CorpseFadeAwayTime;                                        // 0x0DE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RagdollDeathImpulseScaler;                                 // 0x0DE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UMPM[0x4];                                     // 0x0DEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   PoopSound;                                                 // 0x0DF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseTargetingDesirability;                                 // 0x0DF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeadBaseTargetingDesirability;                             // 0x0DFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WRGY[0x10];                                    // 0x0E00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OrbitCamZoomStepSize;                                      // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OrbitCamMinZoomLevel;                                      // 0x0E14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OrbitCamMaxZoomLevel;                                      // 0x0E18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GXNK[0x2C];                                    // 0x0E1C(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxCursorHUDDistance;                                      // 0x0E48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AddForwardVelocityOnJump;                                  // 0x0E4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     DeathActorTargetingOffset;                                 // 0x0E50(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SocketOverrideTargetingLocation;                           // 0x0E5C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BM8P[0x24];                                    // 0x0E64(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTimeSubmerged;                                         // 0x0E88(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ABJH[0x10];                                    // 0x0E90(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FootPhysicalSurfaceCheckInterval;                          // 0x0EA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AQXB[0xC];                                     // 0x0EA4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalCharacter>             LastAttackedNearbyPlayer;                                  // 0x0EB0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastAttackedNearbyPlayerTime;                              // 0x0EB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1CSP[0x18];                                    // 0x0EBC(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RagdollImpactDamageVelocityScale;                          // 0x0ED4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RagdollImpactDamageMinDecelerationSpeed;                   // 0x0ED8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StartFallingImpactRagdollTimeInterval;                     // 0x0EDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GK7M[0x30];                                    // 0x0EE0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   EnteredSwimmingSound;                                      // 0x0F10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EnteredSleepingSound;                                      // 0x0F18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   LeftSleepingSound;                                         // 0x0F20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DKAM[0x20];                                    // 0x0F28(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CorpseDraggedDecayRate;                                    // 0x0F48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoopAltItemChance;                                         // 0x0F4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PoopAltItemClass;                                          // 0x0F50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              DefaultBuffs;                                              // 0x0F58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  PoopIcon;                                                  // 0x0F68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RunningMaxDesiredRotDelta;                                 // 0x0F70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VNA4[0x4];                                     // 0x0F74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             CorpseDestructionTimer;                                    // 0x0F78(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastSkinnedTime;                                           // 0x0F80(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0JVU[0x8];                                     // 0x0F88(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnDied;                                                    // 0x0F90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDamage;                                            // 0x0FA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSleepStateChanged;                                       // 0x0FB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyLevelUp;                                             // 0x0FC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyUnstasis;                                            // 0x0FD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyStasis;                                              // 0x0FE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_MXQE[0x10];                                    // 0x0FF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTimeInSwimming;                                        // 0x1000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RFDS[0x8];                                     // 0x1008(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDefaultTextureParamOverride>        DefaultNoItemTextureParamOverrides;                        // 0x1010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_PWXD[0x10];                                    // 0x1020(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStructurePaintingComponent*                 PaintingComponent;                                         // 0x1030(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	float                                              ExtraMaxSpeedModifier;                                     // 0x1038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExtraRotationRateModifier;                                 // 0x103C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedDinoCallOutRange;                                     // 0x1040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZOVU[0xC];                                     // 0x1044(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     TargetPathfindingLocationOffset;                           // 0x1050(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_91S5[0x4];                                     // 0x105C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTookDamageTime;                                        // 0x1060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExtraReceiveDamageMultiplier;                              // 0x1068(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ExtraMeleeDamageMultiplier;                                // 0x106C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZBH0[0x18];                                    // 0x1070(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamageTheMeleeDamageCauserPercent;                         // 0x1088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityDegrateTheMeleeDamageCauserPercent;              // 0x108C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageTheMeleeDamageCauserDamageType;                      // 0x1090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      TribeGroupInventoryRank;                                   // 0x1098(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MV4X[0x3];                                     // 0x1099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CharacterDamageImpulseMultiplier;                          // 0x109C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AOR1[0x18];                                    // 0x10A0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxRagdollDeathVelocityImpulse;                            // 0x10B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClientRotationInterpSpeedMultiplierGround;                 // 0x10BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlideGravityScaleMultiplier;                               // 0x10C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlideMaxCarriedWeight;                                     // 0x10C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5DZD[0x8];                                     // 0x10C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScaleDeathHarvestHealthyByMaxHealthBase;                   // 0x10D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VN7A[0x4];                                     // 0x10D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    NotifyInputEvent;                                          // 0x10D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_GO6Q[0x10];                                    // 0x10E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RunMinVelocityRotDot;                                      // 0x10F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W6XH[0x4];                                     // 0x10FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastHitDamageTime;                                         // 0x1100(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bShouldBeInGodMode;                                        // 0x1108(0x0001) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2Q48[0x7];                                     // 0x1109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MeshingTickCounterMultiplier;                              // 0x1110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1Z4L[0x4];                                     // 0x1114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              PreventBuffClasses;                                        // 0x1118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               PreventBuffClassesWithTag;                                 // 0x1128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bIgnoreLowGravityDisorientation : 1;                       // 0x1138(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOnMassTeleportEvent : 1;                             // 0x1138(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBlueprintAnimNotifyCustomState : 1;                    // 0x1138(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventIKWhenNotWalking : 1;                              // 0x1138(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreCorpseDecompositionMultipliers : 1;                 // 0x1138(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInterpHealthDamageMaterialOverlayAlpha : 1;               // 0x1138(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSuppressPlayerKillNotification : 1;                       // 0x1138(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowCorpseDestructionWithPreventSaving : 1;              // 0x1138(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventInventoryAccess : 1;                               // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseGetOverrideSocket : 1;                                 // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowBPNewDoorInteractionDrawHUD : 1;                     // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bJumpOnRelease : 1;                                        // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowMultiUseByRemoteDino : 1;                            // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOverrideJumpZModifier : 1;                           // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseZeroGravityWander : 1;                                 // 0x1139(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPPreventNotifySound : 1;                              // 0x1139(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_ModifyInputAcceleration : 1;                        // 0x113A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_ModifySavedMoveAcceleration_PreRep : 1;             // 0x113A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_ModifySavedMoveAcceleration_PostRep : 1;            // 0x113A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceSimpleTeleportFade : 1;                              // 0x113A(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      UnknownData_QZ26[0x1];                                     // 0x113B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ControlledInventoryAccessDistanceOffset;                   // 0x113C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnOrbitCameraViewChange;                                   // 0x1140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              AdditionalMaxUseDistance;                                  // 0x1150(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LPRB[0xC];                                     // 0x1154(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCharacter");
		return ptr;
	}



	void ZoomOut();
	void ZoomIn();
	bool UseCenteredTPVCamera();
	void UpdateTickSetting();
	void UpdateSwimmingState();
	bool UpdateHasBuffPreSerialize();
	void TurnAtRate(float val);
	void TryPoop();
	void TryGiveDefaultWeapon();
	void TickMovementComponent(float DeltaTime);
	void TempDampenInputAcceleration();
	float TakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void StopAnimEx(class UAnimMontage* AnimMontage, bool bReplicate, bool bReplicateToOwner, float BlendOutTime);
	void STATIC_StaticRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
	int STATIC_StaticGetSnapshotPoseCount(class UPrimalItem* Item);
	struct FPrimalSnapshotPose STATIC_StaticGetSnapshotPose(class UPrimalItem* Item, int PoseIndex);
	void STATIC_StaticApplyCharacterSnapshotEquipment(class UPrimalInventoryComponent* inventory, class AActor* To);
	void STATIC_StaticApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int Pose, bool bCollisionOn);
	void StartForceSkelUpdate(float ForTime, bool bForceUpdateMesh, bool bServerOnly);
	void SleepBodies();
	bool ShouldDisableCameraInterpolation();
	bool ShouldDealDamageTo(class APrimalCharacter* OtherCharacter, bool bAllowDamageToSelf, bool bAllowDamageToTribe, bool bAllowDamageToAlliedTribes);
	void SetSleeping(bool bSleeping, bool bUseRagdollLocationOffset);
	void SetMyInventoryComponent(class UPrimalInventoryComponent* TheInventoryComponent);
	void SetLastCausedDamageTime(double lastCausedDamageTimeValue);
	void SetEnableIK(bool bEnable);
	void SetCharacterMeshesMaterialScalarParamValue(const struct FName& ParamName, float Value);
	void SetBoundsScale(float NewScale);
	void ServerTryPoop();
	void ServerSetRunning(bool bNewRunning);
	void ServerRequestDrag();
	void ServerGiveDefaultWeapon();
	void ServerDinoOrder(class APrimalDinoCharacter* aDino, TEnumAsByte<ShooterGame_EDinoTamedOrder> OrderType, class AActor* Target);
	void ServerCaptureDermis(class APrimalCharacter* Target);
	void ServerCallStayOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallStay();
	void ServerCallSetAggressive();
	void ServerCallPassive();
	void ServerCallNeutral();
	void ServerCallMoveTo(const struct FVector& MoveToLoc);
	void ServerCallLandFlyerOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollowOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollowDistanceCycleOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollow();
	void ServerCallAttackTarget(class AActor* TheTarget);
	void ServerCallAggressive();
	void RemoveAllJumpDeactivatedBuffs(class APrimalBuff* IgnoredBuff);
	void PrimalCharacterSleepStateChanged__DelegateSignature(class APrimalCharacter* forCharacter, bool bIsSleeping);
	void PrimalCharacterNotifyUnstasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
	void PrimalCharacterNotifyStasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
	void PrimalCharacterNotifyLevelUp__DelegateSignature(int ExtraCharacterLevel);
	void PrimalCharacterNotifyDamage__DelegateSignature(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void PrimalCharacterInputNotify__DelegateSignature(class APrimalCharacter* ForPrimalCharacter, TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	void PrimalCharacterDied__DelegateSignature(class APrimalCharacter* DiedCharacter);
	bool PreventsTargeting(class AActor* ByActor);
	bool PreventNotifySound(class USoundBase* SoundIn);
	bool PreventInputType(TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	bool PreventInputDoesOffset();
	bool Poop(bool bForcePoop);
	void PlayHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath);
	void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	struct FString PlayerCommand(const struct FString& TheCommand);
	void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	float PlayAnimEx(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, bool bForceKeepSynced, float BlendInTime, float BlendOutTime);
	void OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const struct FName& WithCameraStyle);
	void OverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
	void OrbitCamToggle();
	void OrbitCamOn();
	void OrbitCamOff();
	void OnStopRunning();
	void OnStopJump();
	void OnStopFire(bool bFromGamepadRight);
	void OnStopAltFire(bool bFromGamepad);
	void OnStartRunning();
	void OnStartJump();
	void OnStartFire(bool bFromGamepadRight);
	void OnStartAltFire(bool bFromGamepad);
	void OnRunToggleReleased();
	void OnRunTogglePressed();
	void OnRunToggle();
	void OnRep_RagdollPositions();
	void OnRep_PaintingComponent();
	void OnRep_MountedDino();
	void OnRep_IsSleeping();
	void OnRep_IsDead();
	void OnOrbitCameraViewChange__DelegateSignature(bool bEnabled);
	void OnMassTeleportEvent(TEnumAsByte<ShooterGame_EMassTeleportState> EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void OnEndDrag();
	void OnDetachedFromCharacter(class APrimalCharacter* ACharacter, int OverrideDirection);
	void OnBeginDrag(class APrimalCharacter* Dragged, int BoneIndex, bool bWithGrapHook);
	void OnAttachedToCharacter();
	void OnAltFireReleased();
	void OnAltFirePressed();
	void NetUpdateTribeName(const struct FString& NewTribeName);
	void NetStopAllAnimMontage();
	void NetSetMovementModeSimulatedInternal(TEnumAsByte<Engine_EMovementMode> NewMovementMode);
	void NetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode);
	void NetPlaySoundOnCharacter(class USoundBase* SoundToPlay, bool bPlayOnOwner);
	void NetOnJumped();
	void NetForceUpdateAimedCharacters(const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
	void NetDidLand();
	void NetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, bool bOverrideMaxImpulseZ);
	void NativeSimulateHair(TArray<struct FVector>* CurrentPos, TArray<struct FVector>* LastPos, TArray<struct FVector>* RestPos, TArray<struct FVector>* PivotPos, TArray<float>* RestDistance, const struct FVector& HairSocketLoc, const struct FRotator& HairSocketRot, const struct FVector& ChestSocketLoc, const struct FRotator& ChestSocketRot, float DeltaTime, float Damping, float DampingFrontModifier, float DampingBack, float InWater, float HairWetness, float DragForce, float HairScale, float SpringForce, float SpringForceFrontModifier, float SpringForceBack, float GravityForce, const struct FVector& ShoulderLCollisionOffset, float ShoulderLCollisionRadius, const struct FVector& ShoulderRCollisionOffset, float ShoulderRCollisionRadius, const struct FVector& HeadHairCollisionOffset, float HeadHairCollisionRadius, const struct FVector& NeckHairCollisionOffset, float NeckHairCollisionRadius, float MaxDistanceToRestPos, const struct UObject_FTransform& LastHeadTransform, bool bPosAsPivot, bool bCollideMiddle, bool bCollideWithNeck);
	void MoveUp(float val);
	void MoveRight(float val);
	void MoveForward(float val);
	void ModifyStasisComponentRadius(float Delta);
	void LookUpAtRate(float val);
	void LocalUnpossessed();
	int LevelUpPlayerAddedStat(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatToLevel, int NumLevels, class AShooterPlayerController* ForPlayer);
	bool IsWildSlow();
	bool IsWatered();
	bool IsValidForCombatMusic();
	bool IsSubmerged(bool bDontCheckSwimming, bool bUseFullThreshold, bool bForceCheck, bool bFromVolumeChange);
	bool IsSitting(bool bIgnoreLockedToSeat);
	bool IsRunning();
	bool IsRider();
	bool IsProneOrSitting(bool bIgnoreLockedToSeat);
	bool IsPrimalCharWalking();
	bool IsPrimalCharSwimming();
	bool IsPrimalCharFriendly(class APrimalCharacter* primalChar);
	bool IsPrimalCharFlying();
	bool IsPrimalCharFalling();
	bool IsOwningClient();
	bool IsMoving();
	bool IsMontagePlaying(class UAnimMontage* AnimMontage, float TimeFromEndToConsiderFinished);
	bool IsMeshGameplayRelevant();
	bool IsInvincible();
	bool IsInVacuumSealedSpace();
	bool IsInStatusState(TEnumAsByte<ShooterGame_EPrimalCharacterStatusState> StatusStateType);
	bool IsHostileTo(class APrimalCharacter* OtherCharacter, bool ignoreDead);
	bool IsHostileOrAggressiveTo(class APrimalCharacter* OtherCharacter);
	bool IsGameInputAllowed();
	bool IsFirstPerson();
	bool IsDamageOccludedByStructures(class AActor* DamageCauser);
	bool IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
	bool IsBossDino();
	bool IsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage);
	bool IsAttachedToSomething();
	bool IsAlliedWithOtherTeam(int OtherTeamID);
	bool IsAlive();
	void Immobilize(bool bImmobilize, class AActor* UsingActor, bool bImmobilizeFalling, bool bPreventDismount);
	void HurtMe(int HowMuch);
	bool HasCryoSickness();
	bool HasBuffWithCustomTag(const struct FName& BuffCustomTag);
	bool HasBuff(class UClass* BuffClass, bool useExactMatch);
	bool GiveKillExperience();
	struct FVector GetTPVCameraOffsetMultiplier();
	struct FVector GetTPVCameraOffset();
	struct FVector GetSocketLocation(const struct FName& SocketName);
	class UActorComponent* STATIC_GetSnapshotComponent(class AActor* From, const struct FName& Tag);
	struct FString GetShortName();
	float GetRunningSpeedModifier(bool bIsForDefaultSpeed);
	TEnumAsByte<Engine_ENetRole> GetRole();
	TEnumAsByte<Engine_EMovementMode> GetPrimalCharMovementMode();
	TEnumAsByte<Engine_EPhysicalSurface> GetPhysMatTypeFromHits(TArray<struct FHitResult> FromHits);
	TEnumAsByte<Engine_EPhysicalSurface> GetPhysMatTypeFromHit(const struct FHitResult& FromHit);
	struct FName GetOverrideSocket(const struct FName& From);
	class UAnimMontage* GetOverridenMontage(class UAnimMontage* AnimMontage);
	class UAnimSequence* GetOverridenAnimSequence(class UAnimSequence* AnimSeq);
	class ABiomeZoneVolume* GetMyBiomeZoneVolume();
	float GetMoveAnimRate();
	float GetMaxHealth();
	double GetLastCausedDamageTime();
	float GetKillXP();
	struct FRotator GetInterpolatedRotation_NonFlattened();
	struct FVector GetInputDirectionVector(bool bRelativeToViewDirection);
	float GetImmersionDepth();
	float GetHealthPercentage();
	float GetHealth();
	class UClass* GetGrappledBuffClassOverride();
	TEnumAsByte<Engine_EPhysicalSurface> GetFootPhysicalSurfaceType(bool bForce, bool bIsForFootstepParticles);
	struct FVector GetFloatingHUDLocation();
	float GetFallAcceleration();
	float GetDragWeight(class APrimalCharacter* ForDragger);
	TArray<struct FString> GetDetailedDescription(const struct FString& IndentPrefix);
	struct FString GetDescriptiveName();
	float GetDefaultMovementSpeed();
	struct FString GetDebugInfoString();
	void GetCharacterViewLocationAndDirection(struct FVector* ViewLocation, struct FVector* ViewDirection, bool* bFromCrosshairOrCamera, float FallbackAngleOffsetDegrees);
	class UPrimalCharacterStatusComponent* GetCharacterStatusComponent();
	void GetCharactersGrappledToMe(TArray<class APrimalCharacter*>* GrappledCharsArray);
	struct FVector GetCapsuleTopLocation();
	struct FVector GetCapsuleBottomLocation();
	class APrimalBuff* GetBuffWithCustomTag(const struct FName& BuffCustomTag);
	int GetBuffStackCount(class UClass* BuffClass, bool useExactMatch);
	void GetBuffs(TArray<class APrimalBuff*>* TheBuffs);
	class APrimalBuff* GetBuff(class UClass* BuffClass);
	float GetBaseStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatusValueType);
	float GetBaseDragWeight();
	class APrimalDinoCharacter* GetBasedOrSeatingOnDino();
	class APrimalDinoCharacter* GetBasedOnDino();
	class UPrimitiveComponent* GetBasedMovementComponent();
	class APrimalStructureExplosive* GetAttachedExplosive();
	void GetAllBuffs(TArray<class APrimalBuff*>* AllBuffs);
	bool GetAllAttachedChars(TArray<class APrimalCharacter*>* AttachedCharsArray, bool bIncludeSelf, bool bIncludeBased, bool bIncludePassengers, bool bIncludeCarried);
	struct FRotator GetAimOffsets(float DeltaTime, struct FRotator* RootRotOffset, float* TheRootYawSpeed, float MaxYawAimClamp, struct FVector* RootLocOffset);
	void GetAimedActor(struct FHitResult* outHitResult, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, float MaxDistanceOverride, float CheckRadius, bool bForceUseCameraLocation, bool bForceUpdateAimedActors);
	void STATIC_ForceUpdateCharacter(class UWorld* World, class APrimalCharacter* primalChar);
	void STATIC_ForceUpdateAimedCharacters(class UWorld* World, const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
	void ForceTickPoseDelta();
	void ForceRefreshBones();
	void ForceMeshRelevant(float Duration);
	bool ForceAddUnderwaterCharacterStatusValues();
	void FadeOutLoadingMusic();
	void ExecSetSleeping(bool bEnable);
	void ExecSetPawnSleeping(bool bEnable);
	void EndForceSkelUpdate();
	void EndDragCharacter();
	bool EnableTurnToFaceRotation();
	void EnableIK(bool bEnable, bool bForceOnDedicated);
	void EnableBPTimerServer(bool bEnable);
	void EnableBPTimerNonDedicated(bool bEnable);
	void EnableBodiesGravity();
	void DoSetRagdollPhysics();
	void DoFindGoodSpot(const struct FVector& RagdollLoc, bool bClearCollisionSweep);
	void DoCharacterDetachment(bool bIncludeRiding, bool bIncludeCarrying, class APrimalBuff* BuffToIgnore);
	bool DinoMountOnMe(class APrimalDinoCharacter* DinoCharacter);
	void DidTeleport(const struct FVector& NewLoc, const struct FRotator& newRot, bool bDoCameraFade, const struct FLinearColor& CameraFadeColor);
	void DetachFromOtherCharacter(bool enableMovementAndCollision);
	void DeathHarvestingFadeOut();
	void DeactivateBuffs(class UClass* ForBuffClass, class UPrimalItem* ForInstigatorItem, bool perfectClassMatch);
	class UActorComponent* STATIC_CreateSnapshotComponent(class AActor* For, class UObject* Template, const struct FName& Tag, const struct FName& Name);
	void ClientSyncAnimation(class UAnimMontage* AnimMontage, float PlayRate, float ServerCurrentMontageTime, bool bForceTickPoseAndServerUpdateMesh, float BlendInTime, float BlendOutTime);
	void ClientStopAnimation(class UAnimMontage* AnimMontage, bool bStopOnOwner, float BlendOutTime);
	void ClientRagdollUpdate(TArray<struct FVector_NetQuantize> BoneLocations, const struct FRotator_NetQuantize& TargetRootRotation);
	void ClientPlayAnimation(class UAnimMontage* AnimMontage, float PlayRate, const struct FName& StartSectionName, bool bPlayOnOwner, bool bForceTickPoseAndServerUpdateMesh);
	void ClientOrderedMoveTo(const struct FVector& MoveToLoc);
	void ClientOrderedAttackTarget(class AActor* attackTarget);
	void ClientNotifyLevelUp();
	void ClientFailedPoop();
	void ClientEndRagdollUpdate();
	void ClientDidPoop();
	void ClearRidingDinoAsPassenger(bool bFromDino);
	void ClearMountedDino(bool fromMountedDino);
	void ClearControlInputVector();
	void ClearCarryingDino(bool bFromDino, bool bCancelAnyCarryBuffs);
	bool CharacterIsCarriedAsPassenger();
	bool CharacterBuffsPreventFirstPerson();
	void CaptureCharacterSnapshot(class UPrimalItem* Item);
	bool CanMountOnMe(class APrimalDinoCharacter* DinoCharacter);
	bool CanDragCharacter(class APrimalCharacter* Character);
	void CallDrawHUD(class AShooterHUD* HUD);
	void CallDrawFloatingHUD(class AShooterHUD* HUD);
	bool BuffsPreventInventoryAccess();
	void BPTriggerStasisEvent();
	void BPTimerServer();
	void BPTimerNonDedicated();
	bool BPShouldLimitRightDirection();
	bool BPShouldLimitForwardDirection();
	void BPSetCharacterMeshesMaterialScalarParamValue(const struct FName& ParamName, float Value);
	void BPRemovedAttachmentsForItem(class UPrimalItem* anItem);
	void BPRemovedAsPassenger(class APrimalCharacter* Character);
	void BPRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
	bool BPPreventStasis();
	bool BPPreventNotifySound(class USoundBase* SoundIn);
	bool BPPreventInputType(TEnumAsByte<ShooterGame_EPrimalCharacterInputType> inputType);
	bool BPPreventFirstPerson();
	bool BPPreventFallDamage(const struct FHitResult& HitResult, float FallDamageAmount);
	void BPPreSerializeSaveGame();
	void BPPostLoadedFromSaveGame();
	void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void BPOverrideUseItemSlot(int ItemSlot);
	void BPOverrideReleaseItemSlot(int ItemSlot);
	float BPOverrideJumpZModifier(float InJumpZModifier);
	bool BPOverrideInventoryAccessInput();
	class UAnimMontage* BPOverrideHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, bool bIsPointDamage, const struct FVector& PointDamageLocation, const struct FVector& PointDamageHitNormal);
	void BPOverrideHeldItemSlot(int ItemSlot);
	bool BPOverrideFPVViewLocation(class APrimalCharacter* viewingCharacter);
	struct FVector BPOverrideFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
	struct FHitMarkerSettings BPOverrideDamageCauserHitMarker(class AShooterPlayerController* DamageCauserController, bool bHitFriendlyTarget, float PreDamageHealth, float DamageAmount, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointDamageHitResult);
	struct FVector BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
	void BPOnStaminaDrained();
	void BPOnMovementModeChangedNotify(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode);
	void BPOnMassTeleportEvent(TEnumAsByte<ShooterGame_EMassTeleportState> EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void BPOnLethalDamage(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool* bPreventDeath);
	bool BPOnAttachmentReplication();
	void BPOnAnimPlayedNotify(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	void BPNotifyToggleHUD(bool bHudHidden);
	void BPNotifyLevelUp(int ExtraCharacterLevel);
	void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem);
	void BPNotifyDroppedItemPickedUp(class ADroppedItem* itemPickedUp, class APrimalCharacter* PickedUpBy);
	void BPNotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
	void BPNotifyBumpedByPawn(class APrimalCharacter* ByPawn);
	void BPNotifyBPNotifyIsDamageCauserOfAddedBuff(class APrimalBuff* Buff);
	void BPNewDoorInteractionDrawHUD(class AShooterHUD* HUD, const struct FVector2D& DoorDescriptionLoc);
	void BPNetSetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode);
	void BPNetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode);
	void BPNetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, bool bOverrideMaxImpulseZ, bool bApplyToBigPawns);
	float BPModifyViewHitDir(class APrimalCharacter* viewingCharacter, float InViewHitDir);
	struct FVector BPModifyRightDirectionInput(const struct FVector& directionInput);
	float BPModifyFOVInterpSpeed(float FOVInterpSpeedIn);
	float BPModifyFOV(float FOVIn);
	struct FVector BPModifyForwardDirectionInput(const struct FVector& directionInput);
	void BPLocalUnpossessed();
	void BPLocalPossessedBy(class APlayerController* ByController);
	struct FRotator BPLimitPlayerRotation(class APrimalCharacter* viewingCharacter, const struct FRotator& InViewRotation);
	bool BPIsConscious();
	bool BPIsBasedOnDynamicActor();
	bool BPHasPlayerController();
	bool BPHandleRightShoulderButton();
	bool BPHandlePoop();
	bool BPHandleLeftShoulderButton();
	TArray<struct FBlueprintVisualLogEntry> BPGrabDebugSnapshot();
	void BPGetOverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpolationMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpolationMultiplier, float* TPVOffsetInterpSpeed);
	bool BPGetIsBuried();
	float BPGetHUDOverrideBuffProgressBarPercent();
	void BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements);
	float BPGetGravityZScale();
	struct FVector BPGetFPVViewLocation(class APrimalCharacter* viewingCharacter);
	float BPGetExtraMeleeDamageModifier();
	struct FString BPGetDebugInfoString();
	float BPGetAddForwardVelocityOnJump();
	TEnumAsByte<ShooterGame_ECameraStyle> BPForceCameraStyle(class APrimalCharacter* ForViewTarget);
	void BPCheckJumpInput(bool* bUseCustomErrorMessage, struct FString* ErrorMessageToDisplay);
	void BPCharacterUnsleeped();
	void BPCharacterSleeped();
	void BPCharacterDetach();
	bool BPCanNotifyTeamAggroAI(class APrimalDinoCharacter* Dino);
	bool BPCanBeBaseForCharacter(class APawn* Pawn);
	bool BPCanBaseOnCharacter(class APrimalCharacter* BaseCharacter);
	struct FRotator BPCameraRotationFinal(class APrimalCharacter* viewingCharacter, const struct FRotator& InCurrentFinalRot);
	struct FRotator BPCameraBaseOrientation(class APrimalCharacter* viewingCharacter);
	void BPApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int Pose, bool bCollisionOn);
	void BPAnimNotifyCustomState_End(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	float BPAdjustTorpidityDamage(float DesiredTorpidityDamage, float HealthDamageAmount, class UClass* DamageType);
	struct FVector BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
	float BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
	struct FVector BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
	void BPAddedAttachmentsForItem(class UPrimalItem* anItem);
	bool BP_ShouldDisableCameraInterpolation();
	float BP_OverrideTerminalVelocity();
	void BP_OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const struct FName& WithCameraStyle);
	void BP_OnZoomOut();
	void BP_OnZoomIn();
	void BP_OnStartCarried(class APrimalDinoCharacter* aDino);
	void BP_OnSetRunning(bool bNewIsRunning);
	void BP_OnSetDeath();
	void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
	void BP_OnJumpReleased();
	void BP_OnJumpPressed();
	void BP_OnEndCarried(bool bFromDino, bool bCancelAnyCarryBuffs);
	void BP_OnCameraStyleChangedNotify(const struct FName& NewCameraStyle, const struct FName& OldCameraStyle);
	bool BP_ModifySavedMoveAcceleration_PreRep(struct FVector* ModifyClientAccel);
	bool BP_ModifySavedMoveAcceleration_PostRep(struct FVector* ModifyServerAccel);
	void BP_ModifyInputAcceleration(struct FVector* ModifyInputAccel);
	bool BP_IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
	float BP_GetMaxSpeedModifier();
	bool BP_ForceAllowAddBuff(class UClass* BuffClass);
	bool BP_AnimationPreventsInput();
	void BlueprintAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void AttachToOtherCharacter(class APrimalCharacter* characterToAttachTo, const struct FName& InSocketName, bool enableMovementAndCollision, TEnumAsByte<Engine_EAttachLocation> AttachLocation);
	void AttachedToOtherCharacterUpdateWorldLocation(const struct FVector& WorldLocation);
	void ApplyCustomFallDamage(const struct FVector& Location, const struct FVector& Velocity, float FallDamageThreshold);
	bool AllowPlayMontage(class UAnimMontage* AnimMontage);
};

// Class ShooterGame.PrimalDinoCharacter
// 0x1110 (FullSize[0x2270] - InheritedSize[0x1160])
class APrimalDinoCharacter : public APrimalCharacter
{
public:
	unsigned char                                      UnknownData_8XE6[0x2C];                                    // 0x1160(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AActor>                       ForcedMasterTarget;                                        // 0x118C(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       MountCharacterSocketName;                                  // 0x1194(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalCharacter>             MountCharacter;                                            // 0x119C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_30Y3[0x4];                                     // 0x11A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RidingAttackExtraVelocity;                                 // 0x11A8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0O51[0x4];                                     // 0x11B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                StartChargeAnimation;                                      // 0x11B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UAnimMontage*>                        AttackAnimations;                                          // 0x11C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      AttackAnimationWeights;                                    // 0x11D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      AttackAnimationsTimeFromEndToConsiderFinished;             // 0x11E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bAttackStopsMovement : 1;                                  // 0x11F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLocationBasedAttack : 1;                                  // 0x11F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTamedWanderHarvestAllowUsableHarvestingAsWell : 1;        // 0x11F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPKilledSomethingEvent : 1;                            // 0x11F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDinoResetAffinityOnUnsleep : 1;                    // 0x11F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bKeepInventoryForWakingTame : 1;                           // 0x11F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_FYBA : 1;                                      // 0x11F0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHadLinkedSupplyCrate : 1;                                 // 0x11F0(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      UnknownData_IATK : 2;                                      // 0x11F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHiddenForLocalPassenger : 1;                              // 0x11F1(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bRunCheckCarriedTrace : 1;                                 // 0x11F1(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      CanElevate : 1;                                            // 0x11F1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YD0C : 3;                                      // 0x11F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bTamedWanderCorpseHarvesting : 1;                          // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPNotifyStructurePlacedNearby : 1;                     // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanTargetCorpse : 1;                                 // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPShouldForceFlee : 1;                                 // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_PHEG : 1;                                      // 0x11F2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceWanderOverrideNPCZoneManager : 1;                    // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDeprecateDino : 1;                                        // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceFoodItemAutoConsume : 1;                             // 0x11F2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerAllowFlyingWithExplosive : 1;                        // 0x11F3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUseDediAttackTiming : 1;                             // 0x11F3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventExitingWater : 1;                             // 0x11F3(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bWakingTameConsumeEntireStack : 1;                         // 0x11F3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              ColorizationIntensity;                                     // 0x11F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowCarryCharacterWithoutRider : 1;                      // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWildDinoPreventWeight : 1;                                // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDebugMeleeAttacks : 1;                                    // 0x11F8(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bRetainCarriedCharacterOnDismount : 1;                     // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnTamedProcessOrder : 1;                             // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OnTamedOrderReceived : 1;                           // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAttackWithCryoSickness : 1;                          // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanCryo : 1;                                         // 0x11F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWildPreventTeleporting : 1;                               // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPClampMaxHarvestHealth : 1;                           // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUseAltAimSocketsForTurrets : 1;                      // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTryAlwaysApplyCryoSickness : 1;                           // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPSetSimulatedInterpRollOverride : 1;                  // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsoleIgnoreSafeZonesForCrosshair : 1;                   // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDrawCrosshairWhenHUDIsHidden : 1;                    // 0x11F9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_CTUS[0x6];                                     // 0x11FA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  FemaleMaterialOverrides;                                   // 0x1200(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bUseBPCheckCanSpawnFromLocation : 1;                       // 0x1210(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YYN0[0x3];                                     // 0x1211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PaintConsumptionMultiplier;                                // 0x1214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargingBlockedStopTimeThreshold;                          // 0x1218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2W3G[0x4];                                     // 0x121C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               MeleeSwingSockets;                                         // 0x1220(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                MeleeDamageAmount;                                         // 0x1230(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeleeDamageImpulse;                                        // 0x1234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeleeSwingRadius;                                          // 0x1238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E3IZ[0x4];                                     // 0x123C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoAttackInfo>                     AttackInfos;                                               // 0x1240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      CurrentAttackIndex;                                        // 0x1250(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      LastAttackIndex;                                           // 0x1251(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VH5V[0x6];                                     // 0x1252(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MeleeDamageType;                                           // 0x1258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      StepActorDamageTypeOverride;                               // 0x1260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackOffset;                                              // 0x1268(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FleeHealthPercentage;                                      // 0x126C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BreakFleeHealthPercentage;                                 // 0x1270(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DTLU[0x4];                                     // 0x1274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TamerString;                                               // 0x1278(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	struct FString                                     TamedName;                                                 // 0x1288(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FHibernationZoneInfo>                HibernatedZoneVolumes;                                     // 0x1298(0x0010) (ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	struct FVector2D                                   OverlayTooltipPadding;                                     // 0x12A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OverlayTooltipScale;                                       // 0x12B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HUDOverlayToolTipWidget;                                   // 0x12B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MyDinoEntry;                                               // 0x12C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     RiderFPVCameraOffset;                                      // 0x12C8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VPJ3[0x24];                                    // 0x12D4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FinalNPCLevelMultiplier;                                   // 0x12F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandingTraceMaxDistance;                                   // 0x12FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlyingWanderFixedDistanceAmount;                           // 0x1300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlyingWanderRandomDistanceAmount;                          // 0x1304(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AcceptableLandingRadius;                                   // 0x1308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxLandingTime;                                            // 0x130C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GenderSpeedMultipliers[0x2];                               // 0x1310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargeSpeedMultiplier;                                     // 0x1318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O8BF[0x4];                                     // 0x131C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                ChargingAnim;                                              // 0x1320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargingStaminaPerSecondDrain;                             // 0x1328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargingStopDotTreshold;                                   // 0x132C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TX6I[0x18];                                    // 0x1330(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AShooterCharacter>            Rider;                                                     // 0x1348(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	TWeakObjectPtr<class AShooterCharacter>            PreviousRider;                                             // 0x1350(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UClass*                                      SaddleItemClass;                                           // 0x1358(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FString                                     SaddleSlotNameOverride;                                    // 0x1360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSaddlePassengerSeatDefinition>      NoSaddlePassengerSeats;                                    // 0x1370(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TWeakObjectPtr<class APrimalCharacter>             CarriedCharacter;                                          // 0x1380(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_L5TC[0x8];                                     // 0x1388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                DinoWithPassengerAnim;                                     // 0x1390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                DinoWithDinoPassengerAnim;                                 // 0x1398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<TWeakObjectPtr<class APrimalCharacter>>     PassengerPerSeat;                                          // 0x13A0(0x0010) (Net, ZeroConstructor, Transient, RepNotify)
	TArray<class APrimalCharacter*>                    SavedPassengerPerSeat;                                     // 0x13B0(0x0010) (ZeroConstructor, Transient, SaveGame)
	unsigned char                                      UnknownData_K5QL[0x10];                                    // 0x13C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastClientCameraRotationServerUpdate;                      // 0x13D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class USceneComponent*>                     OverrideTargetComponents;                                  // 0x13D8(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	float                                              WhistleTraceOffset;                                        // 0x13E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EO0U[0x10];                                    // 0x13EC(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LastPlayedAttackAnimation;                                 // 0x13FC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      AttackIndexOfPlayedAnimation;                              // 0x1400(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_0HCV[0x7];                                     // 0x1401(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoBaseLevelWeightEntry>           DinoBaseLevelWeightEntries;                                // 0x1408(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	unsigned char                                      UnknownData_7QML[0x70];                                    // 0x1418(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RidingFirstPersonViewLocationOffset;                       // 0x1488(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsLanding : 1;                                            // 0x1494(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bCanCharge : 1;                                            // 0x1494(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCancelInterpolation : 1;                                  // 0x1494(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bIsCharging : 1;                                           // 0x1494(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      bChargeDamageStructures : 1;                               // 0x1494(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicatePitchWhileSwimming : 1;                          // 0x1494(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsFlying : 1;                                             // 0x1494(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      bIsWakingTame : 1;                                         // 0x1494(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bAllowRiding : 1;                                          // 0x1495(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceAutoTame : 1;                                        // 0x1495(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, NoDestructor)
	unsigned char                                      bRiderJumpTogglesFlight : 1;                               // 0x1495(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasRider : 1;                                             // 0x1495(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bAllowCarryFlyerDinos : 1;                                 // 0x1495(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_VBEU : 1;                                      // 0x1495(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bFlyerForceNoPitch : 1;                                    // 0x1495(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerForceLimitPitch : 1;                                 // 0x1495(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventStasis : 1;                                        // 0x1496(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoTameable : 1;                                         // 0x1496(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysSetTamingTeamOnItemAdd : 1;                         // 0x1496(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_MUEL : 1;                                      // 0x1496(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCheatForceTameRide : 1;                                   // 0x1496(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bIsFemale : 1;                                             // 0x1496(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bRiderUseDirectionalAttackIndex : 1;                       // 0x1496(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBeTamed : 1;                                           // 0x1496(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTargetingIgnoredByWildDinos : 1;                          // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bTargetingIgnoreWildDinos : 1;                             // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bCanMountOnHumans : 1;                                     // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIKIgnoreSaddleStructures : 1;                             // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttackTargetWhenLaunched : 1;                             // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanOpenLockedDoors : 1;                                   // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseColorization : 1;                                      // 0x1497(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMeleeSwingDamageBlockedByStrutures : 1;                   // 0x1497(0x0001) BIT_FIELD (Edit, NoDestructor)
	float                                              BabyChanceOfTwins;                                         // 0x1498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowTargetingCorpses : 1;                                // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRiderDontRequireSaddle : 1;                               // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowsFishingOnSaddle : 1;                                // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBeOrdered : 1;                                         // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverridePlatformStructureLimit : 1;                       // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMeleeAttackHarvetUsableComponents : 1;                    // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlatformSaddleIgnoreRotDotCheck : 1;                      // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseInteprolatedVelocity : 1;                              // 0x149C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsCarnivore : 1;                                          // 0x149D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRidingInWater : 1;                                   // 0x149D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesGender : 1;                                           // 0x149D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTargetEverything : 1;                                     // 0x149D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bTamedWanderHarvestNonUsableHarvesting : 1;                // 0x149D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnableTamedWandering : 1;                                 // 0x149D(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bEnableTamedMating : 1;                                    // 0x149D(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bCollectVictimItems : 1;                                   // 0x149D(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bServerInitializedDino : 1;                                // 0x149E(0x0001) BIT_FIELD (SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_XHU7 : 1;                                      // 0x149E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHasMateBoost : 1;                                         // 0x149E(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_LXKI : 1;                                      // 0x149E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bTamingHasFood : 1;                                        // 0x149E(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bDontWander : 1;                                           // 0x149E(0x0001) BIT_FIELD (Edit, Transient, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bAnimIsMoving : 1;                                         // 0x149E(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bDoStepDamage : 1;                                         // 0x149E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventBasingWhenUntamed : 1;                             // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAlwaysAllowBasing : 1;                               // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bChargingRequiresWalking : 1;                              // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseRootLocSwimOffset : 1;                                 // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_AIJ0 : 1;                                      // 0x149F(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisplaySummonedNotification : 1;                          // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayKilledNotification : 1;                            // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetAttackWeight : 1;                                 // 0x149F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              BabyGestationSpeed;                                        // 0x14A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bServerForceUpdateDinoGameplayMeshNearPlayer : 1;          // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAllRiderWeapons : 1;                               // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAllRiderWeaponsOnReequip : 1;                      // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDeathAutoGrab : 1;                                   // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportWakingTame : 1;                                    // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAutoUnstasisDestroy : 1;                             // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDebugBaby : 1;                                            // 0x14A4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAlwaysUpdateAimOffsetInterpolation : 1;                   // 0x14A4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      WildAmbientHarvestingAnimationServerTickPose : 1;          // 0x14A5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventSleepingTame : 1;                                  // 0x14A5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTamedWanderHarvest : 1;                                   // 0x14A5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSimulatedNetLandCheckFloor : 1;                           // 0x14A5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRefreshedColorization : 1;                                // 0x14A5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_M6CG : 3;                                      // 0x14A5(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_YYCG : 3;                                      // 0x14A6(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bFlyerPreventRiderAutoFly : 1;                             // 0x14A6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowFlyerLandedRider : 1;                                // 0x14A6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventFlyerFlyingRider : 1;                              // 0x14A6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventFlyerCapsuleExpansion : 1;                         // 0x14A6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIncludeCarryWeightOfBasedPawns : 1;                       // 0x14A6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceRiderNetworkParent : 1;                              // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePerfectTame : 1;                                     // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanHaveBaby : 1;                                          // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBabyGestation : 1;                                     // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUnalignedDinoBasing : 1;                           // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideLevelMusicIfTamed : 1;                            // 0x14A7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReachedMaxStructures : 1;                                 // 0x14A7(0x0001) BIT_FIELD (Net, NoDestructor)
	float                                              ExtraBabyGestationSpeedMultiplier;                         // 0x14A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSupportsSaddleStructures : 1;                             // 0x14AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBonesHidden : 1;                                          // 0x14AC(0x0001) BIT_FIELD (Net, Transient, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_5PHC : 1;                                      // 0x14AC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanBeRepaired : 1;                                        // 0x14AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerDontAutoLandOnDismount : 1;                          // 0x14AC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsRepairing : 1;                                          // 0x14AC(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bIsBaby : 1;                                               // 0x14AC(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LVXJ : 1;                                      // 0x14AC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanUnclaimTame : 1;                                       // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowWildDinoEquipment : 1;                               // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTamedVisibleComponents : 1;                            // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDemolish : 1;                                        // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseGang : 1;                                              // 0x14AD(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBlueprintDrawFloatingHUD : 1;                             // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEggBoosted : 1;                                           // 0x14AD(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bUseBPTamedTick : 1;                                       // 0x14AD(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideWantsToRun : 1;                              // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPlayDying : 1;                                       // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsPassengerSeats : 1;                               // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddPassengerSeatMultiUseEntries : 1;                      // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSaddlePassengerSeatsWhenAvailable : 1;                 // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bScaleInsulationByMeleeDamage : 1;                         // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInventoryOnlyAllowCraftingWhenWandering : 1;              // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseWildRandomScale : 1;                                   // 0x14AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHeldJumpSlowFalling : 1;                                  // 0x14AF(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsHeldJumpSlowFalling : 1;                                // 0x14AF(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_080Z : 1;                                      // 0x14AF(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bTriggerBPUnstasis : 1;                                    // 0x14AF(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWildProduceEggDynamically : 1;                            // 0x14AF(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventWakingTameFeeding : 1;                             // 0x14AF(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDisablingTaming : 1;                                 // 0x14AF(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	float                                              AutoFadeOutAfterTameTime;                                  // 0x14B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bFlyerAllowRidingInCaves : 1;                              // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bScaleExtraRunningSpeedModifier : 1;                       // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideCrosshairAlpha : 1;                               // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideCrosshairColor : 1;                               // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetCrosshairLocation : 1;                            // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideCrosshairSpread : 1;                              // 0x14B4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCenterOffscreenFloatingHUDWidgets : 1;                    // 0x14B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bClampOffscreenFloatingHUDWidgets : 1;                     // 0x14B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseFixedSpawnLevel : 1;                                   // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTreatCrouchInputAsAttack : 1;                             // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetRiderUnboardLocation : 1;                         // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetRiderUnboardDirection : 1;                        // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUniqueDino : 1;                                           // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bModifyBasedCamera : 1;                                    // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnRefreshColorization : 1;                           // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideAncestorsButton : 1;                                  // 0x14B5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OverrideDinoName : 1;                               // 0x14B6(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPDinoTooltipCustomProgressBar : 1;                    // 0x14B6(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPDisplayTamedMessage : 1;                             // 0x14B6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideTamingDescriptionLabel : 1;                  // 0x14B6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanMountOnCharacter : 1;                             // 0x14B6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsNursingDino : 1;                                        // 0x14B6(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsNursing : 1;                                            // 0x14B6(0x0001) BIT_FIELD (Edit, Net, SaveGame, NoDestructor)
	unsigned char                                      bUseBPGetRiderSocket : 1;                                  // 0x14B6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPShowTamingPanel : 1;                                 // 0x14B7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerPrioritizeAllyMountToCarry : 1;                      // 0x14B7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideMutationLabels : 1;                          // 0x14B7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventMovementModeChangeForDinoPassengers : 1;           // 0x14B7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventRiderImmobilization : 1;                           // 0x14B7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              BasedCameraSpeedMultiplier;                                // 0x14B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1EY7[0x4];                                     // 0x14BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastEggBoostedTime;                                        // 0x14C0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              WildPercentageChanceOfBaby;                                // 0x14C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildBabyAgeWeight;                                         // 0x14CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyGestationProgress;                                     // 0x14D0(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              FlyerForceLimitPitchMin;                                   // 0x14D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlyerForceLimitPitchMax;                                   // 0x14D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_43JC[0x8];                                     // 0x14DC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BabyChanceOfTriplets;                                      // 0x14E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyAge;                                                   // 0x14E8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MaxPercentOfCapsulHeightAllowedForIK;                      // 0x14EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SlopeBiasForMaxCapsulePercent;                             // 0x14F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FlyingForceRotationRateModifier;                           // 0x14F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               HideBoneNames;                                             // 0x14F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     HideBonesString;                                           // 0x1508(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     WaterSurfaceExtraJumpVector;                               // 0x1518(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     FlyerTakeOffAdditionalVelocity;                            // 0x1524(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OpenDoorDelay;                                             // 0x1530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedWanderHarvestInterval;                                // 0x1534(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedWanderHarvestSearchRange;                             // 0x1538(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedWanderHarvestCollectRadius;                           // 0x153C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TamedWanderHarvestCollectOffset;                           // 0x1540(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RootLocSwimOffset;                                         // 0x154C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayAnimBelowHealthPercent;                                // 0x1550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LeavePlayAnimBelowHealthPercent;                           // 0x1554(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlatformSaddleMaxStructureBuildDistance2D;                 // 0x1558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_73VZ[0x4];                                     // 0x155C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                PlayAnimBelowHealth;                                       // 0x1560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LowHealthExitSound;                                        // 0x1568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LowHealthEnterSound;                                       // 0x1570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      LowHealthDinoSettings;                                     // 0x1578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimOffsetInterpSpeed;                                     // 0x1580(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GV9Y[0x4];                                     // 0x1584(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AIRangeMultiplier;                                         // 0x1588(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      PreventColorizationRegions[0x6];                           // 0x158C(0x0006) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      AllowPaintingColorRegions[0x6];                            // 0x1592(0x0006) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      ColorSetIndices[0x6];                                      // 0x1598(0x0006) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_885X[0x2];                                     // 0x159E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ColorSetNames[0x6];                                        // 0x15A0(0x0030) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ColorSetIntensityMultipliers[0x6];                         // 0x15D0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalBuff>                  ColorOverrideBuff;                                         // 0x15E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R8PI[0xC];                                     // 0x15F0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MeleeAttackStaminaCost;                                    // 0x15FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                WakingTameAnimation;                                       // 0x1600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       Target;                                                    // 0x1608(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       TamedFollowTarget;                                         // 0x1610(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       TamedLandTarget;                                           // 0x1618(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              PercentChanceFemale;                                       // 0x1620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9RV0[0x4];                                     // 0x1624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              DeathGiveItemClasses;                                      // 0x1628(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      DeathGiveItemChanceToBeBlueprint;                          // 0x1638(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DeathGiveItemQualityMin;                                   // 0x1648(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeathGiveItemQualityMax;                                   // 0x164C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeathGiveItemRange;                                        // 0x1650(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AARB[0x4];                                     // 0x1654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DeathGiveAchievement;                                      // 0x1658(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  OverrideAreaMusic;                                         // 0x1668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     UnboardLocationOffset;                                     // 0x1670(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SU9H[0x14];                                    // 0x167C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RidingNetUpdateFequency;                                   // 0x1690(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RiderMaxSpeedModifier;                                     // 0x1694(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RiderExtraMaxSpeedModifier;                                // 0x1698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RiderMaxRunSpeedModifier;                                  // 0x169C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RiderRotationRateModifier;                                 // 0x16A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimmingRotationRateModifier;                              // 0x16A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              chargingRotationRateModifier;                              // 0x16A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IFL4[0x4];                                     // 0x16AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                EnterFlightAnim;                                           // 0x16B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ExitFlightAnim;                                            // 0x16B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                SleepConsumeFoodAnim;                                      // 0x16C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                WakingConsumeFoodAnim;                                     // 0x16C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                FallAsleepAnim;                                            // 0x16D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                TamedUnsleepAnim;                                          // 0x16D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                WildUnsleepAnim;                                           // 0x16E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OpenDoorAnim;                                              // 0x16E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ControlFacePitchInterpSpeed;                               // 0x16F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedWalkableFloorZ;                                       // 0x16F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CurrentMovementAnimRate;                                   // 0x16F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MinPlayerLevelForWakingTame;                               // 0x16FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PAJC[0x8];                                     // 0x1700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      TamedInventoryComponentTemplate;                           // 0x1708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeightedObjectList                         DeathInventoryTemplates;                                   // 0x1710(0x0020) (Edit, DisableEditOnInstance)
	float                                              DeathInventoryChanceToUse;                                 // 0x1730(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameFeedInterval;                                    // 0x1734(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4S60[0x8];                                     // 0x1738(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DeathInventoryQualityPerLevelMultiplier;                   // 0x1740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RequiredTameAffinity;                                      // 0x1744(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              RequiredTameAffinityPerBaseLevel;                          // 0x1748(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      TamedAITargetingRange;                                     // 0x174C(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bMeleeSwingDamageBlockedByAllStationaryObjects : 1;        // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPChargingModifyInputAcceleration : 1;                 // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnRepIsCharging : 1;                                 // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventOrderAllowed : 1;                             // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPassengerDinosUsePassengerAnim : 1;                       // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesPassengerAnimOnDinos : 1;                             // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverrideRotationOnCarriedCharacter : 1;                   // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAdvancedCarryRelease : 1;                                 // 0x174D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceCarriedPlayerToCheckForWalls : 1;                    // 0x174E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClearRiderOnDinoImmobilized : 1;                          // 0x174E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIsBasedOnActor : 1;                                  // 0x174E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyControlRotation : 1;                           // 0x174E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_V9K2[0x1];                                     // 0x174F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       PassengerBoneNameOverride;                                 // 0x1750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CurrentTameAffinity;                                       // 0x1758(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TameIneffectivenessModifier;                               // 0x175C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TameIneffectivenessByAffinity;                             // 0x1760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_DCH3[0x4];                                     // 0x1764(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bUseBPIsValidUnStasisCaster;                               // 0x1768(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YP7M[0x7];                                     // 0x1769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPrimalSaddleStructure>              SaddleStructures;                                          // 0x1770(0x0010) (ZeroConstructor, SaveGame)
	int                                                MaxSaddleStructuresHeight;                                 // 0x1780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               CalculateStructureHeightFromSaddle;                        // 0x1784(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               CalculateStructureDistanceFromSaddle;                      // 0x1785(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HSC6[0x2];                                     // 0x1786(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SaddlePivotOffset;                                         // 0x1788(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxSaddleStructuresNum;                                    // 0x178C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DinoSettingsClass;                                         // 0x1790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamingFoodConsumeInterval;                                 // 0x1798(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DediForceAttackAnimTime;                                   // 0x179C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DediForceStartAttackAfterAnimTime;                         // 0x17A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameFoodIncreaseMultiplier;                          // 0x17A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                TamingTeamID;                                              // 0x17A8(0x0004) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                OwningPlayerID;                                            // 0x17AC(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FString                                     OwningPlayerName;                                          // 0x17B0(0x0010) (Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	double                                             TamingLastFoodConsumptionTime;                             // 0x17C0(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint32_t                                           DinoID1;                                                   // 0x17C8(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32_t                                           DinoID2;                                                   // 0x17CC(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_LUHV[0xC];                                     // 0x17D0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TamedAggressionLevel;                                      // 0x17DC(0x0004) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TamingIneffectivenessModifierIncreaseByDamagePercent;      // 0x17E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V2P3[0x8];                                     // 0x17E4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalStructureItemContainer_SupplyCrate> LinkedSupplyCrate;                                         // 0x17EC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UntamedPoopTimeMinInterval;                                // 0x17F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UntamedPoopTimeMaxInterval;                                // 0x17F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MeleeHarvestDamageMultiplier;                              // 0x17FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AllowRidingMaxDistance;                                    // 0x1800(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UntamedPoopTimeCache;                                      // 0x1804(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class UClass*                                      BaseEggClass;                                              // 0x1808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              EggItemsToSpawn;                                           // 0x1810(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      EggWeightsToSpawn;                                         // 0x1820(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              FertilizedEggItemsToSpawn;                                 // 0x1830(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      FertilizedEggWeightsToSpawn;                               // 0x1840(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              EggChanceToSpawnUnstasis;                                  // 0x1850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggIntervalBetweenUnstasisChances;                         // 0x1854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggRangeMaximumNumberFromSameDinoType;                     // 0x1858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                EggMaximumNumberFromSameDinoType;                          // 0x185C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggRangeMaximumNumber;                                     // 0x1860(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                EggMaximumNumber;                                          // 0x1864(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EggSpawnSocketName;                                        // 0x1868(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                EggLayingAnimation;                                        // 0x1870(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UntamedWalkingSpeedModifier;                               // 0x1878(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedWalkingSpeedModifier;                                 // 0x187C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UntamedRunningSpeedModifier;                               // 0x1880(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedRunningSpeedModifier;                                 // 0x1884(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      RandomColorSetsMale;                                       // 0x1888(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      RandomColorSetsFemale;                                     // 0x1890(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SpawnerColorSets;                                          // 0x1898(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               RiderAnimOverride;                                         // 0x18A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               TurningRightRiderAnimOverride;                             // 0x18A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               TurningLeftRiderAnimOverride;                              // 0x18B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               LatchedRiderAnimOverride;                                  // 0x18B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               RiderMoveAnimOverride;                                     // 0x18C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RidingAnimSpeedFactor;                                     // 0x18C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WAIR[0x4];                                     // 0x18CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                StartRidingAnimOverride;                                   // 0x18D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                StopRidingAnimOverride;                                    // 0x18D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TargetingTeamNameOverride;                                 // 0x18E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraTamedSpeedMultiplier;                                 // 0x18E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraUnTamedSpeedMultiplier;                               // 0x18EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastEggSpawnChanceTime;                                    // 0x18F0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FName                                       OriginalNPCVolumeName;                                     // 0x18F8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              OutsideOriginalNPCVolumeStasisDestroyInterval;             // 0x1900(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StasisedDestroyInterval;                                   // 0x1904(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedAllowNamingTime;                                      // 0x1908(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MovementSpeedScalingRotationRatePower;                     // 0x190C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackNoStaminaTorpidityMultiplier;                        // 0x1910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DecayDestructionPeriod;                                    // 0x1914(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             TamedAtTime;                                               // 0x1918(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastInAllyRangeTime;                                       // 0x1920(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZNOR[0x10];                                    // 0x1928(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APrimalStructure*>                    LatchedOnStructures;                                       // 0x1938(0x0010) (ZeroConstructor, Transient)
	class UPrimalDinoSettings*                         MyDinoSettingsCDO;                                         // 0x1948(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V5EB[0x4];                                     // 0x1950(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LocInterpolationSnapDistance;                              // 0x1954(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0Z8P[0x10];                                    // 0x1958(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HUDScaleMultiplier;                                        // 0x1968(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HUDTextScaleMultiplier;                                    // 0x196C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedCorpseLifespan;                                       // 0x1970(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MateBoostDamageReceiveMultiplier;                          // 0x1974(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MateBoostDamageGiveMultiplier;                             // 0x1978(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MateBoostRange;                                            // 0x197C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DinoNameTag;                                               // 0x1980(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AShooterPlayerController*                    AttackMyTargetForPlayerController;                         // 0x1988(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RidingAttackExtraVelocityDelay;                            // 0x1990(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageRadialDamageInterval;                            // 0x1994(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageRadialDamageExtraRadius;                         // 0x1998(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageRadialDamageAmountGeneral;                       // 0x199C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageRadialDamageAmountHarvestable;                   // 0x19A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NGS3[0xC];                                     // 0x19A4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      StepHarvestableDamageType;                                 // 0x19B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageFootDamageInterval;                              // 0x19B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageFootDamageRadius;                                // 0x19BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StepDamageFootDamageAmount;                                // 0x19C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H9W6[0x4];                                     // 0x19C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               StepDamageFootDamageSockets;                               // 0x19C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DurationBeforeMovingStuckPawn;                             // 0x19D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7M0K[0x14];                                    // 0x19DC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                StartledAnimationRightDefault;                             // 0x19F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                StartledAnimationLeft;                                     // 0x19F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UAnimMontage*>                        StartledAnimations;                                        // 0x1A00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                                FlyingStartledAnimation;                                   // 0x1A10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomPlayStartledAnimIntervalMin;                         // 0x1A18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomPlayStartledAnimIntervalMax;                         // 0x1A1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StartledAnimationCooldown;                                 // 0x1A20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultActivateAttackRangeOffset;                          // 0x1A24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CorpseTargetingMultiplier;                                 // 0x1A28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KKE3[0x14];                                    // 0x1A2C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CorpseLifespanNonRelevant;                                 // 0x1A40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPUnstasisConsumeFood : 1;                             // 0x1A44(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnDinoStartled : 1;                                  // 0x1A44(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRemoteDinoConsumesStaminaWhileRunning : 1;                // 0x1A44(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_TRGC[0x3];                                     // 0x1A45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinStaminaForRider;                                        // 0x1A48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LoseStaminaWithRiderRate;                                  // 0x1A4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FollowingRunDistance;                                      // 0x1A50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDinoKillerTransferWeightPercent;                        // 0x1A54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NPCZoneVolumeCountWeight;                                  // 0x1A58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4ZEL[0x4];                                     // 0x1A5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     FloatingHUDTextWorldOffset;                                // 0x1A60(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BP1M[0x6C];                                    // 0x1A6C(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      RepairRequirementsItem;                                    // 0x1AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OBGW[0x4];                                     // 0x1AE0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RepairCheckInterval;                                       // 0x1AE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RepairPercentPerInterval;                                  // 0x1AE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     RiderCheckTraceOffset;                                     // 0x1AEC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     RiderEjectionImpulse;                                      // 0x1AF8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameAffinityDecreaseFoodPercentage;                  // 0x1B04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameAllowFeedingFoodPercentage;                      // 0x1B08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameFoodAffinityMultiplier;                          // 0x1B0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CheckForWildAmbientHarvestingIntervalMin;                  // 0x1B10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CheckForWildAmbientHarvestingIntervalMax;                  // 0x1B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V1IP[0x8];                                     // 0x1B18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                WildAmbientHarvestingAnimation;                            // 0x1B20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UAnimMontage*>                        WildAmbientHarvestingAnimations;                           // 0x1B28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              WildAmbientHarvestingComponentClasses;                     // 0x1B38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              WildAmbientHarvestingRadius;                               // 0x1B48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KWWW[0x4];                                     // 0x1B4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AbsoluteBaseLevel;                                         // 0x1B50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NLUM[0x4];                                     // 0x1B54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FStatValuePair>                      OverrideBaseStatLevelsOnSpawn;                             // 0x1B58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue>> OverrideStatPriorityOnSpawn;                               // 0x1B68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      TamedHarvestDamageType;                                    // 0x1B78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FDinoSaddleStruct                           SaddleStruct;                                              // 0x1B80(0x0020) (Net, RepNotify, ContainsInstancedReference)
	unsigned char                                      UnknownData_XEHK[0x20];                                    // 0x1BA0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      StartChargingShake;                                        // 0x1BC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      LightEndChargingShake;                                     // 0x1BC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HardEndChargingShake;                                      // 0x1BD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargeBumpDamage;                                          // 0x1BD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1KRJ[0x4];                                     // 0x1BDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ChargeBumpDamageType;                                      // 0x1BE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargeBumpImpulse;                                         // 0x1BE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinChargeInterval;                                         // 0x1BEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerMountedLaunchFowardSpeed;                            // 0x1BF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerMountedLaunchUpSpeed;                                // 0x1BF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackOnLaunchMaximumTargetDistance;                       // 0x1BF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              KeepFlightRemainingTime;                                   // 0x1BFC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                MountCharacterAnimation;                                   // 0x1C00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                UnmountCharacterAnimation;                                 // 0x1C08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                EndChargingAnimation;                                      // 0x1C10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlyingRunSpeedModifier;                                    // 0x1C18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargingAnimDelay;                                         // 0x1C1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RiderSocketName;                                           // 0x1C20(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ChargingActivationRequiresStamina;                         // 0x1C28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ChargingActivationConsumesStamina;                         // 0x1C2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlyerHardBreakingOverride;                                 // 0x1C30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyScale;                                                 // 0x1C34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabySpeedMultiplier;                                       // 0x1C38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyPitchMultiplier;                                       // 0x1C3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyVolumeMultiplier;                                      // 0x1C40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       WanderAroundActor;                                         // 0x1C44(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WanderAroundActorMaxDistance;                              // 0x1C4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S5VX[0x20];                                    // 0x1C50(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BuffGivenToBasedCharacters;                                // 0x1C70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CG11[0x8];                                     // 0x1C78(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastUpdatedBabyAgeAtTime;                                  // 0x1C80(0x0008) (BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastUpdatedGestationAtTime;                                // 0x1C88(0x0008) (BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastUpdatedMatingAtTime;                                   // 0x1C90(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              BabyAgeSpeed;                                              // 0x1C98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraBabyAgeSpeedMultiplier;                               // 0x1C9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FemaleMatingRangeAddition;                                 // 0x1CA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FemaleMatingTime;                                          // 0x1CA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             NextAllowedMatingTime;                                     // 0x1CA8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              MatingProgress;                                            // 0x1CB0(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IKS6[0x4];                                     // 0x1CB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastMatingNotificationTime;                                // 0x1CB8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class APrimalDinoCharacter*                        MatingWithDino;                                            // 0x1CC0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                MatingAnimationMale;                                       // 0x1CC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      GestationEggNumberOfLevelUpPointsApplied[0xC];             // 0x1CD0(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              GestationEggTamedIneffectivenessModifier;                  // 0x1CDC(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      GestationEggColorSetIndices[0x6];                          // 0x1CE0(0x0006) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GDYS[0x2];                                     // 0x1CE6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NewFemaleMinTimeBetweenMating;                             // 0x1CE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NewFemaleMaxTimeBetweenMating;                             // 0x1CEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              DefaultTamedBuffs;                                         // 0x1CF0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_BZT7[0x18];                                    // 0x1D00(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HyperThermiaInsulation;                                    // 0x1D18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypoThermiaInsulation;                                     // 0x1D1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationRange;                                           // 0x1D20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GangOverlapRange;                                          // 0x1D24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GangDamageResistance;                                      // 0x1D28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GangDamage;                                                // 0x1D2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxGangCount;                                              // 0x1D30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                GangCount;                                                 // 0x1D34(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4TYS[0x1C];                                    // 0x1D38(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WildRandomScale;                                           // 0x1D54(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              HeldJumpSlowFallingGravityZScale;                          // 0x1D58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F1X7[0x4];                                     // 0x1D5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                SlowFallingAnim;                                           // 0x1D60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SlowFallingStaminaCostPerSecond;                           // 0x1D68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NoRiderRotationModifier;                                   // 0x1D6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RiderFPVCameraUseSocketName;                               // 0x1D70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RiderLatchedFPVCameraUseSocketName;                        // 0x1D78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PassengerFPVCameraRootSocket;                              // 0x1D80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               FPVRiderBoneNamesToHide;                                   // 0x1D88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ExtraRunningSpeedModifier;                                 // 0x1D98(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ScaleExtraRunningSpeedModifierMin;                         // 0x1D9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ScaleExtraRunningSpeedModifierMax;                         // 0x1DA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ScaleExtraRunningSpeedModifierSpeed;                       // 0x1DA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LastHigherScaleExtraRunningSpeedValue;                     // 0x1DA8(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IQVD[0x4];                                     // 0x1DAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastHigherScaleExtraRunningSpeedTime;                      // 0x1DB0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bSimulateRootMotion : 1;                                   // 0x1DB8(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bUseBPOverrideStencilAllianceForTarget : 1;                // 0x1DB8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableHighQualityAIVolumeLedgeChecking : 1;              // 0x1DB8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoHighQualityLedgeChecking : 1;                           // 0x1DB8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_U7DZ[0x3];                                     // 0x1DB9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RiderMovementSpeedScalingRotationRatePowerMultiplier;      // 0x1DBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HighQualityLedgeDetectionExtraTraceDistance;               // 0x1DC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bOnlyDoStepDamageWhenRunning : 1;                          // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_GVMD : 1;                                      // 0x1DC4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventPlatformSaddleMultiFloors : 1;                     // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventMountedDinoMeshHiding : 1;                         // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePlayerMountedCarryingDinoAnimation : 1;                // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventRotationRateModifier : 1;                          // 0x1DC4(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStepDamageFoliageOnly : 1;                                // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUntamedRun : 1;                                    // 0x1DC4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowTogglingPublicSeating : 1;                           // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowPublicSeating : 1;                                   // 0x1DC5(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bAllowWaterSurfaceExtraJump : 1;                           // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseVelocityForRequestedMoveIfStuck : 1;                   // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPDoAttack : 1;                                        // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStepDamageNonFoliageWithoutRunning : 1;                   // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStepDamageAllTargetables : 1;                             // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDamageNonFoliageFeetSocketsOnly : 1;                      // 0x1DC5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRiderDontBeBlockedByPawnMesh : 1;                         // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseExtendedUnstasisCheck : 1;                             // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_44OD : 1;                                      // 0x1DC6(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowDinoAutoConsumeInventoryFood : 1;                    // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceNoCharacterStatusComponentTick : 1;                  // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsRaidDino : 1;                                           // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWildIgnoredByAutoTurrets : 1;                             // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWildAllowTargetingNeutralStructures : 1;                  // 0x1DC6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoStepDamageTamedOnly : 1;                                // 0x1DC7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStepDamageNonFoliageTamedOnly : 1;                        // 0x1DC7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_3YFU : 1;                                      // 0x1DC7(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceWildDeathInventoryDeposit : 1;                       // 0x1DC7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsCarryingCharacter : 1;                                  // 0x1DC7(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bIsCarryingPassenger : 1;                                  // 0x1DC7(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseBPCanTakePassenger : 1;                                // 0x1DC7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	int                                                LoadDestroyWildDinosUnderVersion;                          // 0x1DC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SaveDestroyWildDinosUnderVersion;                          // 0x1DCC(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              AllowWaterSurfaceExtraJumpStaminaCost;                     // 0x1DD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PYJC[0x4];                                     // 0x1DD4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  PlayKillLocalSound;                                        // 0x1DD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0TO9[0x14];                                    // 0x1DE0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      TribeGroupPetOrderingRank;                                 // 0x1DF4(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      TribeGroupPetRidingRank;                                   // 0x1DF5(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      FollowStoppingDistance;                                    // 0x1DF6(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HDSK[0x1];                                     // 0x1DF7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ImprinterName;                                             // 0x1DF8(0x0010) (Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic)
	uint64_t                                           ImprinterPlayerDataID;                                     // 0x1E08(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BabyMinCuddleInterval;                                     // 0x1E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyMaxCuddleInterval;                                     // 0x1E14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleGracePeriod;                                     // 0x1E18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleLoseImpringQualityPerSecond;                     // 0x1E1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleWalkDistance;                                    // 0x1E20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     BabyCuddleWalkStartingLocation;                            // 0x1E24(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             BabyNextCuddleTime;                                        // 0x1E30(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EBabyCuddleType>           BabyCuddleType;                                            // 0x1E38(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T4T2[0x7];                                     // 0x1E39(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BabyCuddleFood;                                            // 0x1E40(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                BabyCuddledAnimation;                                      // 0x1E48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              MyBabyCuddleFoodTypes;                                     // 0x1E50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              RiderMaxImprintingQualityDamageReduction;                  // 0x1E60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RiderMaxImprintingQualityDamageMultiplier;                 // 0x1E64(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyImprintingQualityTotalMaturationTime;                  // 0x1E68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameMaxDistance;                                     // 0x1E6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeBetweenTamedWakingEatAnimations;                       // 0x1E70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZOMJ[0xC];                                     // 0x1E74(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_98MQ : 1;                                      // 0x1E80(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDontPlayAttackingMusic : 1;                               // 0x1E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceIgnoreRagdollHarvesting : 1;                         // 0x1E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPModifyAimOffsetTargetLocation : 1;                      // 0x1E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPModifyAimOffsetNoTarget : 1;                            // 0x1E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsVehicle : 1;                                            // 0x1E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisallowPostNetReplication : 1;                           // 0x1E80(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_MQDA : 1;                                      // 0x1E80(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventMating : 1;                                        // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttackStopsRotation : 1;                                  // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerDinoAllowBackwardsFlight : 1;                        // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerDinoAllowStrafing : 1;                               // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreTargetingLiveUnriddenDinos : 1;                     // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSleepedForceCreateInventory : 1;                          // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLocalForceNearbySkelMeshUpdate : 1;                       // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFlyerDisableEnemyTargetingMaxDeltaZ : 1;                  // 0x1E81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsBossDino : 1;                                           // 0x1E82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTamedAIAllowSpecialAttacks : 1;                           // 0x1E82(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bTamedAIToggleSpecialAttacks : 1;                          // 0x1E82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EVYQ : 1;                                      // 0x1E82(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bRepeatPrimaryAttack : 1;                                  // 0x1E82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventUploading : 1;                                     // 0x1E82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHibernation : 1;                                   // 0x1E82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRiderMovementLocked : 1;                                  // 0x1E82(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_WDRU : 1;                                      // 0x1E83(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNeutered : 1;                                             // 0x1E83(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreAllWhistles : 1;                                    // 0x1E83(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bUseBPDoHarvestAttack : 1;                                 // 0x1E83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyHarvestingQuantity : 1;                        // 0x1E83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyHarvestingWeightsArray : 1;                    // 0x1E83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              StepDamageFootDamageRunningMultiplier;                     // 0x1E84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPModifyHarvestDamage : 1;                             // 0x1E88(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideFloatingHUD : 1;                                      // 0x1E88(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_GTMA[0x3];                                     // 0x1E89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              maxRangeForWeaponTriggeredTooltip;                         // 0x1E8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableHarvesting : 1;                                    // 0x1E90(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bUseBPDinoPostBeginPlay : 1;                               // 0x1E90(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_SESD : 1;                                      // 0x1E90(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bFlyerDontGainImpulseOnSubmerged : 1;                      // 0x1E90(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanAutodrag : 1;                                     // 0x1E90(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanDragCharacter : 1;                                // 0x1E90(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDraggingWhileFalling : 1;                            // 0x1E90(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSingleplayerFreezePhysicsWhenNoTarget : 1;                // 0x1E90(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_DCT9 : 1;                                      // 0x1E91(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsCloneDino : 1;                                          // 0x1E91(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bUseAdvancedAnimLerp : 1;                                  // 0x1E91(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventWanderingUnderWater : 1;                           // 0x1E91(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bWildAllowFollowTamedTarget : 1;                           // 0x1E91(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowDamageSameTeamAndClass : 1;                          // 0x1E91(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowsTurretMode : 1;                                     // 0x1E91(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRidingInTurretMode : 1;                              // 0x1E91(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsInTurretMode : 1;                                       // 0x1E92(0x0001) BIT_FIELD (BlueprintVisible, Net, SaveGame, NoDestructor)
	unsigned char                                      bUseBPShouldCancelDoAttack : 1;                            // 0x1E92(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyDesiredRotation : 1;                           // 0x1E92(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseLocalSpaceDesiredRotationWithRider : 1;                // 0x1E92(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPDesiredRotationIsLocalSpace : 1;                     // 0x1E92(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_KWOP : 1;                                      // 0x1E92(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPOverrideCameraViewTarget : 1;                        // 0x1E92(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsRobot : 1;                                              // 0x1E92(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_M5UR[0x1];                                     // 0x1E93(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StepRadialDamageOffset;                                    // 0x1E94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBP_CustomModifier_RotationRate : 1;                    // 0x1E98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_CustomModifier_MaxSpeed : 1;                        // 0x1E98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OnStartLandingNotify : 1;                           // 0x1E98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_L2ZK : 1;                                      // 0x1E98(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseAttackForceWalkDistanceMultiplier : 1;                 // 0x1E98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePerFrameTicking : 1;                                 // 0x1E98(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bHadStaticBase : 1;                                        // 0x1E98(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bNoKillXP : 1;                                             // 0x1E98(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      bIgnoreAllyLook : 1;                                       // 0x1E99(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bBabyInitiallyUnclaimed : 1;                               // 0x1E99(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bUseBPForceTurretFastTargeting : 1;                        // 0x1E99(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QN4W : 1;                                      // 0x1E99(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSuppressWakingTameMessage : 1;                            // 0x1E99(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventFlyerLanding : 1;                                  // 0x1E99(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OBYP : 2;                                      // 0x1E99(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDisableCollisionWithDinosWhenFlying : 1;                  // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowTrapping : 1;                                        // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventWildTrapping : 1;                                  // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsTrapTamed : 1;                                          // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDestroyOnRapidDeath : 1;                            // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventFallingBumpCheck : 1;                              // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDestroyingDino : 1;                                     // 0x1E9A(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCheckBPAllowClaiming : 1;                                 // 0x1E9A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBlueprintExtraBabyScale : 1;                           // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventNeuter : 1;                                        // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetDragSocketName : 1;                               // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetDragSocketDinoName : 1;                           // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetLookOffsetSocketName : 1;                         // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTargetEverythingIncludingSameTeamInPVE : 1;               // 0x1E9B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              ForcePawnBigPushingForTime;                                // 0x1E9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceUsePhysicalFootSurfaceTrace : 1;                     // 0x1EA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OnPostNetReplication : 1;                           // 0x1EA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPassiveFlee : 1;                                          // 0x1EA0(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_M8VF : 1;                                      // 0x1EA0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOnlyTargetConscious : 1;                                  // 0x1EA0(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bBPManagedFPVViewLocationNoRider : 1;                      // 0x1EA0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHideSaddleInFPV : 1;                                      // 0x1EA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCloning : 1;                                       // 0x1EA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventStasisOnDedi : 1;                                  // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysCheckForFloor : 1;                                  // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysCheckForFalling : 1;                                // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowCarryWaterDinos : 1;                            // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_AllowWalkableSlopeOverride : 1;                     // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_CanFly : 1;                                         // 0x1EA1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBP_OverrideBasedCharactersCameraInterpSpeed : 1;       // 0x1EA1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPOverrideFloatingHUDLocation : 1;                     // 0x1EA1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInterceptPlayerEmotes : 1;                                // 0x1EA2(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBP_ShouldPreventBasedCharactersCameraInterpolation : 1; // 0x1EA2(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRidingIsSeperateUnstasisCaster : 1;                       // 0x1EA2(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsOceanManagerDino : 1;                                   // 0x1EA2(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_BL05[0x1];                                     // 0x1EA3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WanderRadiusMultiplier;                                    // 0x1EA4(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      DisableCameraShakes : 1;                                   // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBP_OverrideCarriedCharacterTransform : 1;              // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBP_OnBasedPawnNotifies : 1;                            // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsesWaterWalking : 1;                                     // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHasInvisiableSaddle : 1;                                  // 0x1EA8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseWildDinoMapMultipliers : 1;                            // 0x1EA8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreFlierRidingRestrictions : 1;                        // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRotatingUpdatesDinoIK : 1;                                // 0x1EA8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBP_OverrideRiderCameraCollisionSweep : 1;              // 0x1EA9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawHealthBar : 1;                                        // 0x1EA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseShoulderMountedLaunch : 1;                             // 0x1EA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePreciseLaunching : 1;                                  // 0x1EA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QJNJ : 2;                                      // 0x1EA9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowInvalidTameVersion : 1;                              // 0x1EA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowPvECarry : 1;                                   // 0x1EA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUnderwaterMating : 1;                                     // 0x1EAA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBabyPreventExitingWater : 1;                              // 0x1EAA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCheckSeven : 1;                                      // 0x1EAA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventExportDino : 1;                                    // 0x1EAA(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPreventPassengerFPV : 1;                                  // 0x1EAA(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6DZS[0x1];                                     // 0x1EAB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AIDinoForceActiveUntasisingRange;                          // 0x1EAC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildRunningRotationRateModifier;                           // 0x1EB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedRunningRotationRateModifier;                          // 0x1EB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedSwimmingRotationRateModifier;                         // 0x1EB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildSwimmingRotationRateModifier;                          // 0x1EBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class ANPCZoneVolume>               HardLimitWildDinoToVolume;                                 // 0x1EC0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AVolume>                      WildLimitTargetVolume;                                     // 0x1EC8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              RiderFlyingRotationRateModifier;                           // 0x1ED0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NoRiderFlyingRotationRateModifier;                         // 0x1ED4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AICombatRotationRateModifier;                              // 0x1ED8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WalkingRotationRateModifier;                               // 0x1EDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SetAttackTargetTraceDistance;                              // 0x1EE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SetAttackTargetTraceWidth;                                 // 0x1EE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GJE0[0x18];                                    // 0x1EE8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                PlayerMountedCarryAnimation;                               // 0x1F00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPOnMountStateChanged : 1;                             // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHandleUseButtonPressBP : 1;                               // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGlideWhenFalling : 1;                                     // 0x1F08(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGlideWhenMounted : 1;                                     // 0x1F08(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowBackwardsMovement : 1;                          // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventBackwardsWalking : 1;                              // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupplyPlayerMountedCarryAnimation : 1;                    // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowMountedCarryRunning : 1;                        // 0x1F08(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanLatch : 1;                                             // 0x1F09(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsLatched : 1;                                            // 0x1F09(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      bIsLatchedDownward : 1;                                    // 0x1F09(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      bIsLatching : 1;                                           // 0x1F09(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      bRotateToFaceLatchingObject : 1;                           // 0x1F09(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      bLimitRiderYawOnLatched : 1;                               // 0x1F09(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowMountedWeaponry : 1;                                 // 0x1F09(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bKeepAffinityOnDamageRecievedWakingTame : 1;               // 0x1F09(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPFedWakingTameEvent : 1;                              // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceRiderDrawCrosshair : 1;                              // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDrawHUD : 1;                                         // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDrawHUDWithoutRecentlyRendered : 1;                  // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideFloatingName : 1;                                     // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanTargetVehicles : 1;                                    // 0x1F0A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRidingRequiresTamed : 1;                                  // 0x1F0A(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSuppressDeathNotification : 1;                            // 0x1F0A(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseCustomHealthBarColor : 1;                              // 0x1F0B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseOnUpdateMountedDinoMeshHiding : 1;                     // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInterceptTurnInputEvents : 1;                        // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPInterceptMoveInputEvents : 1;                        // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPInterceptMoveInputEventsEvenIfZero : 1;              // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPAdjustAttackIndex : 1;                               // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCheckBPAllowCarryCharacter : 1;                           // 0x1F0B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnEndCharging : 1;                                   // 0x1F0B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPNotifyMateBoostChanged : 1;                          // 0x1F0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCarriedDinoBabyRescaled : 1;                         // 0x1F0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_3CUF[0x3];                                     // 0x1F0D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HealthBarOffsetY;                                          // 0x1F10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J5YB[0x4];                                     // 0x1F14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMissionType*                                OwnerMission;                                              // 0x1F18(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceAllowBackwardsMovementWithNoRider : 1;               // 0x1F20(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsCorrupted : 1;                                          // 0x1F20(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsHordeDino : 1;                                          // 0x1F20(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bBPOverrideHealthBarOffset : 1;                            // 0x1F20(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDropWildEggsWithoutMateBoost : 1;                         // 0x1F20(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsTemporaryMissionDino : 1;                               // 0x1F20(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bForcePreventInventoryAccess : 1;                          // 0x1F20(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bAllowWildRunningWithoutTarget : 1;                        // 0x1F20(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsBed : 1;                                                // 0x1F21(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPGetTargetingDesirability : 1;                        // 0x1F21(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAlwaysAllowStrafing : 1;                                  // 0x1F21(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceAllowTamedTickEggLay : 1;                            // 0x1F21(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHasBuffPreventingUploading : 1;                           // 0x1F21(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableHarvestHealthGain : 1;                             // 0x1F21(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_OEXM[0x2];                                     // 0x1F22(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LimitRiderYawOnLatchedRange;                               // 0x1F24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatchingDistanceLimit;                                     // 0x1F28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatchingInitialYaw;                                        // 0x1F2C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatchingInitialPitch;                                      // 0x1F30(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatchingInterpolatedPitch;                                 // 0x1F34(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatchedFirstPersonViewAngle;                               // 0x1F38(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatchingCameraInterpolationSpeed;                          // 0x1F3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetLatchingInitialYaw;                                  // 0x1F40(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CurrentStrafeMagnitude;                                    // 0x1F44(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GainStaminaWhenLatchedRate;                                // 0x1F48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AIAggroNotifyNeighborsClassesRangeScale;                   // 0x1F4C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                LastFrameMoveRight;                                        // 0x1F50(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LastFrameMoveLeft;                                         // 0x1F54(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    LastRiderMountedWeaponRotation;                            // 0x1F58(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AINA[0xC];                                     // 0x1F64(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DeathGivesDossierIndex;                                    // 0x1F70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DeathGivesDossierDelay;                                    // 0x1F74(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator_NetQuantizeSmartPitch              LastMovementDesiredRotation_MountedWeaponry;               // 0x1F78(0x000C) (Net, Transient)
	struct FName                                       SaddleRiderMovementTraceThruSocketName;                    // 0x1F84(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimmingRunSpeedModifier;                                  // 0x1F8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RidingSwimmingRunSpeedModifier;                            // 0x1F90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FZAC[0x4];                                     // 0x1F94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             DinoDownloadedAtTime;                                      // 0x1F98(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FString                                     UploadedFromServerName;                                    // 0x1FA0(0x0010) (Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FString                                     LatestUploadedFromServerName;                              // 0x1FB0(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FString                                     PreviousUploadedFromServerName;                            // 0x1FC0(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FString                                     TamedOnServerName;                                         // 0x1FD0(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FDinoAncestorsEntry>                 DinoAncestors;                                             // 0x1FE0(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FDinoAncestorsEntry>                 DinoAncestorsMale;                                         // 0x1FF0(0x0010) (ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FDinoAncestorsEntry>                 NextBabyDinoAncestors;                                     // 0x2000(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<struct FDinoAncestorsEntry>                 NextBabyDinoAncestorsMale;                                 // 0x2010(0x0010) (ZeroConstructor, Transient, SaveGame)
	int                                                MaxAllowedRandomMutations;                                 // 0x2020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                RandomMutationRolls;                                       // 0x2024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomMutationChance;                                      // 0x2028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RandomMutationGivePoints;                                  // 0x202C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                RandomMutationsMale;                                       // 0x2030(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                RandomMutationsFemale;                                     // 0x2034(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                GestationEggRandomMutationsFemale;                         // 0x2038(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                GestationEggRandomMutationsMale;                           // 0x203C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FName                                       WakingTameDistanceSocketName;                              // 0x2040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                WakingTameConsumeEntireStackMaxQuantity;                   // 0x2048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackPlayerDesirabilityMultiplier;                        // 0x204C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PQNM[0x10];                                    // 0x2050(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FlyerAttachedExplosiveSpeedMultiplier;                     // 0x2060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XMPF[0x4];                                     // 0x2064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoExtraDefaultItemList>           DinoExtraDefaultInventoryItems;                            // 0x2068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DeathGiveEngramClasses;                                    // 0x2078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SinglePlayerOutgoingDamageModifier;                        // 0x2088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SinglePlayerIncomingDamageModifier;                        // 0x208C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_676L[0x28];                                    // 0x2090(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                DinoLevelUpAnimationOverride;                              // 0x20B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              DamageVictimClassesIgnoreBlockingGeomtryTrace;             // 0x20C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_0HM9[0x10];                                    // 0x20D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CloneBaseElementCost;                                      // 0x20E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CloneElementCostPerLevel;                                  // 0x20E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LastValidTameVersion;                                      // 0x20E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SavedLastValidTameVersion;                                 // 0x20EC(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       NonDedicatedFreezeDinoPhysicsIfLevelUnloaded;              // 0x20F0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded;         // 0x20F8(0x0010) (ZeroConstructor, Transient, SaveGame)
	struct FVector                                     UnboardLocationTraceOffset;                                // 0x2108(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AttackLineOfSightMeshSocketName;                           // 0x2114(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackForceWalkDistanceMultiplier;                         // 0x211C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackForceWalkRotationRateMultiplier;                     // 0x2120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                OverrideDinoTameSoundIndex;                                // 0x2124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  SwimSound;                                                 // 0x2128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimSoundIntervalPerHundredSpeed;                          // 0x2130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0VVU[0x4];                                     // 0x2134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      TamedAIControllerOverride;                                 // 0x2138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                PersonalTamedDinoCost;                                     // 0x2140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VL52[0x4];                                     // 0x2144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             UploadEarliestValidTime;                                   // 0x2148(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              StasisAutoDestroyInterval;                                 // 0x2150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CarryCameraYawOffset;                                      // 0x2154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraDamageMultiplier;                                     // 0x2158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraTamedBaseHealthMultiplier;                            // 0x215C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              attackRangeOffset;                                         // 0x2160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoExtraIncreasePlayerCollisionActivationDistanceSquared; // 0x2164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QNR8[0x4];                                     // 0x2168(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverrideApproachRadius;                                    // 0x216C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedOverrideStasisComponentRadius;                        // 0x2170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5EV3[0x4];                                     // 0x2174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 UniqueDino_MapMarkerMesh;                                  // 0x2178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      UniqueDino_MapMarkerColor;                                 // 0x2180(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OverrideDinoMaxExperiencePoints;                           // 0x2184(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxDinoTameLevels;                                         // 0x2188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                DestroyTamesOverLevelClampOffset;                          // 0x218C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NursingTroughFoodEffectivenessMultiplier;                  // 0x2190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AG8N[0x4];                                     // 0x2194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ForceAllowFoodAsConsumableList;                            // 0x2198(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                CustomReplicatedData;                                      // 0x21A8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZIS7[0x4];                                     // 0x21AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnNotifySetRider;                                          // 0x21B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyClearRider;                                        // 0x21C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetMountedDino;                                          // 0x21D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClearMountedDino;                                        // 0x21E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyAddPassenger;                                      // 0x21F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyClearPassenger;                                    // 0x2200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	double                                             NextAllowedBedUseTime;                                     // 0x2210(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              UseBedCooldownTime;                                        // 0x2218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseBPGetOtherActorToIgnore : 1;                           // 0x221C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_QSFQ : 1;                                      // 0x221C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      MutagenApplied : 1;                                        // 0x221C(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowWhistleThroughRemoteDino : 1;                        // 0x221C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceValidUnstasisCaster : 1;                             // 0x221C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bControlledDinoPreventsPlayerInventory : 1;                // 0x221C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoFPVDisableMotionBlur : 1;                             // 0x221C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPaintingUseSaddle : 1;                                    // 0x221C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPaintingSupportSkins : 1;                                 // 0x221D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDinoDontOverrideControllerPitch : 1;                      // 0x221D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverridePassengerAdditiveAnim : 1;                   // 0x221D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReplicatePassengerTPVAim : 1;                             // 0x221D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceDisableClientGravitySim : 1;                         // 0x221D(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_HLW3[0x2];                                     // 0x221E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CarriedAsBabyPassengerSizeLimitOverride;                   // 0x2220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MutagenBaseCost;                                           // 0x2224(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                PaintTextureResolution;                                    // 0x2228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6OJU[0x4];                                     // 0x222C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnFlyerStartLanding;                                       // 0x2230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlyerLanded;                                             // 0x2240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlyerLandingInterrupted;                                 // 0x2250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bOnlyDrawFloatingHUDAsLocalPlayerController;               // 0x2260(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHasPlayerController;                                      // 0x2261(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EQRE[0x6];                                     // 0x2262(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        CopyDinoSettingsRangeMesh;                                 // 0x2268(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoCharacter");
		return ptr;
	}



	void UpdateTribeGroupRanks(unsigned char NewTribeGroupPetOrderingRank, unsigned char NewTribeGroupPetRidingRank);
	void UpdateNextAllowedMatingTime(double fromTime);
	void UpdateMateBoost();
	void UpdateImprintingQuality(float NewImprintingQuality);
	void UpdateImprintingDetailsForController(class AShooterPlayerController* ForPC);
	void UpdateImprintingDetails(const struct FString& NewImprinterName, uint64_t NewImprinterPlayerDataID);
	bool UpdateHasBuffPreventingUploading();
	void UpdateBabyCuddling(double NewBabyNextCuddleTime, unsigned char NewBabyCuddleType, class UClass* NewBabyCuddleFood);
	void UpdateAttackTargets();
	void UntameDino(float TamingAffinityLimit);
	void UnclaimDino(bool bDestroyAI);
	bool TamedProcessOrder(class APrimalCharacter* FromCharacter, TEnumAsByte<ShooterGame_EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget);
	void TameDino(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit, int OverrideTamingTeamID, bool bPreventNameDialog, bool bSkipAddingTamedLevels, bool bSuppressNotifications);
	void StopActiveState(bool bShouldResetAttackIndex);
	void StartSurfaceCameraForPassengers(float Yaw, float Pitch, float Roll);
	void StartSurfaceCameraForPassenger(class AShooterCharacter* Passenger, float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
	void StartLanding(const struct FVector& OverrideLandingLocation);
	void SpawnNewAIController(class UClass* NewAIController, class UBehaviorTree* MissionBehaviorTreeOverride);
	class APrimalDinoCharacter* STATIC_SpawnFromDinoDataEx(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, bool* dupedDino, int ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController);
	class APrimalDinoCharacter* STATIC_SpawnFromDinoData(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, int ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController);
	void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
	class APrimalDinoCharacter* STATIC_SpawnDino(class UWorld* World, class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, float LevelMultiplier, int ExtraLevelOffset, bool AddLevelOffsetBeforeMultiplier, bool bOverrideBaseNPCLevel, int BaseLevelOverrideValue, bool bNPCDontWander, float NPCAIRangeMultiplier, int NPCAbsoluteBaseLevel, bool bSpawnWithoutCapsuleOffset);
	bool ShouldForceFlee();
	bool ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar);
	bool ShouldDealDamage(class AActor* TestActor);
	bool ShouldAttackOfPlayedAnimationStopMovement();
	void SetTurretModeMovementRestrictions(bool Enabled, bool bAlsoSetTurretMode);
	bool SetTurretMode(bool Enabled);
	void SetState(class UPrimalAIState* State);
	void SetStasisComponentRadius(float StasisOverrideRadius);
	void SetRider(class AShooterCharacter* aRider);
	void SetPreventSaving(bool fPreventSaving);
	void SetNextAllowedMatingTime(double NextAllowedMatingTime);
	void SetMovementAccelerationVector(const struct FVector& fVector);
	void SetLeftDynamicActorBaseTime(double NewLeftDynamicActorBaseTime);
	void SetLastMovementDesiredRotation(const struct FRotator& InRotation);
	void SetLastAttackTimeForAttack(int AttackIndex, double NewTime);
	void SetImprintPlayer(class AShooterCharacter* forChar);
	void SetForceDisableClientGravitySim(bool bForceDisable);
	void SetFlight(bool bFly, bool bCancelForceLand);
	void SetCurrentAttackIndex(unsigned char index);
	void SetColorizationData(TArray<unsigned char> ColorData);
	void SetCharacterStatusTameable(bool bSetTameable, bool bCreateInventory, bool bInventoryForWakingTame);
	void SetBabyAge(float TheAge);
	void SetAnimWeightsForAttackAtIndex(int AttackIndex, TArray<float> newWeights);
	void SetAllowedPaintingColorRegion(int RegionIndex, bool bIsAllowed);
	void ServerUpdateAttackTargets(class AActor* attackTarget, const struct FVector& AttackLocation);
	void ServerToggleCharging();
	void ServerToClientsPlayAttackAnimation(int8_t AttackinfoIndex, int8_t animationIndex, float InPlayRate, const struct FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, class AActor* MyTarget);
	void ServerTamedTick();
	void ServerSleepingTick();
	void ServerSetRiderMountedWeaponRotation(const struct FRotator& InVal);
	void ServerRequestWaterSurfaceJump();
	void ServerRequestToggleFlight();
	void ServerRequestBraking(bool bWantsToBrake);
	void ServerRequestAttack(int AttackIndex);
	void ServerInterruptLanding();
	void ServerFinishedLanding();
	void ServerClearRider(int OverrideUnboardDirection);
	void RidingTick(float DeltaSeconds);
	void ResetBrainComponent();
	void RemovePassenger(class APrimalCharacter* ACharacter, bool bFromCharacter, bool bFromPlayerController);
	void RemoveFromMeleeSwingHurtList(class AActor* anActor);
	void RemoveDinoReferenceFromLatchingStructure();
	void RefreshColorization(bool bForceRefresh);
	void RefreshBabyScaling();
	void ReassertColorization();
	void ProcessOrderMoveTo(const struct FVector& MoveToLoc, bool bClearFollowTargets);
	void ProcessOrderFollowTarget(class AActor* TheTarget, bool bClearFollowTargets);
	void ProcessOrderAttackTarget(class AActor* TheTarget, bool bClearFollowTargets);
	void PlayWeightedAttackAnimation();
	void PlayHardEndChargingShake();
	bool PlayedAnimationHasAttack();
	void OverrideRandomWanderLocation(const struct FVector& originalDestination, struct FVector* inVec);
	bool OverrideFinalWanderLocation(struct FVector* outVec);
	void OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
	void OnVoiceTalkingStateChanged(bool isTalking, bool bIsMuted);
	void OnUpdateMountedDinoMeshHiding(bool bshouldBeVisible);
	void OnUncryo(class AShooterPlayerController* ForPC);
	void OnSpawnedForItem(class UPrimalItem* ForItem);
	void OnSetMountedDino__DelegateSignature(class APrimalDinoCharacter* MountDino, class APrimalCharacter* forCharacter);
	void OnRep_Saddle();
	void OnRep_Rider();
	void OnRep_PassengerPerSeat();
	void OnRep_CarriedCharacter();
	void OnRep_bIsFlying();
	void OnRep_bIsCharging();
	void OnRep_bBonesHidden();
	void OnCryo(class AShooterPlayerController* ForPC);
	void OnClearMountedDino__DelegateSignature(class APrimalDinoCharacter* UnmountedDino, class APrimalCharacter* forCharacter);
	void NotifySetRider__DelegateSignature(class AShooterCharacter* RiderSetting, class APrimalDinoCharacter* ForDino);
	void NotifyFlyerLanded__DelegateSignature(class APrimalDinoCharacter* ForDino);
	void NotifyClearRider__DelegateSignature(class AShooterCharacter* RiderClearing, class APrimalDinoCharacter* ForDino);
	void NotifyClearPassenger__DelegateSignature(class APrimalCharacter* Passenger, class APrimalDinoCharacter* ForDino, int SeatIndex);
	void NotifyAddPassenger__DelegateSignature(class APrimalCharacter* Passenger, class APrimalDinoCharacter* ForDino, int SeatIndex);
	void NetUpdateDinoOwnerData(const struct FString& NewOwningPlayerName, int NewOwningPlayerID);
	void NetUpdateDinoNameStrings(const struct FString& NewTamerString, const struct FString& NewTamedName);
	void MulticastUpdateAllColorSets(int Color0, int Color1, int Color2, int Color3, int Color4, int Color5);
	void Multi_OnCryo(class AShooterPlayerController* ForPC);
	void LowerDinoBP(float val);
	void KeepFlightTimer();
	bool IsWakingTame();
	bool IsVoiceTalking();
	bool IsPassengerSeatAvailable(int PassengerSeatIndex);
	bool IsMissionDino();
	bool IsInTekShield();
	bool IsImprintPlayer(class AShooterCharacter* forChar);
	bool IsFleeing();
	bool IsCurrentlyPlayingAttackAnimation();
	bool IsCurrentAttackStopsMovement();
	bool IsAttacking();
	bool IsAllowedToTransfer(class UObject* WorldContextObject);
	bool IsActiveEventDino();
	void InterruptLatching();
	void InterruptLanding();
	bool InterceptRiderEmoteAnim(class UAnimMontage* EmoteAnim);
	bool InterceptMountedOnPlayerEmoteAnim(class UAnimMontage* EmoteAnim);
	void ImprintOnPlayerTarget(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit);
	bool HasTarget();
	bool HasSelfBuried();
	bool HasBuffPreventingFlight();
	bool HasBuffPreventingClearRiderOnDinoImmobilized();
	void HandleMountedDinoAction(class AShooterPlayerController* PC);
	class UPrimalItem* GiveSaddleFromString(const struct FString& blueprintPath, float Quality, float MinRandomQuality, bool bAutoEquip);
	class UPrimalItem* GiveSaddle(class UClass* SaddleType, float Quality, float MinRandomQuality, bool bAutoEquip);
	void GiveDeathDossier();
	unsigned char GetWiegthedAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget);
	int GetUntamedTargetingTeam();
	class AActor* GetTamedLandTarget();
	class AActor* GetTamedFollowTarget();
	class UPrimalAIState* GetStateOfPlayedAnimationAttack();
	struct FVector GetSocketLocationTemp(const struct FName& SocketName);
	struct FName GetSocketForMeleeTraceForHitBlockers(int AttackIndex);
	int GetSeatIndexForPassenger(class APrimalCharacter* PassengerChar);
	void GetSaddleMeshComponents(TArray<class UMeshComponent*>* OutMeshes);
	class USkeletalMeshComponent* GetSaddleMeshComponent();
	float GetRootYawSpeed(float DeltaTime);
	struct FRotator GetPlayerSpawnRotation();
	struct FVector GetPlayerSpawnLocation();
	int GetPassengersSeatIndex(class APrimalCharacter* Passenger);
	void GetPassengersAndSeatIndexes(TArray<class APrimalCharacter*>* Passengers, TArray<int>* Indexes);
	TArray<class APrimalCharacter*> GetPassengers();
	class APrimalCharacter* GetPassengerPerSeat(int SeatIndex);
	int GetNumPassengerSeats(bool bOnlyManualPassengerSeats);
	int GetNumAvailablePassengerSeats(bool bOnlyManualPassengerSeats);
	double GetLastStartedTalkingTime();
	struct FVector GetLandingLocation();
	float GetGestationTimeRemaining();
	bool GetForceTickPose();
	int GetFoodItemEffectivenessMultipliersIndex(class UPrimalItem* foodItem);
	class UClass* GetFirstAffinityFoodItemClass();
	struct FVector GetDinoVelocity();
	class USoundBase* GetDinoTameSound();
	TArray<class AActor*> GetDinoPlatformCollisionIgnoreActors();
	class UAnimMontage* GetDinoLevelUpAnimation();
	void GetDinoIDsAsStrings(struct FString* OutDinoID1, struct FString* OutDinoID2);
	void GetDinoIDs(int* OutDinoID1, int* OutDinoID2);
	class UTexture* GetDinoEntryIcon();
	struct FString GetDinoDescriptiveName(bool IgnoreArticle, bool IncludeDetails);
	double GetDinoDeathTime();
	void GetDinoData(struct FARKDinoData* OutDinoData);
	struct FLinearColor GetDinoColor(int ColorRegionIndex);
	struct FString GetCurrentDinoName(class APlayerController* ForPC);
	bool GetCurrentAttackInfo(int* AttackIndex, struct FDinoAttackInfo* AttackInfo);
	struct FRotator GetCurrentAimOffsetsRotation();
	TArray<struct FName> GetColorSetNamesAsArray();
	struct FString GetColorSetInidcesAsString();
	TArray<unsigned char> GetColorizationData();
	struct FLinearColor GetColorForColorizationRegion(int Region, int ColorIndexOverride);
	class UClass* GetBedFilterClass();
	float GetBabyCuddleInterval();
	bool GetAllowedPaintingColorRegion(int RegionIndex);
	TArray<class APrimalStructureExplosive*> GetAllAttachedExplosives(bool bInlcudeAttachedChars);
	struct FRotator GetAimOffsetsTransform(float DeltaTime, struct UObject_FTransform* RootRotOffsetTransform, float* TheRootYawSpeed, float MaxYawAimClamp, struct FVector* RootLocOffset);
	float GetAIFollowStoppingDistanceOffset();
	float GetAIFollowStoppingDistanceMultiplier();
	float GetAffinityIncreaseForFoodItem(class UPrimalItem* foodItem);
	struct FVector GetActorCenterTraceLocation();
	class UPrimalAIState* GetActiveState();
	void ForceUpdateColorSets(int ColorRegion, int ColorSet);
	void ForceSetTamedAggressionLevel(int AggressionLevel);
	void ForceClearRider();
	void FireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage);
	void FireMultipleProjectilesEx(class UClass* ProjectileClass, TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bAddPawnVelocityToProjectile, bool bScaleProjDamageByDinoDamage, class USceneComponent* HomingTarget, const struct FVector& HomingTargetOffset, float OverrideInitialSpeed);
	void FireMultipleProjectiles(TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bScaleProjectileDamageByDinoDamage);
	void FedWakingTameDino();
	void EndCharging(bool bForce);
	void ElevateDinoBP(float val);
	float DoOverrideMountedAirControl(float AirControlIn);
	void DoNeuter();
	void DoDeathHarvestingFadeOut();
	bool DoAttack(int AttackIndex, bool bSetCurrentAttack, bool bInterruptCurrentAttack);
	void DinoShoulderMountedLaunch(const struct FVector& launchDir, class AShooterCharacter* throwingCharacter);
	void DinoFireProjectileEx(class UClass* ProjectileClass, const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage, bool bAddDinoVelocityToProjectile, float OverrideInitialSpeed, float OverrideMaxSpeed, float ExtraDirectDamageMultiplier, float ExtraExplosionDamageMultiplier, bool spawnOnOwningClient);
	bool Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void DestroyController();
	void CycleAttackWeightsForAttackAtIndex(int AttackIndex);
	class ADroppedItem* CreateCloneFertilizedEgg(const struct FVector& AtLoc, const struct FRotator& AtRot, class UClass* DroppedItemTemplateOverride, int NumMutationsToAdd);
	void CopySettingsToOtherDino(class APlayerController* ForPC, class APrimalDinoCharacter* FromDino, class APrimalDinoCharacter* OtherDino, int SettingTypeUseIndex);
	void CopyPaintingComponentFrom(class APrimalDinoCharacter* Other);
	void ClientStartLanding(const struct FVector& landingLoc);
	void ClientShouldNotifyLanded();
	void ClientInterruptLanding();
	void ClearTamedLandTarget();
	void ClearRider(bool bFromRider, bool bCancelForceLand, bool SpawnDinoDefaultController, int OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
	void ClearPassengers();
	void ClearMountCharacter(bool bFromMountCharacter);
	void ClearCharacterAIMovement();
	void ClearCarriedCharacter(bool fromCarriedCharacter, bool bCancelAnyCarryBuffs);
	void CheckForTamedFoodConsumption(int Steps);
	bool CarryCharacter(class APrimalCharacter* aRider, bool byPassCanCarryCheck);
	bool CanTakePassenger(class APrimalCharacter* ACharacter, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace);
	bool CanOrder(class APrimalCharacter* FromCharacter, bool bBuildingStructures);
	bool CanNurseDino(class APrimalDinoCharacter* OtherDino);
	bool CanMount(class APrimalCharacter* ACharacter);
	bool CanFly();
	bool CanDinoAttackTargetsWithoutRider();
	bool CanCryo(class AShooterPlayerController* ForPC);
	bool CanClearRider();
	bool CancelCurrentAttack(bool bStopCurrentAttackAnim, float AttackAnimBlendOutTime);
	bool CanCarryCharacter(class APrimalCharacter* CanCarryPawn);
	bool CanAttack(int AttackIndex);
	void BSetupDinoTameable();
	void BrakeDinoBP(float val);
	void BPUntamedConsumeFoodItem(class UPrimalItem* foodItem);
	float BPUnstasisConsumeFood(float FoodNeeded);
	void BPUnstasis();
	void BPUnsetupDinoTameable();
	void BPTamedConsumeFoodItem(class UPrimalItem* foodItem);
	class APrimalDinoCharacter* STATIC_BPStaticCreateBabyDinoNoAncestors(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, int NotifyTeamOverride, int EggRandomMutationsFemale, int EggRandomMutationsMale);
	class APrimalDinoCharacter* STATIC_BPStaticCreateBabyDino(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, TArray<struct FDinoAncestorsEntry> EggDinoAncestors, TArray<struct FDinoAncestorsEntry> EggDinoAncestorsMale, int NotifyTeamOverride, int EggRandomMutationsFemale, int EggRandomMutationsMale, int EggGenderOverride);
	bool BPShowTamingPanel(bool currentVisibility);
	bool BPShouldForceFlee();
	bool BPShouldCancelDoAttack(int AttackIndex);
	void BPSetupTamed(bool bWasJustTamed);
	float BPSetSimulatedInterpRollOverride();
	void BPSetForcedAggro(class AActor* TargetableActor, float AggroAmount, float ForcedAggroTime);
	void BPSentKilledNotification(class AShooterPlayerController* ToPC);
	void BPResetClone();
	bool BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime);
	bool BPPreventRiding(class AShooterCharacter* ByPawn, bool bDontCheckDistance);
	bool BPPreventOrderAllowed(class APrimalCharacter* FromCharacter, TEnumAsByte<ShooterGame_EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
	struct FString BPOverrideTamingDescriptionLabel(struct FSlateColor* TextColor);
	TEnumAsByte<ShooterGame_EStencilAlliance> BPOverrideStencilAllianceForTarget(class APrimalCharacter* TargetDino, class UPrimitiveComponent* Component);
	class UAnimSequence* BPOverridePassengerAdditiveAnim(class APrimalCharacter* ForPassenger);
	struct FString BPOverrideMutationLabels(bool male);
	bool BPOverrideMoveToOrder(const struct FVector& MoveToLocation, class AShooterCharacter* OrderingPlayer);
	float BPOverrideHealthBarOffset(class APlayerController* ForPC);
	int BPOverrideGetAttackAnimationIndex(int AttackIndex, TArray<class UAnimMontage*> AnimationArray);
	struct FVector BPOverrideFloatingHUDLocation();
	void BPOverrideCameraViewTarget(const struct FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV);
	void BPOrderedMoveToLoc(const struct FVector& DestLoc);
	void BPOnTamedProcessOrder(class APrimalCharacter* FromCharacter, TEnumAsByte<ShooterGame_EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
	bool BPOnStopJump();
	bool BPOnStartJump();
	void BPOnSetMountedDino();
	void BPOnSetFlight(bool bFly);
	void BPOnRepIsCharging();
	void BPOnRefreshColorization(TArray<struct FLinearColor> Colors);
	void BPOnEndCharging();
	void BPOnDinoStartled(class UAnimMontage* StartledAnimPlayed, bool bFromAIController);
	void BPOnDinoCheat(const struct FName& CheatName, bool bSetValue, float Value);
	void BPOnClearMountedDino();
	void BPNotifyWildHarvestAttack(int harvestIndex);
	void BPNotifyStructurePlacedNearby(class APrimalStructure* NewStructure);
	void BPNotifySetRider(class AShooterCharacter* RiderSetting);
	void BPNotifyNameEditText(class AShooterPlayerController* ForPC);
	void BPNotifyMateBoostChanged();
	void BPNotifyIfPassengerLaunchShoulderMount(class APrimalCharacter* launchedCharacter);
	void BPNotifyClearRider(class AShooterCharacter* RiderClearing);
	void BPNotifyClearPassenger(class APrimalCharacter* PassengerChar, int SeatIndex);
	void BPNotifyClaimed();
	void BPNotifyCarriedDinoBabyAgeIncrement(class APrimalDinoCharacter* AgingCarriedDino, float PreviousAge, float NewAge);
	void BPNotifyBabyAgeIncrement(float PreviousAge, float NewAge);
	void BPNotifyAddPassenger(class APrimalCharacter* PassengerChar, int SeatIndex);
	void BPModifyHarvestingWeightsArray(TArray<float> resourceWeightsIn, TArray<class UPrimalItem*> resourceItems, TArray<float>* resourceWeightsOut);
	float BPModifyHarvestingQuantity(float originalQuantity, class UClass* resourceSelected);
	float BPModifyHarvestDamage(class UPrimalHarvestingComponent* harvestComponent, float inDamage);
	bool BPModifyDesiredRotation(float DeltaTime, const struct FRotator& InDesiredRotation, struct FRotator* OutDesiredRotation);
	bool BPModifyControlRotation(const struct FRotator& ControlRotation, struct FRotator* outControlRotation);
	struct FVector BPModifyAimOffsetTargetLocation(const struct FVector& AimTargetLocation);
	struct FRotator BPModifyAimOffsetNoTarget(const struct FRotator& Aim);
	void BPKilledSomethingEvent(class APrimalCharacter* killedTarget);
	bool BPIsValidUnStasisCaster();
	bool BPIsTamed();
	bool BPIsHidden();
	bool BPIsBasedOnActor(class AActor* Other);
	bool BPHasCurrentAttack();
	bool BPHandleUseButtonPress(class AShooterPlayerController* RiderController);
	bool BPHandleOnStopTargeting();
	bool BPHandleOnStopFire();
	bool BPHandleControllerInitiatedAttack(int AttackIndex);
	float BPGetTargetingDesirability(class AActor* Attacker);
	struct FVector BPGetRiderUnboardLocation(class APrimalCharacter* RidingCharacter);
	struct FVector BPGetRiderUnboardDirection(class APrimalCharacter* RidingCharacter);
	struct FName BPGetRiderSocket();
	struct FVector BPGetPassengerDinoAdditionalOffset(class APrimalDinoCharacter* Passenger);
	class AActor* BPGetOtherActorToIgnore();
	struct FName BPGetLookOffsetSocketName(class APrimalCharacter* ForPrimalChar);
	struct FVector BPGetHealthBarColor();
	struct FName BPGetDragSocketName(class APrimalCharacter* DraggingChar);
	struct FName BPGetDragSocketDinoName(class APrimalDinoCharacter* aGrabbedDino);
	struct FDinoSetup BPGetCustomDinoSetup();
	int BPGetCurrentAttackIndex();
	float BPGetCrosshairSpread();
	void BPGetCrosshairLocation(float CanvasClipX, float CanvasClipY, float* OutX, float* OutY);
	struct FLinearColor BPGetCrosshairColor();
	float BPGetCrosshairAlpha();
	bool BPGetAttackOfPlayedAnimation(struct FDinoAttackInfo* AttackInfo);
	bool BPForceTurretFastTargeting();
	void BPForceReachedDestination();
	void BPFedWakingTameEvent(class APlayerController* ForPC);
	void BPDrawToRiderHUD(class AShooterHUD* HUD);
	void BPDoHarvestAttack(int harvestIndex);
	void BPDoAttack(int AttackIndex);
	bool BPDisplayTamedMessage();
	bool BPDinoTooltipCustomTorpidityProgressBar(bool* overrideTorpidityProgressBarIfActive, float* progressPercent, struct FString* Label);
	bool BPDinoTooltipCustomTamingProgressBar(bool* overrideTamingProgressBarIfActive, float* progressPercent, struct FString* Label);
	void BPDinoPrepareForARKUploading();
	void BPDinoPostBeginPlay();
	void BPDinoARKDownloadedEnd();
	void BPDinoARKDownloadedBegin();
	void BPDidSetCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter);
	void BPDidClearCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter);
	bool BPDesiredRotationIsLocalSpace();
	class AShooterCharacter* BPConsumeInventoryFoodItem(class UPrimalItem* foodItem, bool bConsumeEntireStack);
	float BPClampMaxHarvestHealth();
	bool BPCheckSeven();
	struct FVector BPCheckCanSpawnFromLocation(const struct FVector& CheckLocation);
	struct FVector BPChargingModifyInputAcceleration(const struct FVector& inputAcceleration);
	void BPCarriedDinoBabyRescaled(class APrimalDinoCharacter* AgingCarriedDino, float NewAge);
	bool BPCanTargetCorpse();
	bool BPCanTakePassenger(class APrimalCharacter* Character, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos);
	bool BPCanMountOnCharacter(class APrimalCharacter* Character);
	bool BPCanIgnoreImmobilizationTrap(class UClass* TrapClass, bool bForceTrigger);
	bool BPCanDragCharacter(class APrimalCharacter* Character);
	bool BPCanCryo(class AShooterPlayerController* ForPC);
	bool BPCanAutodrag(class APrimalCharacter* characterToDrag);
	void BPBecomeBaby();
	void BPBecomeAdult();
	void BPBecameNewBaby(class APrimalDinoCharacter* Parent);
	bool BPAllowEquippingItemType(TEnumAsByte<Engine_EPrimalEquipmentType> equipmentType);
	bool BPAllowClaiming(class AShooterPlayerController* ForPlayer);
	bool BPAllowCarryCharacter(class APrimalCharacter* checkCharacter);
	int BPAdjustAttackIndex(int AttackIndex);
	bool BP_ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar);
	bool BP_PreventUnmounting();
	bool BP_PreventCarryingByCharacter(class APrimalCharacter* ByCarrier);
	bool BP_PreventCarrying();
	struct FHitResult BP_OverrideRiderCameraCollisionSweep(const struct FVector& SweepStart, const struct FVector& SweepEnd);
	struct FString BP_OverrideDinoName(const struct FString& CurrentDinoName, class APlayerController* ForPC);
	bool BP_OverrideCarriedCharacterTransform(class APrimalCharacter* ForCarriedChar);
	void BP_OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
	void BP_OnUncryo(class AShooterPlayerController* ForPC);
	void BP_OnTargetedByTamedOrder(class APrimalCharacter* OrderingCharacter, class APrimalDinoCharacter* AttackingDino, bool bForced);
	void BP_OnTamedOrderReceived(class APrimalCharacter* FromCharacter, TEnumAsByte<ShooterGame_EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
	void BP_OnStartLandingNotify();
	void BP_OnStartLandFailed(int ReasonIndex);
	void BP_OnRiderChangeWeapons(class AShooterCharacter* theRider, class UPrimalItem* newWeapon);
	void BP_OnPostNetReplication(const struct FVector& ReplicatedLoc, const struct FRotator& ReplicatedRot);
	void BP_OnLandingInterruptedNotify();
	void BP_OnCryo(class AShooterPlayerController* ForPC);
	void BP_OnBasedPawnRemovedNotify(class AActor* RemovedActor);
	void BP_OnBasedPawnAddedNotify(class AActor* AddedActor);
	bool BP_InterceptTurnInput(float AxisValue);
	bool BP_InterceptMoveRight(float AxisValue);
	bool BP_InterceptMoveForward(float AxisValue);
	float BP_GetCustomModifier_RotationRate();
	float BP_GetCustomModifier_MaxSpeed();
	bool BP_ForceAllowMountedWeapon(class UClass* WeaponTemplate);
	bool BP_CanFly();
	bool BP_AllowWalkableSlopeOverride(class UPrimitiveComponent* ForComponent);
	void BlueprintTamedTick();
	void BlueprintPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	bool BlueprintOverrideWantsToRun(bool bInputWantsToRun);
	class UClass* BlueprintOverrideHarvestDamageType(float* OutHarvestDamageMultiplier);
	float BlueprintGetAttackWeight(int AttackIndex, float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget);
	float BlueprintExtraBabyScaling();
	void BlueprintDrawFloatingHUD(class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
	bool BlueprintCanRiderAttack(int AttackIndex);
	bool BlueprintCanAttack(int AttackIndex, float Distance, float attackRangeOffset, class AActor* OtherTarget);
	float BlueprintAdjustOutputDamage(int AttackIndex, float OriginalDamageAmount, class AActor* HitActor, class UClass** OutDamageType, float* OutDamageImpulse);
	void AssertColorNames();
	bool AreSpawnerSublevelsLoaded();
	void ApplyRidingAttackExtraVelocity();
	void ApplyMutagen();
	void AnimNotifyMountedDino();
	bool AllowWakingTame(class APlayerController* ForPC);
	bool AllowMountedWeaponry(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry);
	bool AllowCarryCharacter(class APrimalCharacter* CanCarryPawn);
	bool AddToMeleeSwingHurtList(class AActor* anActor);
	bool AddPassenger(class APrimalCharacter* ACharacter, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace);
	void AddedImprintingQuality(float amount);
	void AddDinoReferenceInLatchingStructure(class APrimalStructure* Structure);
};

// Class ShooterGame.PrimalBotCharacter
// 0x00B0 (FullSize[0x2320] - InheritedSize[0x2270])
class APrimalBotCharacter : public APrimalDinoCharacter
{
public:
	class USkeletalMesh*                               AlternateSkeletalMesh;                                     // 0x2270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AlternateAnimBP;                                           // 0x2278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               AlternateDinoRidingAnimation;                              // 0x2280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               AlternateDinoRidingMoveAnimation;                          // 0x2288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               HasMeleeWeapon;                                            // 0x2290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MID8[0x7];                                     // 0x2291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              RideableDinoClasses;                                       // 0x2298(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bIsRiding;                                                 // 0x22A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_INED[0x7];                                     // 0x22A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               DefaultDinoRidingAnimation;                                // 0x22B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               DefaultDinoRidingMoveAnimation;                            // 0x22B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               UseAltAimOffsetAnimation;                                  // 0x22C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsStationary;                                             // 0x22C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9CU6[0x2];                                     // 0x22C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalDinoCharacter>         DinoBeingRidden;                                           // 0x22C4(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	bool                                               bIsUsingAlternateMesh;                                     // 0x22CC(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E0RQ[0x53];                                    // 0x22CD(0x0053) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBotCharacter");
		return ptr;
	}



	void OnRep_RidingDino();
	bool IsUsingAlternateSkelMesh();
	float GetMinAttackRange();
	float GetMaxAttackRange();
	class UAnimSequence* GetDinoRidingMoveAnimation();
	class UAnimSequence* GetDinoRidingAnimation();
	class UAnimSequence* GetBotAnimSequenceOverride(class UAnimSequence* AnimSeq);
	class APrimalDinoCharacter* CurrentlyRiddenDino();
	void ClearRidingDino();
	bool CanRideDino(class APrimalDinoCharacter* Dino);
	void AttachToDino(class APrimalDinoCharacter* Dino);
};

// Class ShooterGame.PrimalRaft
// 0x0050 (FullSize[0x22C0] - InheritedSize[0x2270])
class APrimalRaft : public APrimalDinoCharacter
{
public:
	class UTexture2D*                                  Icon;                                                      // 0x2270(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             MovingSoundComponent;                                      // 0x2278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USoundBase*                                  MovingSoundCue;                                            // 0x2280(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      RaftSpawnEffect;                                           // 0x2288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             NetworkCreationTime;                                       // 0x2290(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bRaftAllowCrafting : 1;                                    // 0x2298(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBPOverrideSwimmingVelocity : 1;                           // 0x2298(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBPOverrideSwimmingAcceleration : 1;                       // 0x2298(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisableGravityAdjustement : 1;                            // 0x2298(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseTracedSurfaceAdjustment : 1;                           // 0x2298(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bRaftAllowWalkingState : 1;                                // 0x2298(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowTargetingBasedCharacters : 1;                        // 0x2298(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_LO8F[0x3];                                     // 0x2299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SurfaceAdjustmentZInterpSpeed;                             // 0x229C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_81SG[0x20];                                    // 0x22A0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalRaft");
		return ptr;
	}



	void TempDisableForcedVelcoityDirection();
	struct FVector BPOverrideSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime);
	bool BPAllowMovementSound();
	void BP_OverrideSwimmingAcceleration(struct FVector* ModifyAcceleration, float DeltaTime);
};

// Class ShooterGame.PrimalWheeledVehicleCharacter
// 0x00E0 (FullSize[0x2350] - InheritedSize[0x2270])
class APrimalWheeledVehicleCharacter : public APrimalDinoCharacter
{
public:
	class UWheeledVehicleMovementComponent*            VehicleMovement;                                           // 0x2270(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	float                                              RetainPlayerCameraRotationWhileMovingFor;                  // 0x2278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CameraRotationInterpolationSpeed;                          // 0x227C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimalWheeledVehicleDustType*               DustType;                                                  // 0x2280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    DustPSC[0x4];                                              // 0x2288(0x0020) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             EngineAC;                                                  // 0x22A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             HonkAC;                                                    // 0x22B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             SkidAC;                                                    // 0x22B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USoundCue*                                   SkidSound;                                                 // 0x22C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   HonkSound;                                                 // 0x22C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   SkidSoundStop;                                             // 0x22D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   LandingSound;                                              // 0x22D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   ImpactSound;                                               // 0x22E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SkidFadeoutTime;                                           // 0x22E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SkidThresholdVelocity;                                     // 0x22EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongSlipSkidThreshold;                                     // 0x22F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LateralSlipSkidThreshold;                                  // 0x22F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SkidDurationRequiredForStopSound;                          // 0x22F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P28K[0xC];                                     // 0x22FC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpringCompressionLandingThreshold;                         // 0x2308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O14P[0x4];                                     // 0x230C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystem*                             DeathFX;                                                   // 0x2310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UpForce;                                                   // 0x2318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BackForce;                                                 // 0x231C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFollowCamera;                                             // 0x2320(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GEG4[0x3];                                     // 0x2321(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinimumDamageSpeed;                                        // 0x2324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UG42[0x10];                                    // 0x2328(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     CenterTraceLocationOffset;                                 // 0x2338(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JRFZ[0xC];                                     // 0x2344(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWheeledVehicleCharacter");
		return ptr;
	}



	void StopHonk();
	void StartHonk();
	void ServerHonk(bool bEnable);
	void NetHonk(bool bEnable);
	class UWheeledVehicleMovementComponent* GetVehicleMovementComponent();
};

// Class ShooterGame.VRMainBoss_Character
// 0x0010 (FullSize[0x2280] - InheritedSize[0x2270])
class AVRMainBoss_Character : public APrimalDinoCharacter
{
public:
	class AMissionType*                                CurrentMission;                                            // 0x2270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DFND[0x8];                                     // 0x2278(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.VRMainBoss_Character");
		return ptr;
	}



};

// Class ShooterGame.ShooterCharacter
// 0x0BA0 (FullSize[0x1D00] - InheritedSize[0x1160])
class AShooterCharacter : public APrimalCharacter
{
public:
	unsigned char                                      UnknownData_IFZA[0x8];                                     // 0x1160(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystemComponent*                    ListenServerBoundsPSC;                                     // 0x1168(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                SpawnIntroAnim1P;                                          // 0x1170(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                RespawnIntroAnim1P;                                        // 0x1178(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ProneInAnim;                                               // 0x1180(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ProneOutAnim;                                              // 0x1188(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                StartRidingAnim;                                           // 0x1190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                StopRidingAnim;                                            // 0x1198(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                TalkingAnim;                                               // 0x11A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                VoiceTalkingAnim;                                          // 0x11A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UAnimMontage*>                        EmoteAnims;                                                // 0x11B0(0x0010) (Edit, ZeroConstructor)
	class UAnimMontage*                                FireBallistaAnimation;                                     // 0x11C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ReloadBallistaAnimation;                                   // 0x11C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                DraggingCharacterAnim;                                     // 0x11D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UW6F[0x8];                                     // 0x11D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bWasProne;                                                 // 0x11E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsPreviewCharacter;                                       // 0x11E1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TG6Q[0x12];                                    // 0x11E2(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WalkBobMagnitude;                                          // 0x11F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WalkBobInterpSpeed;                                        // 0x11F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TargetingTime;                                             // 0x11FC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              BobMaxMovementSpeed;                                       // 0x1200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeaponBobMaxMovementSpeed;                                 // 0x1204(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsTargeting : 1;                                          // 0x1208(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bIsCrafting : 1;                                           // 0x1208(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bIsRiding : 1;                                             // 0x1208(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bIsIndoors : 1;                                            // 0x1208(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bIsClimbing : 1;                                           // 0x1208(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bIsViewingInventory : 1;                                   // 0x1208(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bUseAlternateFallBlendspace : 1;                           // 0x1208(0x0001) BIT_FIELD (Edit, Net, Transient, NoDestructor)
	unsigned char                                      bIsFemale : 1;                                             // 0x1208(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPlaySpawnAnim : 1;                                        // 0x1209(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bPlayFirstSpawnAnim : 1;                                   // 0x1209(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bNoPhysics : 1;                                            // 0x1209(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_W3DK : 5;                                      // 0x1209(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bGaveInitialItems : 1;                                     // 0x120A(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, SaveGame, NoDestructor)
	unsigned char                                      bReceivedGenesisSeasonPassItems : 1;                       // 0x120A(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      UnknownData_P40G[0x275];                                   // 0x120B(0x0275) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultWeapon;                                             // 0x1480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OverrideDefaultWeapon;                                     // 0x1488(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	class UClass*                                      MapWeapon;                                                 // 0x1490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      GPSWeapon;                                                 // 0x1498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CompassWeapon;                                             // 0x14A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TTUU[0x8];                                     // 0x14A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerName;                                                // 0x14B0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame)
	TWeakObjectPtr<class APrimalDinoCharacter>         RidingDino;                                                // 0x14C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      Mesh1P;                                                    // 0x14C8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               LowerBodyPartRootBones;                                    // 0x14D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UPhysicsAsset*                               FPVCameraAnimationPhysicsAsset;                            // 0x14E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                DropItemAnimation;                                         // 0x14E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ThrowItemAnimation;                                        // 0x14F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                PickupItemAnimation;                                       // 0x14F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ActivateInventoryAnimation;                                // 0x1500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      SurvivorProfilePreviewMesh;                                // 0x1508(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	struct FRotator                                    LastDinoAimRotationOffset;                                 // 0x1510(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8WEY[0xC];                                     // 0x151C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalProjectileBoomerang*                  LastFiredBoomerang;                                        // 0x1528(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class APrimalProjectileGrapplingHook*              LastFiredGrapHook;                                         // 0x1530(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UPrimalCableComponent*                       GrapplingHookCable;                                        // 0x1538(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             LastGrapHookAC;                                            // 0x1540(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	int                                                _GrapHookCableObjectCount;                                 // 0x1548(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     GrapHookDefaultOffset;                                     // 0x154C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrapHookCableWidth;                                        // 0x1558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XONP[0x4];                                     // 0x155C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          GrapHookMaterial;                                          // 0x1560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LadderLateralJumpVelocity;                                 // 0x1568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrapHookPulledRopeDistance;                                // 0x156C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GrapHookSyncTime;                                          // 0x1570(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bReleasingGrapHook;                                        // 0x1574(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_27R8[0x3];                                     // 0x1575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlatformProfileName;                                       // 0x1578(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	struct FUniqueNetIdRepl                            PlatformProfileID;                                         // 0x1588(0x0010) (Net, Transient, SaveGame)
	TArray<struct FPlayerStatusStateCharacterSound>    CharacterStatusStateSounds;                                // 0x1598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	class UAudioComponent*                             CharacterStatusStateSoundComponent;                        // 0x15A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_PMT8[0x38];                                    // 0x15B0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultTPVAnimBlueprint;                                   // 0x15E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       WeaponAttachPoint;                                         // 0x15F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              TargetingSpeedModifier;                                    // 0x15F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_MC1Y[0x4];                                     // 0x15FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   LowHealthSound;                                            // 0x1600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallFollowAnim;                                            // 0x1608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallStayAnim;                                              // 0x1610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallFollowAnimSingle;                                      // 0x1618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallStayAnimSingle;                                        // 0x1620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallMoveToAnim;                                            // 0x1628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAnimMontage*                                CallAttackAnim;                                            // 0x1630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UAudioComponent*                             LowHealthWarningPlayer;                                    // 0x1638(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_0Z86[0x20];                                    // 0x1640(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CraftingMovementSpeedModifier;                             // 0x1660(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobMagnitudes;                                       // 0x1664(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobPeriods;                                          // 0x1670(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobOffsets;                                          // 0x167C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobMagnitudes_Targeting;                             // 0x1688(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobPeriods_Targeting;                                // 0x1694(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     WeaponBobOffsets_Targeting;                                // 0x16A0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WeaponBobMinimumSpeed;                                     // 0x16AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WeaponBobSpeedBase;                                        // 0x16B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WeaponBobSpeedBaseFalling;                                 // 0x16B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2IBT[0x8];                                     // 0x16B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemAttachmentInfo>                 DefaultAttachmentInfos;                                    // 0x16C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	class USoundCue*                                   StartCrouchSound;                                          // 0x16D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EndCrouchSound;                                            // 0x16D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   StartProneSound;                                           // 0x16E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EndProneSound;                                             // 0x16E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NextInventoryWeapon;                                       // 0x16F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FItemNetID                                  PreMapWeaponItemNetID;                                     // 0x16F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              ServerSeatedViewRotationYaw;                               // 0x1700(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ServerSeatedViewRotationPitch;                             // 0x1704(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AShooterWeapon*                              CurrentWeapon;                                             // 0x1708(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      bDrawHealthBar : 1;                                        // 0x1710(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ETXY[0x3];                                     // 0x1711(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HealthBarOffsetY;                                          // 0x1714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bBPOverrideHealthBarOffset : 1;                            // 0x1718(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCustomHealthBarColor : 1;                              // 0x1718(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_UFB8[0x7];                                     // 0x1719(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint64_t                                           LinkedPlayerDataID;                                        // 0x1720(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RHSF[0x20];                                    // 0x1728(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AShooterPlayerController>     LastValidPlayerController;                                 // 0x1748(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                DrinkingAnimation;                                         // 0x1750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2QYY[0x28];                                    // 0x1758(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IndoorsHyperthermiaInsulation;                             // 0x1780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IndoorsHypothermiaInsulation;                              // 0x1784(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IndoorCheckInterval;                                       // 0x1788(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LF4C[0xC];                                     // 0x178C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FItemNetID                                  PreRidingWeaponItemNetID;                                  // 0x1798(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FItemNetID                                  PreInventoryWeaponItemNetID;                               // 0x17A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FOverrideAnimBlueprintEntry>         OverrideAnimBlueprints;                                    // 0x17A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAnimSequence*                               ViewingInventoryAnimation;                                 // 0x17B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               DefaultDinoRidingAnimation;                                // 0x17C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               DefaultDinoRidingMoveAnimation;                            // 0x17C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               DefaultSeatingAnimation;                                   // 0x17D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               DefaultShieldAnimation;                                    // 0x17D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ShieldCoverAnimation;                                      // 0x17E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ShieldCoverAnimationForCrouch;                             // 0x17E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableLookYaw : 1;                                       // 0x17F0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPlayingShieldCoverAnimation : 1;                          // 0x17F0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPlayingShieldCoverAnimationForCrouch : 1;                 // 0x17F0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bTriggerBPUnstasis : 1;                                    // 0x17F0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_L13R : 4;                                      // 0x17F0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHatHidden : 1;                                            // 0x17F1(0x0001) BIT_FIELD (Net, Transient, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_163I : 1;                                      // 0x17F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowDPC : 1;                                             // 0x17F1(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_XH5O : 1;                                      // 0x17F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsConnected : 1;                                          // 0x17F1(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_N4LJ : 2;                                      // 0x17F1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bLockedToSeatingStructure : 1;                             // 0x17F1(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bPreventAllWeapons : 1;                                    // 0x17F2(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bForceBuffAimOverride : 1;                                 // 0x17F2(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_J2NJ[0x1];                                     // 0x17F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EnemyPlayerMaxCursorHUDDistanceProne;                      // 0x17F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EnemyPlayerMaxCursorHUDDistanceCrouched;                   // 0x17F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EnemyPlayerMaxCursorHUDDistanceStanding;                   // 0x17FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LURE[0x8];                                     // 0x1800(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSaddlePassengerSeatDefinition              CurrentPassengerSeatDefinition;                            // 0x1808(0x00A8) (BlueprintVisible, BlueprintReadOnly, Transient)
	TArray<class UAnimMontage*>                        AnimsOverrideFrom;                                         // 0x18B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimMontage*>                        AnimOverrideTo;                                            // 0x18C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequence*>                       AnimSequencesOverrideFrom;                                 // 0x18D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequence*>                       AnimSequenceOverrideTo;                                    // 0x18E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_UW6J[0x4];                                     // 0x18F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                BodyColors[0x4];                                           // 0x18F4(0x0040) (Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      FacialHairIndex;                                           // 0x1934(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      HeadHairIndex;                                             // 0x1935(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BJVX[0x2];                                     // 0x1936(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RawBoneModifiers[0x16];                                    // 0x1938(0x0058) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_O9IM[0x10];                                    // 0x1990(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LoggedOutTargetingDesirability;                            // 0x19A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsRainWatered;                                            // 0x19A4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZG7X[0xF];                                     // 0x19A5(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UniqueNetIdTypeHash;                                       // 0x19B4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint32_t                                           SplitscreenMainPlayerUniqueNetIdTypeHash;                  // 0x19B8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L2KJ[0x14];                                    // 0x19BC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                SpawnAnim;                                                 // 0x19D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                FirstSpawnAnim;                                            // 0x19D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ME28[0x18];                                    // 0x19E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             SavedLastTimeHadController;                                // 0x19F8(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastTimeHadController;                                     // 0x1A00(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastTaggedTime;                                            // 0x1A08(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastTaggedTimeExtra;                                       // 0x1A10(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastTaggedTimeThird;                                       // 0x1A18(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExtraFloatVar;                                             // 0x1A20(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ExtraVectorVar;                                            // 0x1A24(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ExtraExtraVectorVar;                                       // 0x1A30(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ExtraNameVar;                                              // 0x1A3C(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsOnSeatingStructure;                                     // 0x1A44(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsControllingBallista;                                    // 0x1A45(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBallistaAimOffset;                                     // 0x1A46(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FOPT[0x1];                                     // 0x1A47(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CurrentControlledBallistaYaw;                              // 0x1A48(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsServerAdmin;                                            // 0x1A4C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1U00[0x3];                                     // 0x1A4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalStructureSeating>      SeatingStructure;                                          // 0x1A50(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                SeatingStructureSeatNumber;                                // 0x1A58(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KZ7E[0x1C];                                    // 0x1A5C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  ThrowCharacterSound;                                       // 0x1A78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AUHO[0x10];                                    // 0x1A80(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      PlayerBadgeGroup;                                          // 0x1A90(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bShouldInvertTurnInput;                                    // 0x1A91(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WIAN[0x36];                                    // 0x1A92(0x0036) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InventoryDragWeightScale;                                  // 0x1AC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V9UC[0x4];                                     // 0x1ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                MountedCarryingDinoAnimation;                              // 0x1AD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                CuddleAnimation;                                           // 0x1AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4Z8S[0x40];                                    // 0x1AE0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               CharacterAdditiveStandingAnim;                             // 0x1B20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KH2Q[0x10];                                    // 0x1B28(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      HeadHairComponent;                                         // 0x1B38(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      FacialHairComponent;                                       // 0x1B40(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                               DefaultHeadHairMesh;                                       // 0x1B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                               DefaultFacialHairMesh;                                     // 0x1B50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IntervalForFullHeadHairGrowth;                             // 0x1B58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IntervalForFullFacialHairGrowth;                           // 0x1B5C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PercentOfFullFacialHairGrowth;                             // 0x1B60(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              PercentOfFullHeadHairGrowth;                               // 0x1B64(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FLinearColor                                OriginalHairColor;                                         // 0x1B68(0x0010) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FShooterCharacterPostUpdateTickFunction     PostUpdateTick;                                            // 0x1B78(0x0050)
	unsigned char                                      UnknownData_48EW[0xC];                                     // 0x1BC8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReplicatedWeight;                                          // 0x1BD4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    LocalCorpseEmitter;                                        // 0x1BD8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	double                                             LocalDiedAtTime;                                           // 0x1BE0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3B53[0x8];                                     // 0x1BE8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  ProneMoveSound;                                            // 0x1BF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             UploadEarliestValidTime;                                   // 0x1BF8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IRB9[0x10];                                    // 0x1C00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleSystemComponent*                    JunctionLinkCableParticle;                                 // 0x1C10(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J2X1[0x18];                                    // 0x1C18(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bPreventWeaponMovementAnims;                               // 0x1C30(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V6WD[0x3];                                     // 0x1C31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalStructure>             CurrentItemBalloon;                                        // 0x1C34(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DOMF[0x4];                                     // 0x1C3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    NotifyWeaponUnequipped;                                    // 0x1C40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyWeaponEquipped;                                      // 0x1C50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyWeaponFired;                                         // 0x1C60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NotifyOnWeaponEquip;                                       // 0x1C70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                PlayerHexagonCount;                                        // 0x1C80(0x0004) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                DefaultHexagonAmountEarnedOnMissionCompletion;             // 0x1C84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4MYB[0x14];                                    // 0x1C88(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MeshHeightAdjustment;                                      // 0x1C9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BuffExtraDamageMultiplier;                                 // 0x1CA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bNormalizeHeadPosition;                                    // 0x1CA4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WIQD[0x3];                                     // 0x1CA5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnFirstPersonCameraView;                                   // 0x1CA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnThirdPersonCameraView;                                   // 0x1CB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	uint32_t                                           ExpectedBaseID;                                            // 0x1CC8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7QKB[0x4];                                     // 0x1CCC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastExpectedBaseTime;                                      // 0x1CD0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPreventShowHUDOnSpawnIntroCompletion;                     // 0x1CD8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QVUV[0x3];                                     // 0x1CD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bHideFloatingHUD : 1;                                      // 0x1CDC(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bForceDrawHUD : 1;                                         // 0x1CDC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceSeatingAnim : 1;                                     // 0x1CDC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NGFE[0x23];                                    // 0x1CDD(0x0023) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterCharacter");
		return ptr;
	}



	void WeaponEvent__DelegateSignature(class AShooterWeapon* weapon);
	bool UseAlternateStandingAnim();
	bool UseAltAimOffsetAnim();
	bool UseAdditiveStandingAnim();
	void UpdateExpectedBase();
	void UpdateAutoTurn();
	void UpdateAutoPlayer();
	void UpdateAutoMove();
	void UpdateAutoJump();
	void UpdateAutoFire();
	void TryCutEnemyGrapplingCable();
	void SyncGrapHookDistance(float Distance);
	class AActor* StructurePlacementUseAlternateOriginActor();
	void StartWeaponSwitch(class UPrimalItem* aPrimalItem, bool bDontClearLastWeapon);
	void StartCameraTransition(float Duration);
	void ShowWeapon();
	void SetPreventEquipAllWeapons(bool bPrevent);
	bool SetPlayerHexagonCount(int NewHexagonCount);
	void SetExpectedBase(class APrimalStructure* BaseStructure);
	void SetCarriedPitchYaw(float NewCarriedPitch, float NewCarriedYaw);
	void SetCameraMode(bool bFirstperson, bool bIgnoreSettingFirstPersonRiding, bool bForce);
	void SetAutoPlayer(bool bEnable);
	void ServerToClientsPlayFireBallistaAnimation();
	void ServerSwitchMap();
	void ServerSwitchBallistaAmmo();
	void ServerStopFireBallista();
	void ServerStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bShouldInvertInput);
	void ServerSetViewingInventory(bool bIsViewing);
	void ServerSetTargeting(bool bNewTargeting);
	void ServerSetBallistaTargeting(bool StartTargeting);
	void ServerSetBallistaNewRotation(float Pitch, float Yaw);
	void ServerSeatingStructureAction(unsigned char ActionNumber);
	void ServerRequestHexagonTrade(int RequestedTradableItemIndex, int Quantity);
	void ServerReleaseGrapHookCable(bool bReleasing);
	void ServerPlayFireBallistaAnimation();
	void ServerNotifyBallistaShot(const struct FHitResult& Impact, const struct FVector_NetQuantizeNormal& ShootDir);
	void ServerNetEndClimbingLadder(bool bIsClimbOver, const struct FVector& ClimbOverLoc, float RightDir);
	void ServerLaunchMountedDino();
	void ServerForceUpdatedAimedActors(float OverrideMaxDistance, bool bReplicateToSimulatedClients);
	void ServerFireBallistaProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void ServerDetachGrapHookCable(bool bDoUpwardsJump, float UpwardsJumpYaw);
	void ServerClearSwitchingWeapon(bool bOnlyIfDefaultWeapon, bool bClientRequestNextWeaponID);
	void ServerCheckDrinkingWater();
	void RenamePlayer(const struct FString& NewName);
	void RefreshRiderSocket();
	void PlayEmoteAnimation(unsigned char EmoteIndex);
	void PlayDrinkingAnimation();
	void OnWeaponUnequipped(class AShooterWeapon* OldWeapon);
	void OnWeaponEquipped(class AShooterWeapon* newWeapon);
	void OnThirdPersonCameraView__DelegateSignature();
	void OnRep_RawBoneModifiers();
	void OnRep_HatHidden();
	void OnRep_CurrentWeapon(class AShooterWeapon* LastWeapon);
	void OnFirstPersonCameraView__DelegateSignature();
	void NetSimulatedForceUpdateAimedActors(float OverrideMaxDistance);
	void NetSetOverrideHeadHairColor(const struct FLinearColor& HairColor);
	void NetSetOverrideFacialHairColor(const struct FLinearColor& HairColor);
	void NetSetHeadHairPercent(float thePercent, int newHeadHairIndex);
	void NetSetFacialHairPercent(float thePercent, int newFacialHairIndex);
	struct FString LinkedPlayerIDString();
	void LaunchMountedDino();
	bool IsWatchingExplorerNote();
	bool IsUsingShield();
	bool IsUsingClimbingPick();
	bool IsTargeting();
	bool IsPlayingUpperBodyCallAnimation();
	bool IsPlayingRepawnAnim();
	bool IsPlayingInitialSpawnAnim();
	bool IsOutside();
	bool IsNearTopOfLadder();
	bool STATIC_IsIndoorsAtLoc(class UWorld* TheWorld, const struct FVector& actorLoc);
	bool IsGrapplingHardAttached();
	bool IsGrapplingAttachedToMe();
	bool IsFiring();
	bool IsCurrentPassengerLimitCameraYaw();
	bool IsCarriedAsPassenger();
	bool IsBlockingWithShield();
	void HideWeapon();
	bool HasAnyOtherBuffsUsingConsolidatedMultiUse(class APrimalBuff* BuffToSkip);
	void GivePrimalItemWeapon(class UPrimalItem* aPrimalItem);
	int GiveHexagonsOnMissionReward(const struct FName& MissionTag, int BonusEarnedHexagons, int HexagonAmountOverride);
	int GiveHexagons(int NumHexagons, int TriggerIndex, float OverrideHexGainFalloffRate, int OverrideHexGainFalloffMin, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts);
	void GiveDefaultWeaponTimer();
	void GiveDefaultWeapon(bool bForceGiveDefaultWeapon);
	class AShooterWeapon* GetWeapon();
	float GetTargetingSpeedModifier();
	class AShooterPlayerController* GetSpawnedForController();
	class UAnimSequence* GetSeatingAnimation();
	float GetRidingDinoAnimSpeedRatio();
	class APrimalDinoCharacter* GetRidingDino();
	int GetPlayerHexagonCount();
	class UPrimalPlayerData* GetPlayerData();
	float GetPercentageOfHeadHairGrowth();
	float GetPercentageOfFacialHairGrowth();
	double GetLastAttackTime();
	int GetHeadHairIndex();
	struct FLinearColor GetHeadHairColor();
	int GetFacialHairIndex();
	struct FLinearColor GetFacialHairColor();
	class UAnimSequence* GetDinoRidingMoveAnimation();
	class UAnimSequence* GetDinoRidingAnimation();
	bool GetBlockingShieldOffsets(struct FVector* OutBlockingShieldFPVTranslation, struct FRotator* OutBlockingShieldFPVRotation);
	class UAnimSequence* GetAlternateStandingAnim(float* OutBlendInTime, float* OutBlendOutTime);
	bool GetAdditiveStandingAnimNonAdditive();
	class UAnimSequence* GetAdditiveStandingAnim(float* OutBlendInTime, float* OutBlendOutTime);
	float GetActualTargetingFOV(float DefaultTargetingFOV);
	class AMissionType* GetActiveMission();
	void GameStateHandleEvent(const struct FName& NameParam, const struct FVector& VecParam);
	void FinishWeaponSwitch();
	class AShooterCharacter* STATIC_FindForPlayerController(class AShooterPlayerController* aPC);
	void DetachGrapHookCable();
	void DetachFromLadder();
	void ClientUpdateTranspondersInfo(TArray<struct FTransponderInfo> TranspondersInfo, bool bNewData);
	void ClientsSpawnHexagonVFX(int NumHexagons, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts);
	void ClientSetExpectedBase(uint32_t BaseID);
	void ClientReceiveNextWeaponID(const struct FItemNetID& theItemID);
	void ClientPlayHarvestAnim();
	void ClientNotifyTribeRequest(const struct FString& RequestTribeName, class AShooterCharacter* PlayerCharacter);
	void ClientNetEndClimbingLadder();
	void ClientInviteToAlliance(int RequestingTeam, uint32_t AllianceID, const struct FString& AllianceName, const struct FString& InviteeName);
	void ClientClearTribeRequest();
	void ClearSpawnAnim();
	void ClearRidingDino(bool bFromDino, int OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
	bool CanEquipWeapons();
	void CallGameStateHandleEvent(const struct FName& NameParam, const struct FVector& VecParam);
	bool BuffsPreventFirstPerson();
	void BreakGrapple();
	void BPUnstasis();
	void BPUnlockedAllExplorerNotes();
	void BPSetupFirstPersonHandsMesh();
	bool BPSetPlayerHexagonCount(int NewHexagonCount);
	void BPSetFirstPersonMasterPoseComponent(class USkeletalMeshComponent* firstPersonMasterPosecomponent);
	float BPOverrideHealthBarOffset(class APlayerController* ForPC);
	void BPNonDedicatedPostAnimUpdate();
	int BPGetPlayerHexagonCount();
	struct FVector BPGetHealthBarColor();
	void AuthPostSpawnInit();
	void AttachToLadder(class USceneComponent* Parent);
	void ApplyBoneModifiers();
	void ApplyBodyColors(class USkeletalMeshComponent* toMesh);
	bool AnimUseAimOffset();
};

// Class ShooterGame.PrimalUI
// 0x02D8 (FullSize[0x0518] - InheritedSize[0x0240])
class UPrimalUI : public UUserWidget
{
public:
	unsigned char                                      UnknownData_8U3B[0x18];                                    // 0x0240(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bCaptureMouseInput;                                        // 0x0258(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsClosing;                                                // 0x0259(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bWantsPrimalItemNotifications;                             // 0x025A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BG6N[0x5];                                     // 0x025B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultToolTipWidget;                                      // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEscapeClosesMenu;                                         // 0x0268(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEscapeOpensPauseMenu;                                     // 0x0269(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bClickClosesMenu;                                          // 0x026A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsGameplayUI;                                             // 0x026B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsTopUI;                                                  // 0x026C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EHighlightStartingPoint>   HighlightStartPointType;                                   // 0x026D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VZMQ[0x2];                                     // 0x026E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ConfirmationDialogUITemplate;                              // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      XBoxFooterUITemplate;                                      // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowCancelIcon;                                           // 0x0280(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowAcceptIcon;                                           // 0x0281(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowLStickIcon;                                           // 0x0282(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowRStickIcon;                                           // 0x0283(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowBumpersIcon;                                          // 0x0284(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowStartBtnIcon;                                         // 0x0285(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowLTBtnIcon;                                            // 0x0286(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowRTBtnIcon;                                            // 0x0287(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowFaceBtnLeftIcon;                                      // 0x0288(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowFaceBtnTopIcon;                                       // 0x0289(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowFaceBtnRightIcon;                                     // 0x028A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowFaceBtnBottomIcon;                                    // 0x028B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowLeftShoulderBtnIcon;                                  // 0x028C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowXBoxFooter;                                           // 0x028D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreUIScaling;                                          // 0x028E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V81R[0x1];                                     // 0x028F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SplitscreenDPIScaler;                                      // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDoExtraDataListButtonPanelFilteringChecks;                // 0x0294(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M3G9[0x3];                                     // 0x0295(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       DefaultHighlightWidgetOverrideName;                        // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShouldValidateInputOnRemove;                              // 0x02A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A8C2[0x1BF];                                   // 0x02A1(0x01BF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    HTTPGetResponseEvent;                                      // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class APrimalStructureItemContainer> ItemContainer;                                             // 0x0470(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SVL9[0xA0];                                    // 0x0478(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalUI");
		return ptr;
	}



	void SetInputMode();
	void RemovedFromViewport();
	struct FEventReply OnMouseButtonDownEvent(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnKeyUpEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent);
	struct FEventReply OnKeyDownEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent);
	void OnHTTPGetResponse__DelegateSignature(bool bSuccess, const struct FString& StringResult);
	void OnConfirmationDialogClosed(bool bAccept);
	void HTTPGetString(const struct FString& InURL);
	class AShooterHUD* GetShooterHUD();
	class AShooterPlayerState* GetPlayerState();
	class AShooterPlayerController* GetPC();
	class APrimalCharacter* GetPawn();
	void CloseWithAnimation();
	void ClickedSecondaryButton(class UWidget* clickedWidget);
	void ClickedButton(class UWidget* clickedWidget);
	void BPProcessSplitscreenAndAddToViewport(bool ScaleX);
	void AddedToViewport();
};

// Class ShooterGame.UI_Spawn
// 0x04C8 (FullSize[0x09E0] - InheritedSize[0x0518])
class UUI_Spawn : public UPrimalUI
{
public:
	struct FName                                       SkinColorPreviewName;                                      // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HairColorPreviewName;                                      // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EyeColorPreviewName;                                       // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SavedPresetListPanelName;                                  // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       IslandRgionButtonListPanelName;                            // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadConfirmationButtonName;                                // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelLoadButtonName;                                      // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadFromFileScrollBoxName;                                 // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RandomizeButtonName;                                       // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TabBgSwitcherName;                                         // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MaleEnabledEffectName;                                     // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FemaleEnabledEffectName;                                   // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SaveToFileButtonName;                                      // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadFromFileButtonName;                                    // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     PreviewWidgetName;                                         // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       RespawnButtonName;                                         // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CreateNewPlayerButtonName;                                 // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RespawnLabelName;                                          // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharConfigMaleButtonName;                                  // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharConfigFemaleButtonName;                                // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DoCreateNewPlayerButtonName;                               // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NewCharacterPanelName;                                     // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RespawnPanelName;                                          // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RespawnPanelButtonName;                                    // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RespawnPanelMapName;                                       // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GenderLabelName;                                           // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BodyColorSliderName;                                       // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HairColorSliderName;                                       // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EyeColorSliderName;                                        // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FBoneModifierSlider>                 BoneModifiersSliders;                                      // 0x0610(0x0010) (Edit, ZeroConstructor)
	struct FName                                       CharacterNameBoxName;                                      // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RespawnButtonLabelName;                                    // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RequestSpawnPointsInterval;                                // 0x0638(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DownloadCharacterDataButtonName;                           // 0x063C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IHHK[0x4];                                     // 0x0644(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ListCharacterDataSceneTemplate;                            // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0650(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x0660(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TWAP[0x38];                                    // 0x0670(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterCharacter*                           PreviewCharacter;                                          // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UUI_PreviewWidget*                           PreviewWidget;                                             // 0x06B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LCRI[0x120];                                   // 0x06B8(0x0120) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxDistanceForMultiSpawnPointSelect;                       // 0x07D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E4QS[0x204];                                   // 0x07DC(0x0204) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Spawn");
		return ptr;
	}



	void SlotButtonSelected(class UWidget* theWidget);
	void SavedPresetListButtonSelected(class UWidget* theWidget);
	void RespawnSlotButtonSelected(class UWidget* theWidget);
	void OnSaveToFileEditableCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnBedFilterChanged(const struct FText& Text);
	void MultiSelectSpawnPointButtonSelected(class UWidget* theWidget);
};

// Class ShooterGame.PrimalCharacterSetting
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UPrimalCharacterSetting : public UObject
{
public:
	struct FCharacterPreset                            CharacterSetting;                                          // 0x0028(0x0020) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCharacterSetting");
		return ptr;
	}



};

// Class ShooterGame.PrimalCharacterStatusComponent
// 0x0FB8 (FullSize[0x1090] - InheritedSize[0x00D8])
class UPrimalCharacterStatusComponent : public UActorComponent
{
public:
	float                                              MaxStatusValues[0xC];                                      // 0x00D8(0x0030) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BaseLevelMaxStatusValues[0xC];                             // 0x0108(0x0030) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      NumberOfLevelUpPointsApplied[0xC];                         // 0x0138(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      NumberOfLevelUpPointsAppliedTamed[0xC];                    // 0x0144(0x000C) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TamedIneffectivenessModifier;                              // 0x0150(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MovingStaminaRecoveryRateMultiplier;                       // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RecoveryRateStatusValue[0xC];                              // 0x0158(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeToRecoverAfterDepletionStatusValue[0xC];               // 0x0188(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeToRecoverAfterDecreaseStatusValue[0xC];                // 0x01B8(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AmountMaxGainedPerLevelUpValue[0xC];                       // 0x01E8(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AmountMaxGainedPerLevelUpValueTamed[0xC];                  // 0x0218(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      MaxGainedPerLevelUpValueIsPercent[0xC];                    // 0x0248(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      RecoveryRateIsPercent[0xC];                                // 0x0254(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamingMaxStatMultipliers[0xC];                             // 0x0260(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamingMaxStatAdditions[0xC];                               // 0x0290(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxLevelUpMultiplier[0xC];                                 // 0x02C0(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedLandDinoSwimSpeedLevelUpEffectiveness;                // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamingIneffectivenessMultiplier;                           // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoRiderWeightMultiplier;                                 // 0x02F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      CanLevelUpValue[0xC];                                      // 0x02FC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      DontUseValue[0xC];                                         // 0x0308(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9OHN[0x4];                                     // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPrimalCharacterStatusStateThresholds       StatusStateThresholds[0xC];                                // 0x0318(0x0360) (Edit, DisableEditOnInstance)
	float                                              ExperienceAutomaticConsciousIncreaseSpeed;                 // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CheatMaxWeight;                                            // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                CharacterStatusComponentPriority;                          // 0x0680(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SuffocationHealthPercentDecreaseSpeed;                     // 0x0684(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UnsubmergedOxygenIncreaseSpeed;                            // 0x0688(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SubmergedOxygenDecreaseSpeed;                              // 0x068C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RunningStaminaConsumptionRate;                             // 0x0690(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WalkingStaminaConsumptionRate;                             // 0x0694(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimmingOrFlyingStaminaConsumptionRate;                    // 0x0698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              JumpStaminaConsumption;                                    // 0x069C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WindedSpeedModifier;                                       // 0x06A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WindedSpeedModifierSwimmingOrFlying;                       // 0x06A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InjuredSpeedModifier;                                      // 0x06A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypothermicHealthDecreaseRateBase;                         // 0x06AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypothermicHealthDecreaseRatePerDegree;                    // 0x06B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperthermicHealthDecreaseRateBase;                        // 0x06B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperthermicHealthDecreaseRatePerDegree;                   // 0x06B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              XPEarnedPerStaminaConsumed;                                // 0x06BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              KillXPMultiplierPerCharacterLevel;                         // 0x06C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bCanSuffocate : 1;                                         // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanSuffocateIfTamed : 1;                                  // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanGetHungry : 1;                                         // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseStamina : 1;                                           // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWalkingConsumesStamina : 1;                               // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRunningConsumesStamina : 1;                               // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsumeFoodAutomatically : 1;                             // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInfiniteFood : 1;                                         // 0x06C4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddExperienceAutomatically : 1;                           // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsumeWaterAutomatically : 1;                            // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutomaticallyUpdateTemperature : 1;                       // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateGlobalStatusValues : 1;                          // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bAllowLevelUps : 1;                                        // 0x06C5(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bInfiniteStats : 1;                                        // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSharingXPWithTribe : 1;                              // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseStatusSpeedModifiers : 1;                              // 0x06C5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStatusSpeedModifierOnlyFullOrNone : 1;                    // 0x06C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreStatusSpeedModifierIfSwimming : 1;                  // 0x06C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventJump : 1;                                          // 0x06C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bInitializedBaseLevelMaxStatusValues : 1;                  // 0x06C6(0x0001) BIT_FIELD (SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_0R70 : 1;                                      // 0x06C6(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bServerFirstInitialized : 1;                               // 0x06C6(0x0001) BIT_FIELD (SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bRunningUseDefaultSpeed : 1;                               // 0x06C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNeverAllowXP : 1;                                         // 0x06C6(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventTamedStatReplication : 1;                          // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustStatusValueModification : 1;                   // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDefaultSpeed : 1;                                    // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_31X8 : 1;                                      // 0x06C7(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHideFoodStatusFromHUD : 1;                                // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideStaminaStatusFromHUD : 1;                             // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontUseSpeedMultipleAsSpeed : 1;                          // 0x06C7(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              ShareXPWithTribeRange;                                     // 0x06C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                BaseCharacterLevel;                                        // 0x06CC(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16_t                                           ExtraCharacterLevel;                                       // 0x06D0(0x0002) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_Q4YY[0x2];                                     // 0x06D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ExperiencePoints;                                          // 0x06D4(0x0004) (BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ReplicatedExperiencePoints;                                // 0x06D8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	TEnumAsByte<ShooterGame_ELevelExperienceRampType>  LevelExperienceRampType;                                   // 0x06DC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F3GJ[0x3];                                     // 0x06DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxExperiencePoints;                                       // 0x06E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseFoodConsumptionRate;                                   // 0x06E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BaseWaterConsumptionRate;                                  // 0x06E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FortitudeTorpidityDecreaseMultiplier;                      // 0x06EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FortitudeTorpidityIncreaseResistance;                      // 0x06F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SubmergedWaterIncreaseRate;                                // 0x06F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CrouchedWaterFoodConsumptionMultiplier;                    // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ProneWaterFoodConsumptionMultiplier;                       // 0x06FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StaminaRecoveryDecreaseFoodMultiplier;                     // 0x0700(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StaminaRecoveryDecreaseWaterMultiplier;                    // 0x0704(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HealthRecoveryDecreaseFoodMultiplier;                      // 0x0708(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyDinoConsumingFoodRateMultiplier;                       // 0x070C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoTamedAdultConsumingFoodRateMultiplier;                 // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyGestationConsumingFoodRateMultiplier;                  // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyDinoStarvationHealthDecreaseRateMultiplier;            // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyMaxHealthPercent;                                      // 0x071C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CrouchedStaminaConsumptionMultiplier;                      // 0x0720(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ProneStaminaConsumptionMultiplier;                         // 0x0724(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StarvationHealthConsumptionRate;                           // 0x0728(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DehyrdationHealthConsumptionRate;                          // 0x072C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StaminaConsumptionDecreaseWaterMultiplier;                 // 0x0730(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StaminaConsumptionDecreaseFoodMultiplier;                  // 0x0734(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypothermiaDecreaseFoodMultiplierBase;                     // 0x0738(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypothermiaDecreaseFoodMultiplierPerDegree;                // 0x073C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperthermiaDecreaseWaterMultiplierBase;                   // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperthermiaDecreaseWaterMultiplierPerDegree;              // 0x0744(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperthermiaTemperatureThreshold;                          // 0x0748(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypothermiaTemperatureThreshold;                           // 0x074C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TorporExitPercentThreshold;                                // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              KnockedOutTorpidityRecoveryRateMultiplier;                 // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DehydrationTorpidityMultiplier;                            // 0x0758(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StarvationTorpidityMultuplier;                             // 0x075C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StarvationTorpidityIncreaseRate;                           // 0x0760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DehyrdationTorpidityIncreaseRate;                          // 0x0764(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InjuredTorpidityIncreaseMultiplier;                        // 0x0768(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeightSpeedDecreasePower;                                  // 0x076C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeightJumpDecreasePower;                                   // 0x0770(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoopItemMinFoodConsumptionInterval;                        // 0x0774(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoopItemMaxFoodConsumptionInterval;                        // 0x0778(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TheMaxTorporIncreasePerBaseLevel;                          // 0x077C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CurrentStatusValuesReplicationInterval;                    // 0x0780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationHyperthermiaOffsetExponent;                      // 0x0784(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationHyperthermiaOffsetScaler;                        // 0x0788(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationHypothermiaOffsetExponent;                       // 0x078C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationHypothermiaOffsetScaler;                         // 0x0790(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypoCharacterInsulationValue;                              // 0x0794(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HyperCharacterInsulationValue;                             // 0x0798(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              PoopItemFoodConsumptionCache;                              // 0x079C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastHypothermalCharacterInsulationValue;                   // 0x07A0(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              LastHyperthermalCharacterInsulationValue;                  // 0x07A4(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> MaxStatusValueToAutoUpdate;                                // 0x07A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2F7C[0x3];                                     // 0x07A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GenericXPMultiplier;                                       // 0x07AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CraftEarnXPMultiplier;                                     // 0x07B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinInventoryWeight;                                        // 0x07B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              KillEarnXPMultiplier;                                      // 0x07B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GenericEarnXPMultiplier;                                   // 0x07BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SpecialEarnXPMultiplier;                                   // 0x07C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HarvestEarnXPMultiplier;                                   // 0x07C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultHyperthermicInsulation;                             // 0x07C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultHypothermicInsulation;                              // 0x07CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxTamingEffectivenessBaseLevelMultiplier;                 // 0x07D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DH2T[0x4];                                     // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     FoodStatusNameOverride;                                    // 0x07D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  FoodStatusIconBackgroundOverride;                          // 0x07E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  FoodStatusIconForegroundOverride;                          // 0x07F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DUUO[0x10];                                    // 0x07F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<unsigned char>                              StatusValueModifierDescriptionIndices;                     // 0x0808(0x0010) (Net, ZeroConstructor, Transient)
	float                                              CurrentStatusValues[0xC];                                  // 0x0818(0x0030) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              AdditionalStatusValues[0xC];                               // 0x0848(0x0030) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ReplicatedCurrentStatusValues[0xC];                        // 0x0878(0x0030) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              ReplicatedGlobalMaxStatusValues[0xC];                      // 0x08A8(0x0030) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              ReplicatedBaseLevelMaxStatusValues[0xC];                   // 0x08D8(0x0030) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              ReplicatedGlobalCurrentStatusValues[0xC];                  // 0x0908(0x0030) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	int8_t                                             CurrentStatusStates[0xC];                                  // 0x0938(0x000C) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData_B7IZ[0x184];                                   // 0x0944(0x0184) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StaminaRecoveryExtraResourceDecreaseMultiplier;            // 0x0AC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DehydrationStaminaRecoveryRate;                            // 0x0ACC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WaterConsumptionMultiplier;                                // 0x0AD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FoodConsumptionMultiplier;                                 // 0x0AD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class USoundBase*>                          EnteredStatusStateSounds;                                  // 0x0AD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                          ExitStatusStateSounds;                                     // 0x0AE8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ExtraOxygenSpeedStatMultiplier;                            // 0x0AF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraTamedHealthMultiplier;                                // 0x0AFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WakingTameFoodConsumptionRateMultiplier;                   // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwimmingStaminaRecoveryRateMultiplier;                     // 0x0B04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WC1M[0x1C];                                    // 0x0B08(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MountedDinoDinoWeightMultiplier;                           // 0x0B24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraWildDinoDamageMultiplier;                             // 0x0B28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraTamedDinoDamageMultiplier;                            // 0x0B2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeightMultiplierWhenCarriedOrBased;                        // 0x0B30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeightMultiplierForCarriedPassengers;                      // 0x0B34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeightMultiplierForPlatformPassengersInventory;            // 0x0B38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoMaxStatAddMultiplierImprinting[0xC];                   // 0x0B3C(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoImprintingQuality;                                     // 0x0B6C(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bForceGainOxygen : 1;                                      // 0x0B70(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFreezeStatusValues : 1;                                   // 0x0B70(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_FS1I : 1;                                      // 0x0B70(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPModifyMaxLevel : 1;                                  // 0x0B70(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoStaminaRecoveryWhenStarving : 1;                        // 0x0B70(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bApplyingStatusValueModifiers : 1;                         // 0x0B70(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bDontScaleMeleeDamage : 1;                                 // 0x0B70(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_SFTW[0x3];                                     // 0x0B71(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TamedBaseHealthMultiplier;                                 // 0x0B74(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExtraBabyDinoConsumingFoodRateMultiplier;                  // 0x0B78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M5KC[0x4];                                     // 0x0B7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             StatusValueNameOverrides;                                  // 0x0B80(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      RegainOxygenDamageType;                                    // 0x0B90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1213[0x4F8];                                   // 0x0B98(0x04F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCharacterStatusComponent");
		return ptr;
	}



	void UpdateWeightStat(bool bForceSetValue);
	void UpdatedCurrentStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float amount, bool bManualModification, class UClass* DamageTypeClass, bool bDamageDontKill, bool bDontAdjustOtherStats);
	void TickStatus(float DeltaTime, bool bForceStatusUpdate);
	void SetTamed(float TameIneffectivenessModifier, bool bSkipAddingTamedLevels);
	void SetMaxStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> statType, float newValue);
	void SetLevelUpPoints(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, bool bTamedPoints, int newPoints);
	void SetExtraCharacterLevel(int NewExtraCharacterLevel);
	void SetBaseLevelNoStatChange(int Level);
	void SetBaseLevelCustomized(int Level, TArray<struct FStatValuePair> CustomBaseStats, TArray<TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue>> PrioritizeStats, bool bDontCurrentSetToMax);
	void SetBaseLevel(int Level, bool bDontCurrentSetToMax);
	void SetAllStatsToMaximumExcluding(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> exclude);
	void SetAllStatsToMaximum();
	void ServerSyncReplicatedValues();
	void RescaleMaxStat(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> LevelUpValueType, float TargetValue, bool bIsPercentOfTrueValue);
	void RescaleAllStats();
	void OnRep_ReplicatedExperiencePoints();
	void OnRep_GlobalMaxStatusValues();
	void OnRep_GlobalCurrentStatusValues();
	void OnRep_GlobalBaseLevelMaxStatusValues();
	void OnRep_CurrentStatusValues();
	void NetSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
	float ModifyCurrentStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float amount, bool bPercentOfMax, bool bPercentOfCurrent, bool bManualModification, bool bSetValue, class UClass* DamageTypeClass, bool bDamageDontKill, bool bForceSetValue);
	bool IsInStatusState(TEnumAsByte<ShooterGame_EPrimalCharacterStatusState> StateType);
	bool IsAtMaxLevel();
	bool HasExperienceForLevelUp();
	struct FString GetStatusValueString(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, bool bValueOnly);
	float GetStatusValueRecoveryRate(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	struct FString GetStatusNameString(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	struct FString GetStatusMaxValueString(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, bool bValueOnly);
	float GetRawStatusValueRecoveryRate(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	float GetMovementSpeedModifier();
	float GetMeleeDamageModifier();
	int GetLevelUpPoints(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, bool bTamedPoints);
	int GetExtraCharacterLevel();
	float GetExperienceRequiredForPreviousLevelUp();
	float GetExperienceRequiredForNextLevelUp();
	void GetDinoFoodConsumptionRateMultiplier(float* amount);
	struct FString GetDebugString();
	float GetCraftingSpeedModifier();
	int GetCharacterLevel();
	int GetBaseLevelFromLevelUpPoints(bool bIncludePlayerAddedLevels);
	void CopyPrimalStatusComponentValues(class UPrimalCharacterStatusComponent* src);
	TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> STATIC_ConvertIntToCharacterStatusEnum(int InInteger);
	void ClientSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
	void ClearAllLevelUpPoints(bool bTamedPoints);
	bool CanLevelUp(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> LevelUpValueType, bool bCheckExperience);
	bool CanGainLevel();
	void BPSetRecoveryRateStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float newValue);
	int BPModifyMaxLevel(int InMaxLevel);
	float BPModifyMaxExperiencePoints(float InMaxExperiencePoints);
	float BPGetPercentStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	float BPGetMaxStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	float BPGetCurrentStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType);
	void BPDirectSetMaxStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float newValue);
	void BPDirectSetCurrentStatusValue(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float newValue);
	float BPAdjustStatusValueModification(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float amount, class UClass* DamageTypeClass, bool bManualModification);
	void AddStatusValueModifier(TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float amount, float Speed, bool bContinueOnUnchangedValue, bool bSetValue, int StatusValueModifierDescriptionIndex, bool bResetExistingModifierDescriptionIndex, float LimitExistingModifierDescriptionToMaxAmount, bool bSetAdditionalValue, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StopAtValueNearMax, bool bMakeUntameable, class UClass* ScaleValueByCharacterDamageType);
	void AddExperience(float HowMuch, bool bShareWithTribe, TEnumAsByte<ShooterGame_EXPType> XPType);
};

// Class ShooterGame.PrimalDinoStatusComponent
// 0x0000 (FullSize[0x1090] - InheritedSize[0x1090])
class UPrimalDinoStatusComponent : public UPrimalCharacterStatusComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoStatusComponent");
		return ptr;
	}



};

// Class ShooterGame.PrimalPlayerStatusComponent
// 0x0000 (FullSize[0x1090] - InheritedSize[0x1090])
class UPrimalPlayerStatusComponent : public UPrimalCharacterStatusComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalPlayerStatusComponent");
		return ptr;
	}



};

// Class ShooterGame.PrimalClimbingSettings
// 0x0C00 (FullSize[0x0C28] - InheritedSize[0x0028])
class UPrimalClimbingSettings : public UObject
{
public:
	bool                                               bDebug;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowInputClimbing;                                       // 0x0029(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowSliding;                                             // 0x002A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5SBJ[0x1];                                     // 0x002B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ArmSwitchAngle;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreFlinchUnclimbableInterval;                              // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PostFlinchUnclimbableInterval;                             // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClimbingWaitAfterQuakeFall;                                // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseExtendedLandTrace;                                     // 0x003C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JAAN[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RootLocationInterpSpeed;                                   // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              JumpUpVelocity;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              JumpForwardVelocity;                                       // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              JumpDirectionVelocity;                                     // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              JumpCameraTransitionDuration;                              // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClimbingWaitForJump;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceReleaseOnImpulseForce;                                // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FClimbingTypeSettings                       TypeSettings[0x4];                                         // 0x005C(0x0070) (Edit, DisableEditOnInstance)
	float                                              AttachAnchoredTraceRadius;                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttachEffectTraceDistanceForward;                          // 0x00D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttachEffectTraceDistanceBackward;                         // 0x00D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinAimDirectionDot;                                        // 0x00D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AimDirectionBias;                                          // 0x00DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TracePlaneInterpolation;                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingTracePlaneInterpolation;                            // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinFloorDirectionDot;                                      // 0x00E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FallingConsumeDurabilityMultiplier;                        // 0x00EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ImpactNormalOffsetAllowanceDot;                            // 0x00F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MoveTraceDistance;                                         // 0x00F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MoveTraceRadius;                                           // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingMinDotUp;                                           // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CeilingDistance;                                           // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CeilingTraceRadius;                                        // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CeilingTraceDistance;                                      // 0x0108(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinCeilingTraceTime;                                       // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WallDistance;                                              // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WallTraceRadius;                                           // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WallTraceDistance;                                         // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinWallTraceTime;                                          // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GroundMaxDotUp;                                            // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinFloorDistance;                                          // 0x0124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FloorTraceRadius;                                          // 0x0128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandMinFloorSpaceDistance;                                 // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LandFloorSpaceTraceRadius;                                 // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlipMaxNormalDot;                                          // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TurnMaxNormalDot;                                          // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FClimbingTransitionParams                   Transitions[0x20];                                         // 0x013C(0x0A80) (Edit, DisableEditOnInstance)
	float                                              ClimbAnimPlayRateDistanceScale;                            // 0x0BBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinClimbAnimPlayRate;                                      // 0x0BC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxClimbAnimPlayRate;                                      // 0x0BC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraYawMin;                                              // 0x0BC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraYawMax;                                              // 0x0BCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraPitchUp;                                             // 0x0BD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CameraPitchDown;                                           // 0x0BD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     CameraOffsetScale;                                         // 0x0BD8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingCameraPitchUp;                                      // 0x0BE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingCameraPitchDown;                                    // 0x0BE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     HangingCameraOffsetScale;                                  // 0x0BEC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwitchToFPVDistance;                                       // 0x0BF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwitchToFPVDownDot;                                        // 0x0BFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwitchToFPVTransitionDuration;                             // 0x0C00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwitchFromFPVTransitionDuration;                           // 0x0C04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UpAndOverExtendedUp;                                       // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UpAndOverExtendedForward;                                  // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingFailTraceExtraLength;                               // 0x0C10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingFailMinDotUp;                                       // 0x0C14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingFailOppositeDirectTraceLength;                      // 0x0C18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HangingFailOppositeDirectTraceRadius;                      // 0x0C1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InvisibleWallTooCloseRadius;                               // 0x0C20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3HB7[0x4];                                     // 0x0C24(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalClimbingSettings");
		return ptr;
	}



};

// Class ShooterGame.PrimalColorSet
// 0x0240 (FullSize[0x0268] - InheritedSize[0x0028])
class UPrimalColorSet : public UObject
{
public:
	struct FColorSetDefinition                         ColorSetDefinitions[0x6];                                  // 0x0028(0x0240) (Edit, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalColorSet");
		return ptr;
	}



};

// Class ShooterGame.PrimalBotAIController
// 0x0028 (FullSize[0x08E0] - InheritedSize[0x08B8])
class APrimalBotAIController : public APrimalDinoAIController
{
public:
	float                                              DinoSearchRadius;                                          // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WL5S[0x4];                                     // 0x08BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AAIAttackCoordinator*                        AttackCoordinator;                                         // 0x08C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      RiddenDinoControllerClass;                                 // 0x08C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class APrimalDinoCharacter>         ClaimedDino;                                               // 0x08D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GO9Z[0x8];                                     // 0x08D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBotAIController");
		return ptr;
	}



	void UpdateDinoClaim();
	float TimeSinceGivenAttackPriority();
	void SetAttackCoordinator(class AAIAttackCoordinator* Coordinator);
	void ReleaseClaimOnDino();
	bool IsTooFarToAttack();
	bool IsTooCloseToAttack();
	void InitializeBlackboardValues(class APrimalBotCharacter* Bot);
	bool ClaimDino(class APrimalDinoCharacter* Dino);
};

// Class ShooterGame.PrimalDinoEntry
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UPrimalDinoEntry : public UObject
{
public:
	unsigned char                                      UnknownData_VXNG[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       DinoNameTag;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DinoDescriptiveName;                                       // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  DinoIcon;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          DinoMaterial;                                              // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bRequiresKill;                                             // 0x0078(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZUK3[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoEntry");
		return ptr;
	}



};

// Class ShooterGame.PrimalDinoSettings
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UPrimalDinoSettings : public UObject
{
public:
	TArray<struct FDinoFoodEffectivenessMultipliers>   FoodEffectivenessMultipliers;                              // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDinoFoodEffectivenessMultipliers>   ExtraFoodEffectivenessMultipliers;                         // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              TamingAffinityNoFoodDecreasePercentageSpeed;               // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F3PC[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDamageTypeAdjuster>                 BaseDamageTypeAdjusters;                                   // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDamageTypeAdjuster>                 ExtraDamageTypeAdjusters;                                  // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  DinoFoodTypeImage;                                         // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DinoFoodTypeName;                                          // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bWakingTameDisplayItemName;                                // 0x0088(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q0UZ[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoSettings");
		return ptr;
	}



};

// Class ShooterGame.PrimalBuff_Grappled
// 0x0208 (FullSize[0x0B70] - InheritedSize[0x0968])
class APrimalBuff_Grappled : public APrimalBuff
{
public:
	TArray<struct FGrappleTether>                      CurrentGrappleTethers;                                     // 0x0968(0x0010) (BlueprintVisible, ZeroConstructor, SaveGame, ContainsInstancedReference)
	TArray<struct FGrappleTether>                      LastSyncedGrappleTethers;                                  // 0x0978(0x0010) (BlueprintVisible, ZeroConstructor, Transient, ContainsInstancedReference)
	TArray<struct FReplicatedGrappleTetherData>        ReplicatedGrappleTethers;                                  // 0x0988(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference)
	class APrimalCharacter*                            MyOwner;                                                   // 0x0998(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class APrimalCharacter*                            MyOwnerCDO;                                                // 0x09A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EGrappleState>             GrappleState_Current;                                      // 0x09A8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	TEnumAsByte<ShooterGame_EGrappleState>             GrappleState_Previous;                                     // 0x09A9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EGrappleState>             WantsGrappleState;                                         // 0x09AA(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_20YB[0x5];                                     // 0x09AB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultGrappledBuffClass;                                  // 0x09B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   PullingSoundCue;                                           // 0x09B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   ReleasingSoundCue;                                         // 0x09C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 GrappleTetherMesh;                                         // 0x09C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDetachGrappledChars : 1;                                  // 0x09D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDebugGrappling : 1;                                       // 0x09D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDebugGrappling_AgainstSurface : 1;                        // 0x09D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowGrappleLogicOnRemoteClients : 1;                     // 0x09D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceIdleGrappleState : 1;                                // 0x09D0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bHasGrappleBuffInitialized : 1;                            // 0x09D0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bIsOwnerAgainstSurface : 1;                                // 0x09D0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bOwnerMovementAffectedByGrappleTethers : 1;                // 0x09D0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bLastIsOwnerSubmerged : 1;                                 // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bLastIsOwnerSwinging : 1;                                  // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bHasAnyValidTethers : 1;                                   // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bHasValidReservedTethers : 1;                              // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bBrokeAnyTethersThisFrame : 1;                             // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bHasAnyGrappledChars : 1;                                  // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bHasAnyTethersAttachedToDynamicActors : 1;                 // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor)
	unsigned char                                      bDidOverrideVelocityThisFrame : 1;                         // 0x09D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bShouldResetOwnerVars : 1;                                 // 0x09D2(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      UnknownData_D22T[0x1];                                     // 0x09D3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxAllowedGrappleTethers;                                  // 0x09D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceFallingWhenDirToTetherAboveUpDot;                     // 0x09D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceFallingWhenAboveVelocityAwayFromAnchor;               // 0x09DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ForceFallingBelowTetherToOwnerDeltaZ;                      // 0x09E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReduceFallDamageUnderAngleToAnchor;                        // 0x09E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrappledFallDamageMult_MIN;                                // 0x09E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OwnerInput_SwingSpeed;                                     // 0x09EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingVelocityDampingRate_Idle;                          // 0x09F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingVelocityDampingRate_Pulling;                       // 0x09F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SwingingVelocityDampingRateAxisMults_Pulling;              // 0x09F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingVelocityDampingRate_Releasing;                     // 0x0A00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingVelocityDampingRate_OwnerInput;                    // 0x0A04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherTensionVelocityDampingRate;                          // 0x0A08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrappleVelocityMAX;                                        // 0x0A0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingClientPositionErrorOverride_Player;                // 0x0A10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingClientPositionErrorOverride_Dino_MovingFlying;     // 0x0A14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingClientPositionErrorOverride_Dino_Stopped;          // 0x0A18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingClientLocationInterpSpeed;                         // 0x0A1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingingClientRotationInterpSpeed;                         // 0x0A20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SyncGrappleTetherLengthInterval;                           // 0x0A24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PullableWeightLimit;                                       // 0x0A28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherMaxLength;                                           // 0x0A2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherMinLength;                                           // 0x0A30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherAutoDetachUnderLength;                               // 0x0A34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherBreakLimit_OwnerPastCurrentLengthDelta;              // 0x0A38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherBreakLimit_OwnerPastCurrentLengthForTime;            // 0x0A3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherBreakLimit_GrappledActorAboveVelocity;               // 0x0A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherWidth;                                               // 0x0A44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastGrappleTetherLengthSyncTime;                           // 0x0A48(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     OwnerInput_CurrentSwingingVelocity;                        // 0x0A50(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OwnerInput_CurrentSynced;                                  // 0x0A5C(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector2D                                   OwnerInput_LastSynced;                                     // 0x0A64(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JCG2[0x4];                                     // 0x0A6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             OwnerInput_LastSyncTime;                                   // 0x0A70(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              OwnerInput_SyncInverval;                                   // 0x0A78(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DirToAgainstSurface;                                       // 0x0A7C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     LastDirToAgainstSurface;                                   // 0x0A88(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RequiredDirToSurfaceDotDeltaToUpdate;                      // 0x0A94(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     AgainstSurfaceNormal;                                      // 0x0A98(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              TetherPullMaxVelocity;                                     // 0x0AA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherPullAcceleration;                                    // 0x0AA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherPullMaxVelocity_GrappledChar;                        // 0x0AAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherPullAcceleration_GrappledChar;                       // 0x0AB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherReleaseMaxVelocity;                                  // 0x0AB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TetherReleaseMaxVelocity_GrappledChar;                     // 0x0AB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     CurrentTetherMoveVelocity;                                 // 0x0ABC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     AvgParentCharVelocity;                                     // 0x0AC8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ClientSuggestTetherLength_AllowedDelta;                    // 0x0AD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClientSuggestTetherLength_AllowedInterval;                 // 0x0AD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZA65[0x4];                                     // 0x0ADC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ClientSuggestTetherLength_LastReceivedTime;                // 0x0AE0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ValidHitSurface_DistanceFromCapsuleEdge;                   // 0x0AE8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   ValidHitSurface_UpVectorAngleRange;                        // 0x0AEC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   LastProjectedOwnerInputs;                                  // 0x0AF4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              OwnerCapsuleRadius;                                        // 0x0AFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              OwnerCapsuleHalfHeight;                                    // 0x0B00(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviousOwnerVelocity;                                     // 0x0B04(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              TetherTensionStrength;                                     // 0x0B10(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TetherTensionExponent;                                     // 0x0B14(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ForceFallingStateImpulse;                                  // 0x0B18(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8V4I[0x4];                                     // 0x0B1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             ReservedTetherTags;                                        // 0x0B20(0x0010) (Edit, ZeroConstructor)
	struct FString                                     TetherTagOwnerConnectorString;                             // 0x0B30(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector2D                                   GrappledGravityScaleRange;                                 // 0x0B40(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GrappledGravityScaleMult_Idle;                             // 0x0B48(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GrappledGravityScaleMult_Pulling;                          // 0x0B4C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GrappledGravityScaleMult_Releasing;                        // 0x0B50(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AtTetherLimitBelowDistFromEnd;                             // 0x0B54(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LastGravity;                                               // 0x0B58(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              LookingAtAgainstSurfaceAngle;                              // 0x0B64(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VelocityOverrideMaxDeltaTime;                              // 0x0B68(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9LHQ[0x4];                                     // 0x0B6C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuff_Grappled");
		return ptr;
	}



	void UpdateTethersByState(float DeltaTime);
	bool UpdateTetherMasterRef(struct FGrappleTether* ForTether, bool bInit);
	void UpdateOwnerSwingingVelocity();
	void UpdateOwnerMovementSpeed(struct FVector* WithCharVelocity);
	void STATIC_UpdateGrappleTetherVars(struct FGrappleTether* ForTether);
	void UpdateBrokenTethers();
	void UpdateAgainstSurfaceFromHits(TArray<struct FHitResult> Hits);
	void Tick_UpdateGrappleTethers(float DeltaTime);
	void Tick_UpdateAgainstSurface(float DeltaTime);
	bool STATIC_TetherHasValidMasterRef(struct FGrappleTether* ForTether);
	void SyncOwnerInputs(const struct FVector2D& NewInputs);
	void SyncGrappleTetherLengths();
	void SimulateTetherFriction(struct FVector* WithCharVelocity, float DeltaTime);
	void SimulateTautTetherForces(struct FVector* WithCharVelocity, float DeltaTime, float LastGravityZ);
	bool ShouldUseDynamicTetherTension(const struct FGrappleTether& ForTether);
	bool ShouldTetherBreak(struct FGrappleTether* ForTether, class APrimalCharacter* forChar, float OverrideBreakPastDist);
	bool ShouldReturnToIdleGrappleState();
	bool ShouldReplicateOwnerInputs();
	bool STATIC_ShouldOwnerBeAffectedByTether(const struct FGrappleTether& ForTether, TEnumAsByte<ShooterGame_EGrappleState> ForGrappeState);
	bool ShouldForceOwnerIntoFallingState(const struct FGrappleTether& ForTether, const struct FVector& WithOwnerVelocity, TEnumAsByte<Engine_EMovementMode> CheckMovementModeOverride);
	void SetupDelegateBindingsForChar(class APrimalCharacter* forChar, bool bDoBind);
	bool STATIC_SetGrappleTetherLength(struct FGrappleTether* ForTether, float SetNewLength, int ForTetherIndex);
	bool SetGrappleTetherAtIndexLength(int AtIndex, float SetNewLength);
	bool SetGrappleState(TEnumAsByte<ShooterGame_EGrappleState> NewGrappleState, bool bForceUpdate);
	void Server_SyncOwnerInputs(const struct FVector2D& NewInputs);
	void Server_SuggestTetherLengths(TArray<float> NewTetherLengths);
	void Server_SuggestTetherLength(float NewTetherLength);
	void Server_SetGrappleState(unsigned char NewGrappleState, bool bForceUpdate);
	void ResetOwnerVars();
	void ResetOwnerClientPositionErrorTolerance();
	bool RemoveGrappleTether(int AtIndex, const struct FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bForceNetSync, bool bRemoveAllTethersWithTag);
	void RefreshAllTetherMasterRefs();
	void ReceiveTetherLengthSuggestion(int ForTetherIndex, float NewTetherLength);
	void ReceiveTetherLengthsSuggestion(TArray<float> NewTetherLengths);
	void OnRep_ReplicatedGrappleTethers();
	void OnRep_GrappleState();
	void OnReleasedPrimalChar(class APrimalCharacter* ReleasedChar);
	void OnOwnerSleepStateChanged(class APrimalCharacter* forChar, bool bIsSleeping);
	void OnOwnerDeath(class APrimalCharacter* DyingChar);
	void OnOwnerCapsuleHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnGrappleTethersChanged();
	void OnGrappleTetherRemoved(const struct FGrappleTether& RemovedTether);
	void OnGrappleTetherBroken(int BrokenIndex);
	void OnGrappleTetherAdded(const struct FGrappleTether& AddedTether);
	void OnGrappleStateChangedNotify(unsigned char NewGrappleState, bool bIsEarlyNotify);
	void OnGrappleStateChanged();
	void OnGrappledPrimalChar(class APrimalCharacter* GrappledChar, const struct FGrappleTether& WithMasterTether);
	void OnGrappledCharSleepStateChange(class APrimalCharacter* forChar, bool bIsSleeping);
	void OnGrappledCharDeath(class APrimalCharacter* DyingChar);
	void OnAgainstValidSurfaceUpdated();
	void OnAgainstValidSurfaceStateChanged();
	void NetSyncGrappleTethers();
	void Multi_SyncGrappleTetherLengths(TArray<float> SyncedTetherLengths);
	void Multi_SyncGrappleTetherLength(float SyncedTetherLength);
	float ModifyTetherTensionLerpValue(float CurrentLerpValue);
	void ModifyTetherMoveVelocity(struct FVector* CurrentMoveVelocity, const struct FGrappleTether& ForTether);
	void ModifyOverriddenCharVelocity(struct FVector* CurrentCharVelocity, float DeltaTime);
	void ModifyGrappledCharVelocity(struct FVector* CurrentCharVelocity, const struct FGrappleTether& ForTether, float DeltaTime);
	struct FGrappleTether STATIC_MakeGrappleTether(struct FCreateGrappleTetherData* FromData, class APrimalBuff_Grappled* ForMasterBuff);
	bool IsValidSurfaceHit(const struct FHitResult& ForHit);
	bool IsValidGrappleHit(const struct FHitResult& ForHit);
	bool IsTethersMasterGrappleBuff(const struct FGrappleTether& CheckTether);
	bool IsTetherAtMaxLength(const struct FGrappleTether& ForTether);
	bool IsSwingingTowardsAxisCenter(const struct FGrappleTether& ForTether);
	bool IsOwnerLookingAtAgainstSurface();
	bool IsOwnerAgainstValidSurface();
	bool IsOwnerAboveGround(struct FVector* FoundGroundLocation, float CheckDistance);
	bool IsHitWithinGrappleRange(const struct FHitResult& ForHit);
	bool STATIC_IsGrappleTetherValid(const struct FGrappleTether& CheckTether);
	bool IsGrappledCharHardAttached(class APrimalCharacter* forChar);
	bool IsCharPastMaxTetherLength(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
	bool STATIC_InitializeGrappleTether(struct FGrappleTether* InitTether, class APrimalBuff_Grappled* ByGrappleBuff);
	void InitGrappleBuff();
	void GrappleTick(float DeltaTime);
	bool STATIC_GetTetherMasterRef(struct FGrappleTether* ForTether, struct FGrappleTether* MasterRef);
	float GetTetherBreakLimit_OwnerPastCurrentLengthForTime(const struct FGrappleTether& ForTether);
	float GetTetherBreakLimit_OwnerPastCurrentLengthDelta(const struct FGrappleTether& ForTether);
	float GetTetherBreakLimit_GrappledActorAboveVelocity(const struct FGrappleTether& ForTether);
	float STATIC_GetRequiredTetherLengthForChar(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
	struct FVector2D GetReplicatedOwnerInputs();
	struct FString STATIC_GetOwnerAppendedTetherTag(const struct FString& WithRootTag, class APrimalBuff_Grappled* OwnerGrappleBuff);
	int GetNumValidTethers(bool bOnlyReservedTethers);
	int GetNumReservedTethers();
	float GetMinTetherLength(const struct FGrappleTether& ForTether);
	float GetMaxTetherLength(const struct FGrappleTether& ForTether);
	struct FVector STATIC_GetInitGrappleAnchorRelativeOffset(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner);
	float GetGrappleVelocityDampingRate(class APrimalCharacter* forChar, const struct FGrappleTether& ForTether);
	struct FString GetGrappleTetherRootTag(const struct FString& ForTag);
	float GetGrappleTetherReleaseMaxVelocity(class APrimalCharacter* ForReleasingChar, const struct FGrappleTether& ForTether);
	float GetGrappleTetherPullMaxVelocity(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether);
	float GetGrappleTetherPullAcceleration(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether);
	struct FVector STATIC_GetGrappleAnchorWorldLocation(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner);
	struct FVector GetCurrentTetherMoveDir(const struct FGrappleTether& ForTether);
	struct FVector2D GetCurrentSwingingAxisValues();
	TEnumAsByte<ShooterGame_EGrappleState> GetCurrentGrappleState(const struct FGrappleTether& ForTether);
	float GetCharDistanceFromTetherEndRatio(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
	float STATIC_GetCharAngleToGrappleTetherEnd(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
	struct FVector GetAverageTetherEndLocation(bool bReservedTethersOnly);
	TArray<class APrimalCharacter*> GetAllCurrentGrapplers();
	class APrimalCharacter* STATIC_GetActorAttachParentChar(class AActor* forActor);
	void EndGrapple();
	bool DisplayGrappleSystemHudNotification(class AShooterPlayerController* ForPC, class AActor* FromActor, unsigned char NotificationType, int NotificationID, const struct FString& ReasonString);
	void CustomGrappleTick(float DeltaTime);
	void ClampOwnerReleasingVelocity(struct FVector* WithReleasingVelocity);
	void ClampGrappleVelocity(struct FVector* ClampVelocity);
	void CheckForTetherBreak(struct FGrappleTether* CheckTether, int WithIndex, float OverrideBreakPastDist);
	bool CheckForAutoBreakTether(const struct FGrappleTether& CheckTether);
	bool CanUpdateTetherLength(const struct FGrappleTether& ForTether, float WithLength);
	bool STATIC_CanTetherOwnerPullGrappledChar(const struct FGrappleTether& ForTether);
	bool CanSyncGrappleTetherLengths();
	bool CanReceiveNewGrappleTether(const struct FString& WithTag);
	bool CanPullChar(class APrimalCharacter* PullChar, bool bForStart);
	bool CanOwnerGrappleSwing();
	bool CanManipulateOwnerVelocity();
	bool STATIC_CanGrappleTetherAffectOwnerMovement(const struct FGrappleTether& ForTether);
	bool STATIC_CanCharControlGrappleTether(class APrimalCharacter* forChar, const struct FGrappleTether& ForTether, bool bAllowSlaveGrappleToControl);
	bool CanChangeGrappleState(unsigned char DesiredGrappleState);
	bool CanBeGrappledAgainstSurface();
	bool BreakGrappleTether(int AtIndex, const struct FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bBreakAllTethersWithTag);
	bool BreakChildTetherOnGrappledChar(const struct FGrappleTether& WithTether);
	void BreakAllTethers();
	bool BP_InterceptGrappleLogic(struct FVector* CharVelocity);
	bool AreGrappleTetherTagsEqual(const struct FString& TagA, const struct FString& TagB, bool bOnlyCompareRootTag);
	void ApplyTetherMoveVelocity(struct FVector* CurrentVelocity, float DeltaTime);
	void ApplyOwnerSwingingVelocity(struct FVector* CurrentVelocity, float DeltaTime);
	bool AllowGrappleLogic();
	void AdjustMovementVectorIfAgainstSurface(struct FVector* AdjustVector);
	int AddGrappleTether(const struct FCreateGrappleTetherData& FromData, bool bPreventNetSync, int AddAtIndex);
};

// Class ShooterGame.PrimalBuff_MissionData
// 0x0138 (FullSize[0x0AA0] - InheritedSize[0x0968])
class APrimalBuff_MissionData : public APrimalBuff
{
public:
	class AMissionType*                                ActiveMission;                                             // 0x0968(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ActiveMissionIndex;                                        // 0x0970(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_7XCE[0x4];                                     // 0x0974(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FClientMissionData>                  CurrentMissions;                                           // 0x0978(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, RepNotify, NativeAccessSpecifierPublic)
	class UParticleSystem*                             MissionIndicatorParticles;                                 // 0x0988(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	struct FString                                     NonHostPrepAreaNotification;                               // 0x0990(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      PendingMission;                                            // 0x09A0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnPlayerAddedToMission;                                    // 0x09A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerRemovedFromMission;                                // 0x09B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MissionClientDataUpdated;                                  // 0x09C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_UKCQ[0x50];                                    // 0x09D8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FClientMissionSubscriptionData>      ReplicatedMissionDataSubscriptions;                        // 0x0A28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_SITM[0x68];                                    // 0x0A38(0x0068) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalBuff_MissionData");
		return ptr;
	}



	void UnloadLevelsForMissionTag(const struct FName& MissionTag);
	void SetMissionData_Vector(const struct FName& MissionTag, const struct FName& Key, const struct FVector& Value);
	void SetMissionData_Struct(const struct FName& MissionTag, const struct FName& Key, class UProperty* Value);
	void SetMissionData_String(const struct FName& MissionTag, const struct FName& Key, const struct FString& Value);
	void SetMissionData_Rotator(const struct FName& MissionTag, const struct FName& Key, const struct FRotator& Value);
	void SetMissionData_Int(const struct FName& MissionTag, const struct FName& Key, int Value);
	void SetMissionData_Float(const struct FName& MissionTag, const struct FName& Key, float Value);
	void SetMissionData_Double(const struct FName& MissionTag, const struct FName& Key, double Value);
	void SetMissionData_Bool(const struct FName& MissionTag, const struct FName& Key, bool Value);
	void ServerRequestToggleWeapon(class AMissionType* Mission);
	void ServerRequestStartMissionWithMissionTag(const struct FName& MissionTag, class AMissionDispatcher* FromDispatcher);
	void ServerRequestStartMission(class UClass* MissionType, class AMissionDispatcher* FromDispatcher);
	void ServerRequestMissionEligibilityCheck(class AMissionDispatcher* dispatcherFilter);
	void ServerRequestEquipMissionItem(class AMissionType* Mission, const struct FItemNetID& ItemId);
	void ServerRequestCancelMission();
	void ServerMulticastRequiredProps();
	void ReplicatedMissionDataUpdated();
	void OnRep_MissionIndicatorParticles();
	void OnRep_CurrentMissions();
	void OnRep_ActiveMissionIndex();
	void OnMissionClientEvent__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission);
	void OnMissionClientDataUpdated__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff);
	void OnMissionClientBoolEvent__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission, bool bSuccess);
	void OnActiveMissionPhaseStarted(class AMissionType* Mission, const struct FName& OldPhase, const struct FName& NewPhase);
	void OnActiveMissionPhaseEnded(class AMissionType* Mission, const struct FName& OldPhase, const struct FName& NewPhase);
	void MultiUpdateMissionData_Int(const struct FName& MissionTag, const struct FName& Key, int Value);
	void MultiUpdateMissionData_Bool(const struct FName& MissionTag, const struct FName& Key, bool Value);
	void MultiClearParticleIndicator(float RemoveAfterDuration);
	void LoadLevelsForMissionTag(const struct FName& MissionTag);
	bool IsPlayerEligibleForMission_CheckFromClient(class UClass* MissionType, bool* bOutIsRecentData, struct FClientMissionEligibility* OutEligibilityData, float MaxTimeConsideredRecent, class AMissionDispatcher* dispatcherFilter);
	bool IsMissionTypeActiveWithMissionTag(const struct FName& MissionTag);
	bool IsMissionTypeActive(class UClass* MissionType, bool bExactClassMatch);
	void GetWorldIndicatorsForMission(class AMissionType* Mission, TArray<struct FMissionWorldIndicator>* WorldIndicators, bool bCompanionOnly, bool bSortByPriority);
	void GetMissionDebugData(TArray<struct FSerializedMissionData>* OutMissionData);
	bool GetMissionData_Vector(const struct FName& MissionTag, const struct FName& Key, struct FVector* OutValue);
	bool GetMissionData_Struct(const struct FName& MissionTag, const struct FName& Key, class UProperty** DestStruct);
	bool GetMissionData_String(const struct FName& MissionTag, const struct FName& Key, struct FString* OutValue);
	bool GetMissionData_Rotator(const struct FName& MissionTag, const struct FName& Key, struct FRotator* OutValue);
	bool GetMissionData_Int(const struct FName& MissionTag, const struct FName& Key, int* OutValue);
	bool GetMissionData_Float(const struct FName& MissionTag, const struct FName& Key, float* OutValue);
	bool GetMissionData_Double(const struct FName& MissionTag, const struct FName& Key, double* OutValue);
	bool GetMissionData_Bool(const struct FName& MissionTag, const struct FName& Key, bool* OutValue);
	struct FName GetBiomeMissionTag(const struct FVector& Location);
	void GetAllCurrentMissions(TArray<class AMissionType*>* OutMissions);
	class AMissionType* GetActiveMission();
	void ClientUnloadMissionLevels(const struct FName& MissionTag);
	void ClientSpawnEmitter(class UClass* EmitterType, const struct UObject_FTransform& EmitterTransform, float EmitterLifespan);
	void ClientSendMissionNotification(class AMissionType* FromMission, const struct FName& NotificationTag, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* MessageSound);
	void ClientSendMissionAlert(TEnumAsByte<ShooterGame_EMissionAlertType> AlertType, const struct FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* Sound, bool FlyoutFromTop);
	void ClientMissionEvent(class AMissionType* Mission, bool bMissionStarted, bool bMissionCompletedSuccessfully);
	void ClientMissionEligibilityResponse(TArray<struct FMissionEligibilityData> EligibilityData);
	void ClientLoadMissionLevels(const struct FName& MissionTag);
	void AutoHideIndicatorParticles();
};

// Class ShooterGame.PrimalEngramEntry
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UPrimalEngramEntry : public UObject
{
public:
	unsigned char                                      UnknownData_UA9K[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RequiredCharacterLevel;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                RequiredEngramPoints;                                      // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bGiveBlueprintToPlayerInventory : 1;                       // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCanBeManuallyUnlocked : 1;                                // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsSPlusEngram : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceIsTekEngram : 1;                                     // 0x0058(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_RQEU[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BluePrintEntry;                                            // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     ExtraEngramDescription;                                    // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngramEntries>                      EngramRequirementSets;                                     // 0x0078(0x0010) (Edit, ZeroConstructor)
	int                                                MyEngramIndex;                                             // 0x0088(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_EEngramGroup>              EngramGroup;                                               // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UXMK[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalEngramEntry");
		return ptr;
	}



};

// Class ShooterGame.PrimalGlobalUIData
// 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
class UPrimalGlobalUIData : public UObject
{
public:
	struct FLinearColor                                StatusColorGood;                                           // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                StatusColorWarning;                                        // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                StatusColorBad;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  RightMouseButtonIcon;                                      // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  LeftMouseButtonIcon;                                       // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadLeftBumper;                                         // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadRightBumper;                                        // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  LeftTriggerIcon;                                           // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  RightTriggerIcon;                                          // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonBottom;                                   // 0x0088(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonTop;                                      // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonLeft;                                     // 0x0098(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GamepadFaceButtonRight;                                    // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DPadUpIcon;                                                // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DPadDownIcon;                                              // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DPadLeftIcon;                                              // 0x00B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DPadRightIcon;                                             // 0x00C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  RightThumbstickIcon;                                       // 0x00C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  LeftThumbstickIcon;                                        // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SpecialLeftIcon;                                           // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SpecialRightIcon;                                          // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MutagenIcon;                                               // 0x00E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MutagenGoodToGreatThreshold;                               // 0x00F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MutagenGoodColor;                                          // 0x00F4(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MutagenGreatColor;                                         // 0x0104(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FJSZ[0x4];                                     // 0x0114(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalGlobalUIData");
		return ptr;
	}



};

// Class ShooterGame.PrimalHarvestingComponent
// 0x0178 (FullSize[0x0250] - InheritedSize[0x00D8])
class UPrimalHarvestingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_6QFO[0x10];                                    // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FHarvestResourceEntry>               HarvestResourceEntries;                                    // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FHarvestResourceEntry>               BaseHarvestResourceEntries;                                // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDamageHarvestingEntry>              HarvestDamageTypeEntries;                                  // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxHarvestHealth;                                          // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C9ZL[0x4];                                     // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HarvestHealthGiveResourceInterval;                         // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CurrentHarvestHealth;                                      // 0x0124(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               bIsUnharvestable;                                          // 0x0128(0x0001) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DC9Z[0x3];                                     // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bSetOwnerHealthToHarvestHealth : 1;                        // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsableHarvesting : 1;                                     // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowForcedRepopulation : 1;                              // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowHarvestHealthScaling : 1;                            // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsableAllowHarvestHealthScaling : 1;                      // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNonBlockingUsableHarvesting : 1;                          // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClampResourceHarvestDamage : 1;                           // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDefaultHarvestingComponent : 1;                         // 0x012C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsSingleUnitHarvest : 1;                                  // 0x012D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAssignedToTribeHarvestOnly : 1;                           // 0x012D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRecieveComponentDamage : 1;                          // 0x012D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_LVJV[0x2];                                     // 0x012E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AssignedToTribeID;                                         // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseHarvestDamageAmount;                                    // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      UseHarvestDamageType;                                      // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     DescriptiveName;                                           // 0x0140(0x0010) (Edit, ZeroConstructor)
	struct FString                                     UseHarvestString;                                          // 0x0150(0x0010) (Edit, ZeroConstructor)
	struct FString                                     UnequipWeaponToUseHarvestString;                           // 0x0160(0x0010) (Edit, ZeroConstructor)
	float                                              UsableHarvestSphereRadius;                                 // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               ShouldReplenish;                                           // 0x0174(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UMSJ[0x3];                                     // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinPlayerDistanceReplenishing;                             // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinStructureDistanceReplenishing;                          // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinNonCoreStructureDistanceReplenishing;                   // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BaseMinTimeAfterDepletionReplenishing;                     // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BaseMaxTimeAfterDepletionReplenishing;                     // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExhaustedDepletionTimeInterval;                            // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExhaustedDepletionPower;                                   // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExhaustedDepletionEffectScale;                             // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReduceExhaustedDepletionSpeed;                             // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AutoReplenishInterval;                                     // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AutoReplenishPercent;                                      // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DamageInstigatorAmount;                                    // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                GiveItemEntriesMin;                                        // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                GiveItemEntriesMax;                                        // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedDinoHarvestGiveHealthMultiplier;                      // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L18K[0xC];                                     // 0x01B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnItemHarvested;                                           // 0x01C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     UIStringIMeleeHitToHarvest;                                // 0x01D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     UIStringHarvestRequiresTool;                               // 0x01E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     UIStringCantHarvestUnderwater;                             // 0x01F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DinoHarvestGiveHealthAmount;                               // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoHarvestGiveHealthSpeed;                                // 0x0204(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                DinoHarvestGiveHealthDescriptionIndex;                     // 0x0208(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1MBB[0xC];                                     // 0x020C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ForceAllowMeleeHarvestingOverrides;                        // 0x0218(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              HarvestingPriority;                                        // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_40SQ[0x4];                                     // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FComponentAttachmentEntry>           AdditionalComponentAttachments;                            // 0x0230(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FComponentAttachmentEntry>           AdditionalComponentAttachmentsDedicated;                   // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalHarvestingComponent");
		return ptr;
	}



	void OnItemHarvested__DelegateSignature(class AActor* Harvester, class UPrimalItem* HarvestedItem, int ItemQuantity);
	void BPRecieveComponentDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	int BPCustomHarvestResource(class UPrimalInventoryComponent* invComp, int NumToGive, class UClass* DamageTypeClass, class AActor* ToActor);
};

// Class ShooterGame.PrimalInventoryComponent_Static
// 0x0000 (FullSize[0x0590] - InheritedSize[0x0590])
class UPrimalInventoryComponent_Static : public UPrimalInventoryComponent
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalInventoryComponent_Static");
		return ptr;
	}



};

// Class ShooterGame.PrimalItem_CruiseMissile
// 0x0000 (FullSize[0x0AD8] - InheritedSize[0x0AD8])
class UPrimalItem_CruiseMissile : public UPrimalItem
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItem_CruiseMissile");
		return ptr;
	}



};

// Class ShooterGame.PrimalItem_Dye
// 0x0020 (FullSize[0x0AF8] - InheritedSize[0x0AD8])
class UPrimalItem_Dye : public UPrimalItem
{
public:
	struct FLinearColor                                DyeColor;                                                  // 0x0AD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DyeUISceneTemplate;                                        // 0x0AE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GDNA[0x8];                                     // 0x0AF0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItem_Dye");
		return ptr;
	}



};

// Class ShooterGame.PrimalItem_Radio
// 0x0010 (FullSize[0x0AE8] - InheritedSize[0x0AD8])
class UPrimalItem_Radio : public UPrimalItem
{
public:
	unsigned char                                      bAllowVoice : 1;                                           // 0x0AD8(0x0001) BIT_FIELD (SaveGame, NoDestructor)
	unsigned char                                      UnknownData_LZSV[0x7];                                     // 0x0AD9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  SetFrequencySound;                                         // 0x0AE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItem_Radio");
		return ptr;
	}



};

// Class ShooterGame.PrimalNoClimbingVolume
// 0x0000 (FullSize[0x04A8] - InheritedSize[0x04A8])
class APrimalNoClimbingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalNoClimbingVolume");
		return ptr;
	}



};

// Class ShooterGame.PrimalRichTextBlock
// 0x01A8 (FullSize[0x0330] - InheritedSize[0x0188])
class UPrimalRichTextBlock : public UWidget
{
public:
	struct FText                                       Text;                                                      // 0x0188(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData_7BGD[0x10];                                    // 0x0188(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             TextDelegate;                                              // 0x01B0(0x0010) (ZeroConstructor, InstancedReference, NoDestructor)
	TEnumAsByte<Slate_ETextJustify>                    Justification;                                             // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               AutoWrapText;                                              // 0x01C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K2N4[0x2];                                     // 0x01C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WrapTextAt;                                                // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               CenterVertically;                                          // 0x01C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I2IR[0x3];                                     // 0x01C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMargin                                     Margin;                                                    // 0x01CC(0x0010) (Edit, DisableEditOnInstance, AdvancedDisplay)
	float                                              LineHeightPercentage;                                      // 0x01DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FTextBlockStyle                             WidgetStyle;                                               // 0x01E0(0x0118) (Edit, BlueprintVisible)
	TArray<struct FPrimalTextStyle>                    TextStyles;                                                // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FPrimalImageStyle>                   ImageStyles;                                               // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_WUUF[0x18];                                    // 0x0318(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalRichTextBlock");
		return ptr;
	}



	void SetText(const struct FText& InText, bool bDoParse);
	void SetString(const struct FString& InString);
	struct FText GetText();
};

// Class ShooterGame.PrimalStaticData_MissionCompanionData
// 0x03F8 (FullSize[0x0420] - InheritedSize[0x0028])
class UPrimalStaticData_MissionCompanionData : public UPrimalStaticData
{
public:
	unsigned char                                      UnknownData_R4WZ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPointOfInterestData_ForCompanion           MissionPointOfInterestData;                                // 0x0030(0x03F0) (Edit, BlueprintReadOnly, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStaticData_MissionCompanionData");
		return ptr;
	}



};

// Class ShooterGame.PrimalStaticData_MissionCompanionReactionData
// 0x01E0 (FullSize[0x0208] - InheritedSize[0x0028])
class UPrimalStaticData_MissionCompanionReactionData : public UPrimalStaticData
{
public:
	struct FCompanionReactionData                      ReactionData_MissionStart;                                 // 0x0028(0x00A0) (Edit, BlueprintReadOnly, DisableEditOnInstance)
	struct FCompanionReactionData                      ReactionData_MissionEnd_Success;                           // 0x00C8(0x00A0) (Edit, BlueprintReadOnly, DisableEditOnInstance)
	struct FCompanionReactionData                      ReactionData_MissionEnd_Failure;                           // 0x0168(0x00A0) (Edit, BlueprintReadOnly, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStaticData_MissionCompanionReactionData");
		return ptr;
	}



};

// Class ShooterGame.PrimalStructurePlacer
// 0x00A0 (FullSize[0x0510] - InheritedSize[0x0470])
class APrimalStructurePlacer : public AInfo
{
public:
	TArray<class UClass*>                              PlaceableStructures;                                       // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<ShooterGame_EPrimalStructurePlacerState> CurrentState;                                              // 0x0480(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_7YQN[0x3];                                     // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CurrentPlacingStructureIndex;                              // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected)
	class APrimalStructure*                            CurrentPlacingStructure;                                   // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bDebugStructures : 1;                                      // 0x0490(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, Transient, NoDestructor, Protected)
	unsigned char                                      bForceDisplayMissionAreaStructureNoBuildZones : 1;         // 0x0490(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_TTSH[0x3];                                     // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       RotationAxisName;                                          // 0x0494(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotationSpeed;                                             // 0x049C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AltRotationAxisName;                                       // 0x04A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AltRotationSpeed;                                          // 0x04A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HIJ4[0x4];                                     // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCanvasIcon                                 RotationIcon;                                              // 0x04B0(0x0018) (Edit, DisableEditOnInstance)
	float                                              RotationIconSize;                                          // 0x04C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotationIconScale;                                         // 0x04CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_46MK[0x40];                                    // 0x04D0(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructurePlacer");
		return ptr;
	}



	void SetForceDisplayMissionAreaStructureNoBuildZones(bool bForceDisplay);
	void SetChoosingRotation(bool bNewChoosingRotation);
	bool IsPlacingActive();
	void GetLastPlacementProperties(struct FVector* OutLastHitLoc, struct FRotator* OutLastHitRot, struct FRotator* OutLastViewRot);
	void DrawStructurePreviewHUD(class AShooterHUD* HUD, class APrimalStructure* PlacingStructure);
};

// Class ShooterGame.PrimalStructureSettings
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UPrimalStructureSettings : public UObject
{
public:
	TArray<struct FDamageTypeAdjuster>                 BaseDamageTypeAdjusters;                                   // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDamageTypeAdjuster>                 ExtraDamageTypeAdjusters;                                  // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DecayDestructionPeriodMultiplier;                          // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U5A9[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSettings");
		return ptr;
	}



};

// Class ShooterGame.PrimalSupplyCrateItemSet
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UPrimalSupplyCrateItemSet : public UObject
{
public:
	struct FSupplyCrateItemSet                         ItemSet;                                                   // 0x0028(0x0040) (Edit)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalSupplyCrateItemSet");
		return ptr;
	}



};

// Class ShooterGame.PrimalSupplyCrateItemSets
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPrimalSupplyCrateItemSets : public UObject
{
public:
	TArray<struct FSupplyCrateItemSet>                 ItemSets;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalSupplyCrateItemSets");
		return ptr;
	}



};

// Class ShooterGame.PrimalStructureBearTrap
// 0x00A8 (FullSize[0x0B90] - InheritedSize[0x0AE8])
class APrimalStructureBearTrap : public APrimalStructure
{
public:
	class USkeletalMeshComponent*                      TrapSK;                                                    // 0x0AE8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USphereComponent*                            TriggerComponent;                                          // 0x0AF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USoundCue*                                   TrapTriggerSound;                                          // 0x0AF8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      TrapDamageType;                                            // 0x0B00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TrapMinPawnMass;                                           // 0x0B08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TrapMaxPawnMass;                                           // 0x0B0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TrapDamageAmount;                                          // 0x0B10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PeriodicalTrapDamageTime;                                  // 0x0B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PeriodicalTrapDamageAmount;                                // 0x0B18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IgnoreTriggerAfterSpawnTime;                               // 0x0B1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               IgnoreDinosWithCustomTag;                                  // 0x0B20(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ForceImmobilizeDinosWithCustomTag;                         // 0x0B30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              HealthDecreasePerSecPlayers;                               // 0x0B40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HealthDecreasePerSecWild;                                  // 0x0B44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bImmuneToNormalDamage;                                     // 0x0B48(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8G2C[0x7];                                     // 0x0B49(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalCharacter*                            ImmobilizedCharacter;                                      // 0x0B50(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	int8_t                                             CurrentTrapState;                                          // 0x0B58(0x0001) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	int8_t                                             ClientPrevTrapState;                                       // 0x0B59(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bClosedTrap;                                               // 0x0B5A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RB3W[0x1];                                     // 0x0B5B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              HealthDecreasePerSec;                                      // 0x0B5C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             DestroyTime;                                               // 0x0B60(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              DestroyAfterTime;                                          // 0x0B68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseOnlyOnNonAllied;                                       // 0x0B6C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SITR[0x3];                                     // 0x0B6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              DamagedOnlyBy;                                             // 0x0B70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystem*                             OnDestroyFX;                                               // 0x0B80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bBPUseNotifyImmobilizedCharacterIsDeadOrInConscious : 1;   // 0x0B88(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_D2XJ[0x7];                                     // 0x0B89(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureBearTrap");
		return ptr;
	}



	void TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void PeriodicalTrapDamageTimer();
	void OnRep_CurrentTrapState();
	void NetGotoTrapState(int8_t TrapState);
	bool IsTrapPrepared(float AnimSetupTime);
	void HideAnimatedSK();
	void DecreaseDamageTimer();
	void BPNotifyImmobilizedCharacterIsDeadOrInConscious(bool IsDead, bool IsConscious);
};

// Class ShooterGame.PrimalStructureDoor
// 0x0088 (FullSize[0x0B70] - InheritedSize[0x0AE8])
class APrimalStructureDoor : public APrimalStructure
{
public:
	class USceneComponent*                             MyDoorTransform;                                           // 0x0AE8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	float                                              RotationSpeed;                                             // 0x0AF0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U3T0[0x4];                                     // 0x0AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   DoorOpenSound;                                             // 0x0AF8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                                   DoorCloseSound;                                            // 0x0B00(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint32_t                                           CurrentPinCode;                                            // 0x0B08(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bInvertOpenCloseDirection : 1;                             // 0x0B0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsLocking : 1;                                      // 0x0B0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseSecondDoor : 1;                                        // 0x0B0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsPinLocking : 1;                                   // 0x0B0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsLocked : 1;                                             // 0x0B0C(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsPinLocked : 1;                                          // 0x0B0C(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bAdminOnlyAccess : 1;                                      // 0x0B0C(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bCanBeForcedOpenByDino : 1;                                // 0x0B0C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventBasingWhileMoving : 1;                             // 0x0B0D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDoorOpenIn : 1;                                      // 0x0B0D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceDoorOpenOut : 1;                                     // 0x0B0D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDoorMoving : 1;                                         // 0x0B0D(0x0001) BIT_FIELD (Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor)
	unsigned char                                      bForceStaticMobility : 1;                                  // 0x0B0D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRotatePitch : 1;                                          // 0x0B0D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRotateRoll : 1;                                           // 0x0B0D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRotateYaw : 1;                                            // 0x0B0D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInitializedRotation : 1;                                  // 0x0B0E(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bPreventDoorInterpolation : 1;                             // 0x0B0E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPGotoDoorState : 1;                                   // 0x0B0E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KFXA[0x1];                                     // 0x0B0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceNoPinLocking : 1;                                    // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_SOXZ[0x3];                                     // 0x0B11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DoorStateChangeIgnoreEncroachmentInterval;                 // 0x0B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int8_t                                             DoorOpenState;                                             // 0x0B18(0x0001) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_IKUV[0x17];                                    // 0x0B19(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    SecondDoorDefaultRot;                                      // 0x0B30(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CurrentDoorAngle;                                          // 0x0B3C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UnlockDoorSound;                                           // 0x0B40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LockDoorSound;                                             // 0x0B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LockedSound;                                               // 0x0B50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastPinOpenSuccessTime;                                    // 0x0B58(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3X01[0x10];                                    // 0x0B60(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureDoor");
		return ptr;
	}



	void OnRep_DoorOpenState(int8_t PrevDoorOpenState);
	void NetGotoDoorState(int8_t DoorState);
	bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
	int GetDoorState();
	void DelayedGotoDoorStateTimer();
	bool CanOpen(class APlayerController* ForPC);
	void BPSetDoorState(int DoorState);
	void BPGotoDoorState(int NewDoorState);
};

// Class ShooterGame.PrimalStructureSkeletalDoor
// 0x0020 (FullSize[0x0B90] - InheritedSize[0x0B70])
class APrimalStructureSkeletalDoor : public APrimalStructureDoor
{
public:
	class USkeletalMeshComponent*                      SkeletalDoorComponent;                                     // 0x0B70(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor)
	class UShapeComponent*                             DoorCollisionComponent;                                    // 0x0B78(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor)
	class UShapeComponent*                             TriggerComponent;                                          // 0x0B80(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffToApplyWhenInsideStructure;                            // 0x0B88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSkeletalDoor");
		return ptr;
	}



	void OnEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	int GetDoorOpenState();
};

// Class ShooterGame.PrimalStructureElevatorPlatform
// 0x00B0 (FullSize[0x0B98] - InheritedSize[0x0AE8])
class APrimalStructureElevatorPlatform : public APrimalStructure
{
public:
	float                                              MaxCarryWeight;                                            // 0x0AE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              Speed;                                                     // 0x0AEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DownSpeed;                                                 // 0x0AF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClientLocationInterpSpeed;                                 // 0x0AF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClientLocationInterpSpeedDown;                             // 0x0AF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UpObstructionTraceLength;                                  // 0x0AFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DownObstructionTraceLength;                                // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TrackTraceLength;                                          // 0x0B04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TraceExtent;                                               // 0x0B08(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5O5S[0x4];                                     // 0x0B14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  StartMovingSound;                                          // 0x0B18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  StopMovingSound;                                           // 0x0B20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DistanceToTravel;                                          // 0x0B28(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MaxDistanceToTravel;                                       // 0x0B2C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     StartLocation;                                             // 0x0B30(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsActivated : 1;                                          // 0x0B3C(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_05Z9 : 1;                                      // 0x0B3C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUpdateLocation : 1;                                       // 0x0B3C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_Y21B[0x3];                                     // 0x0B3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class APrimalCharacter>>     CarriedActors;                                             // 0x0B40(0x0010) (Net, ZeroConstructor, Transient)
	TEnumAsByte<ShooterGame_EPrimalStructureElevatorState> CurrentState;                                              // 0x0B50(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ICZ0[0x3];                                     // 0x0B51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TraveledDistance;                                          // 0x0B54(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CurrentLiftedWeight;                                       // 0x0B58(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bUseBPElevatorStopped;                                     // 0x0B5C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MKY2[0x1B];                                    // 0x0B5D(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinHeight;                                                 // 0x0B78(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MaxHeight;                                                 // 0x0B7C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              Height;                                                    // 0x0B80(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ReplicatedZ;                                               // 0x0B84(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bAddElevatorMultiUseEntries : 1;                           // 0x0B88(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsLocked : 1;                                             // 0x0B88(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsPinLocked : 1;                                          // 0x0B88(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bAdminOnlyAccess : 1;                                      // 0x0B88(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_T2TD[0x3];                                     // 0x0B89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           CurrentPinCode;                                            // 0x0B8C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ODOI[0x8];                                     // 0x0B90(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureElevatorPlatform");
		return ptr;
	}



	void ServerActivate(class APlayerController* ForPC, bool bForceDirection, TEnumAsByte<ShooterGame_EPrimalStructureElevatorState> Dir);
	bool PlatformIsActive(TEnumAsByte<ShooterGame_EPrimalStructureElevatorState>* Direction);
	void OnRep_bIsActivated();
	bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
	bool HasReachedMaxWeight();
	float GetTrackHeight();
	float GetCurrentLiftedWeight();
	void GetAllTrackStructures(TArray<class AActor*>* Tracks);
	void Deactivate(bool bSwitchDirection);
	void BPElevatorStopped(bool bSwitchedDirection, TEnumAsByte<ShooterGame_EPrimalStructureElevatorState> NewDirection);
	void Activate(class APlayerController* ForPC, bool bForceDirection, TEnumAsByte<ShooterGame_EPrimalStructureElevatorState> Dir, float DistanceToTravelOverride);
};

// Class ShooterGame.PrimalStructureExplosive
// 0x00A0 (FullSize[0x0B88] - InheritedSize[0x0AE8])
class APrimalStructureExplosive : public APrimalStructure
{
public:
	uint32_t                                           ConstructorPlayerDataID;                                   // 0x0AE8(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_Y7YQ[0x4];                                     // 0x0AEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterCharacter*                           ConstructorPawn;                                           // 0x0AF0(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, Protected)
	int                                                ConstructorTargetingTeam;                                  // 0x0AF8(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_B6NG : 1;                                      // 0x0AFC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAnimatePlacement : 1;                                     // 0x0AFC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_8BAO[0x3];                                     // 0x0AFD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ExplosiveLocOffset;                                        // 0x0B00(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FRotator                                    ExplosiveRotOffset;                                        // 0x0B0C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              PlacementInitialSpeed;                                     // 0x0B18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              PlacementMaxSpeed;                                         // 0x0B1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              PlacementAccel;                                            // 0x0B20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionDamage;                                           // 0x0B24(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionRadius;                                           // 0x0B28(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionImpulse;                                          // 0x0B2C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      ExplosionDamageType;                                       // 0x0B30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      ExplosiveAmmoItemTemplate;                                 // 0x0B38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bAlertDinos : 1;                                           // 0x0B40(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_QYL0[0x3];                                     // 0x0B41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlertDinosRange;                                           // 0x0B44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      PickupItemClass;                                           // 0x0B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	int                                                PickUpQuantity;                                            // 0x0B50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_WVRF[0x4];                                     // 0x0B54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        AnimatedComponent;                                         // 0x0B58(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_U3JS[0x28];                                    // 0x0B60(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureExplosive");
		return ptr;
	}



	void NetIgnoreDestructionEvents();
	void ApplyPlacementPreview();
};

// Class ShooterGame.PrimalStructureExplosiveTransGPS
// 0x0020 (FullSize[0x0BA8] - InheritedSize[0x0B88])
class APrimalStructureExplosiveTransGPS : public APrimalStructureExplosive
{
public:
	float                                              CurrentFrequency;                                          // 0x0B88(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FName                                       InSocketName;                                              // 0x0B8C(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_88HD[0x4];                                     // 0x0B94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint64_t                                           PlayerDataID;                                              // 0x0B98(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class APrimalStructureItemContainer*               AttachedToStructure;                                       // 0x0BA0(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureExplosiveTransGPS");
		return ptr;
	}



	void NetSetLocation(const struct FVector& NewLocation);
};

// Class ShooterGame.PrimalStructureTripwire
// 0x0060 (FullSize[0x0BE8] - InheritedSize[0x0B88])
class APrimalStructureTripwire : public APrimalStructureExplosive
{
public:
	class UParticleSystemComponent*                    WireComponent;                                             // 0x0B88(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	class UBoxComponent*                               TriggerComponent;                                          // 0x0B90(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	struct FRotator                                    CableRotOffset;                                            // 0x0B98(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              MaximumCableLength;                                        // 0x0BA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bOnlyPrimalCharacters : 1;                                 // 0x0BA8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bIgnoreAllies : 1;                                         // 0x0BA8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bNotifyTripChat : 1;                                       // 0x0BA8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bShowingWireComponent : 1;                                 // 0x0BA8(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bForceIgnoreAllies : 1;                                    // 0x0BA8(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, Protected, PersistentInstance)
	unsigned char                                      bForceIgnoreWildDinos : 1;                                 // 0x0BA8(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, Protected, PersistentInstance)
	unsigned char                                      bDoingWireCheck : 1;                                       // 0x0BA8(0x0001) BIT_FIELD (SaveGame, NoDestructor, Protected)
	unsigned char                                      bUnwiredTrap : 1;                                          // 0x0BA8(0x0001) BIT_FIELD (Net, SaveGame, RepNotify, NoDestructor, Protected, PersistentInstance)
	unsigned char                                      bAllowToggleForceIgnoreAllies : 1;                         // 0x0BA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bAllowToggleForceIgnoreWildDinos : 1;                      // 0x0BA9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_41DW[0x6];                                     // 0x0BAA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  NotifyTripChatSound;                                       // 0x0BB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FString                                     BoxName;                                                   // 0x0BB8(0x0010) (Net, ZeroConstructor, SaveGame, Protected, PersistentInstance)
	class APrimalStructureTripwire*                    ConnectedTo;                                               // 0x0BC8(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, PersistentInstance)
	int                                                OwnerTargetingTeam;                                        // 0x0BD0(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_QRK1[0x14];                                    // 0x0BD4(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureTripwire");
		return ptr;
	}



	void WireCheck();
	void TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_UnwiredTrap();
	void OnRep_ConnectedTo();
	void NetUpdateBoxName(const struct FString& NewName);
	void DisconnectMe();
};

// Class ShooterGame.PrimalStructureElevatorTrack
// 0x0010 (FullSize[0x0E20] - InheritedSize[0x0E10])
class APrimalStructureElevatorTrack : public APrimalStructureItemContainer
{
public:
	bool                                               bHasBase;                                                  // 0x0E10(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DL9M[0x3];                                     // 0x0E11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APrimalStructureElevatorPlatform> ElevatorBase;                                              // 0x0E14(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bRequiresPower : 1;                                        // 0x0E1C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAddElevatorMultiUseEntries : 1;                           // 0x0E1C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_YT2L[0x3];                                     // 0x0E1D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureElevatorTrack");
		return ptr;
	}



	bool HasPlatformAttachedToTheTrack();
	void ClientHasPlatform();
	class APrimalStructureElevatorPlatform* BPGetElevatorPlatform();
};

// Class ShooterGame.PrimalStructureItemContainer_CropPlot
// 0x00F0 (FullSize[0x0F00] - InheritedSize[0x0E10])
class APrimalStructureItemContainer_CropPlot : public APrimalStructureItemContainer
{
public:
	class UClass*                                      SeedBaseItemTemplate;                                      // 0x0E10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FertilizerBaseItemTemplate;                                // 0x0E18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      WaterNearbyStructureTemplate;                              // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropRefreshIntervalMin;                                    // 0x0E28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropRefreshIntervalMax;                                    // 0x0E2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WaterNearbyStructureRange;                                 // 0x0E30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxWaterAmount;                                            // 0x0E34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ActiveRainWaterIncreaseSpeed;                              // 0x0E38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AverageRainWaterIncreaseMultiplier;                        // 0x0E3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WaterItemAmountMultiplier;                                 // 0x0E40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     ExtraCropMeshScale;                                        // 0x0E44(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropRefreshInterval;                                       // 0x0E50(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CropPhaseFertilizerCache;                                  // 0x0E54(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CropFruitFertilizerCache;                                  // 0x0E58(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bUsesCrop : 1;                                             // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowAnyWaterSource : 1;                                  // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGainWaterOverTime : 1;                                    // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoFill : 1;                                             // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontAddWaterOnInventoryItemUsed : 1;                      // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowOpenToSky : 1;                                       // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetAdditionalGrowthMultiplier : 1;                   // 0x0E5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsFertilized : 1;                                         // 0x0E5C(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsWatered : 1;                                            // 0x0E5D(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bIsSeeded : 1;                                             // 0x0E5D(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      bHasFruitItems : 1;                                        // 0x0E5D(0x0001) BIT_FIELD (Net, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bCropUsesGreenhouse : 1;                                   // 0x0E5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowWaterAmount : 1;                                      // 0x0E5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	TEnumAsByte<ShooterGame_ESeedCropPhase>            CurrentCropPhase;                                          // 0x0E5E(0x0001) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_KJM5[0x1];                                     // 0x0E5F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PlantedCrop;                                               // 0x0E60(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	TWeakObjectPtr<class APrimalStructureItemContainer> IrrigationWaterTap;                                        // 0x0E68(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastCropRefreshTime;                                       // 0x0E70(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R3Q2[0x10];                                    // 0x0E78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshComponent*>                MyCropMeshes;                                              // 0x0E88(0x0010) (ExportObject, ZeroConstructor, SaveGame, ContainsInstancedReference)
	class APrimalStructure*                            MyCropStructure;                                           // 0x0E98(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             CropRefreshTimeCache;                                      // 0x0EA0(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                FertilizerAmount;                                          // 0x0EA8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, PersistentInstance)
	float                                              WaterAmount;                                               // 0x0EAC(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      NumGreenHouseStructures;                                   // 0x0EB0(0x0001) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_WJX4[0x7];                                     // 0x0EB1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              WateringItemTemplates;                                     // 0x0EB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              FertilizerConsumptionRateMultiplier;                       // 0x0EC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XGRD[0xC];                                     // 0x0ECC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      WateredOverridesCraftingItemTemplate;                      // 0x0ED8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinWateredOverridesCrafting;                               // 0x0EE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxGreenHouseStructures;                                   // 0x0EE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxGreenHouseCropGrowthMultiplier;                         // 0x0EE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GainWaterRate;                                             // 0x0EEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YKLG[0x8];                                     // 0x0EF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CropMaxFruitsMultiplier;                                   // 0x0EF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7N79[0x4];                                     // 0x0EFC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer_CropPlot");
		return ptr;
	}



	void RemovePlantedCrop();
	void OnRep_PlantedCrop(class UClass* PrevPlantedCrop);
	void OnRep_HasFruitItems(bool bPreviousHasFruitItems);
	void OnRep_CurrentCropPhase(TEnumAsByte<ShooterGame_ESeedCropPhase> PrevCropPhase);
	float BPGetAdditionalGrowthMultiplier();
	void AutoWaterRefreshCrop();
	float AddWater(float amount, bool bAllowNetworking);
};

// Class ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems
// 0x0030 (FullSize[0x0F30] - InheritedSize[0x0F00])
class APrimalStructureItemContainer_CropPlot_VisualItems : public APrimalStructureItemContainer_CropPlot
{
public:
	class UStaticMeshComponent*                        MyExtraStaticMesh;                                         // 0x0F00(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 ExtraStaticMesh_NoItems;                                   // 0x0F08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 ExtraStaticMesh_HasItems;                                  // 0x0F10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ItemClassesToCheck;                                        // 0x0F18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bHasItems : 1;                                             // 0x0F28(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bDoItemVisuals : 1;                                        // 0x0F28(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_NUWL[0x7];                                     // 0x0F29(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems");
		return ptr;
	}



	void OnRep_HasItems();
	void BPUpdateItemVisuals();
};

// Class ShooterGame.PrimalStructureItemContainer_SupplyCrate
// 0x00A0 (FullSize[0x0EB0] - InheritedSize[0x0E10])
class APrimalStructureItemContainer_SupplyCrate : public APrimalStructureItemContainer
{
public:
	float                                              MinItemSets;                                               // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxItemSets;                                               // 0x0E14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NumItemSetsPower;                                          // 0x0E18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bSetsRandomWithoutReplacement;                             // 0x0E1C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VEQB[0x3];                                     // 0x0E1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinQualityMultiplier;                                      // 0x0E20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxQualityMultiplier;                                      // 0x0E24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AboveOneExtraQualityMultiplier;                            // 0x0E28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B7HY[0x4];                                     // 0x0E2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupplyCrateItemSet>                 ItemSets;                                                  // 0x0E30(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      ItemSetsOverride;                                          // 0x0E40(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FSupplyCrateItemSet>                 AdditionalItemSets;                                        // 0x0E48(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      AdditionalItemSetsOverride;                                // 0x0E58(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                RequiredLevelToAccess;                                     // 0x0E60(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxLevelToAccess;                                          // 0x0E64(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InitialTimeToLoseHealth;                                   // 0x0E68(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalTimeToLoseHealth;                                  // 0x0E6C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalPercentHealthToLose;                               // 0x0E70(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bGeneratedCrateItems : 1;                                  // 0x0E74(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bIsBonusCrate : 1;                                         // 0x0E74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsQuestCrate : 1;                                         // 0x0E74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSpawnCrateOnTopOfStructures : 1;                          // 0x0E74(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAppliedBuff : 1;                                          // 0x0E74(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      UnknownData_VMVA[0x3];                                     // 0x0E75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class ASupplyCrateSpawningVolume>   LinkedToCrateSpawnVolume;                                  // 0x0E78(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<TWeakObjectPtr<class APrimalDinoCharacter>> LinkedNPCs;                                                // 0x0E80(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_KL9H[0xC];                                     // 0x0E90(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     SpawnInInDamageCollisionBoxExtent;                         // 0x0E9C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsUnderWaterCrate;                                        // 0x0EA8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4QD7[0x7];                                     // 0x0EA9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer_SupplyCrate");
		return ptr;
	}



	void StartLosingHealth();
	void SetAppliedBuff(bool bSet);
	void LoseHealth();
};

// Class ShooterGame.PrimalStructureItemContainer_HordeCrate
// 0x0018 (FullSize[0x0EC8] - InheritedSize[0x0EB0])
class APrimalStructureItemContainer_HordeCrate : public APrimalStructureItemContainer_SupplyCrate
{
public:
	class UMaterialInterface*                          ElementPostProcessMaterial;                                // 0x0EB0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     CrateLoc;                                                  // 0x0EB8(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_36XO[0x4];                                     // 0x0EC4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer_HordeCrate");
		return ptr;
	}



	void SpawnElementNodePostProcess();
};

// Class ShooterGame.PrimalStructureItemContainer_VisualItems
// 0x0030 (FullSize[0x0E40] - InheritedSize[0x0E10])
class APrimalStructureItemContainer_VisualItems : public APrimalStructureItemContainer
{
public:
	class UStaticMeshComponent*                        MyExtraStaticMesh;                                         // 0x0E10(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 ExtraStaticMesh_NoItems;                                   // 0x0E18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 ExtraStaticMesh_HasItems;                                  // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              ItemClassesToCheck;                                        // 0x0E28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bIgnoreBlueprints;                                         // 0x0E38(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreEngrams;                                            // 0x0E39(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasItems : 1;                                             // 0x0E3A(0x0001) BIT_FIELD (BlueprintVisible, Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bDoItemVisuals : 1;                                        // 0x0E3A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreviousHasItems : 1;                                     // 0x0E3A(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_IVO7[0x5];                                     // 0x0E3B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureItemContainer_VisualItems");
		return ptr;
	}



	void UpdateVisuals();
	void OnRep_HasItems();
	void BPUpdateItemVisuals();
};

// Class ShooterGame.PrimalStructureKeypad
// 0x0010 (FullSize[0x0E20] - InheritedSize[0x0E10])
class APrimalStructureKeypad : public APrimalStructureItemContainer
{
public:
	float                                              DoorActivationRange;                                       // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MMS7[0xC];                                     // 0x0E14(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureKeypad");
		return ptr;
	}



	bool ActivateKeypad(class AShooterPlayerController* ForPC, int pinCode, bool bEnable);
};

// Class ShooterGame.PrimalStructureMovingContainer
// 0x0028 (FullSize[0x0E38] - InheritedSize[0x0E10])
class APrimalStructureMovingContainer : public APrimalStructureItemContainer
{
public:
	struct FVector                                     FinalLocation;                                             // 0x0E10(0x000C) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector                                     ItemBalloonLocation;                                       // 0x0E1C(0x000C) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint16_t                                           ItemLatitude;                                              // 0x0E28(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint16_t                                           ItemLongitude;                                             // 0x0E2A(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              LocationName;                                              // 0x0E2C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasSetLocation;                                           // 0x0E30(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HFGR[0x7];                                     // 0x0E31(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureMovingContainer");
		return ptr;
	}



};

// Class ShooterGame.PrimalStructureSeating
// 0x00D8 (FullSize[0x0EE8] - InheritedSize[0x0E10])
class APrimalStructureSeating : public APrimalStructureItemContainer
{
public:
	TWeakObjectPtr<class AShooterCharacter>            SeatedCharacter;                                           // 0x0E10(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_QYRZ[0x8];                                     // 0x0E18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AShooterPlayerController>     SeatedController;                                          // 0x0E20(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<TWeakObjectPtr<class AShooterCharacter>>    CharacterPerSeat;                                          // 0x0E28(0x0010) (Net, ZeroConstructor, Transient, RepNotify, PersistentInstance)
	unsigned char                                      UnknownData_QC3P[0x10];                                    // 0x0E38(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumSeats;                                                  // 0x0E48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SeatedCharacterLocationOffset;                             // 0x0E4C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    SeatedCharacterRotationOffset;                             // 0x0E58(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TKMJ[0x4];                                     // 0x0E64(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSeatingSpot>                        OtherSeatingSpots;                                         // 0x0E68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bAdjustForLegLength : 1;                                   // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRestrictTPVCameraYaw : 1;                                 // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesPrimaryFire : 1;                                      // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesAltFire : 1;                                          // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesItemSlotKeys : 1;                                     // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventSeatingWhenHandcuffed : 1;                         // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSleepingPlayers : 1;                                 // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReleaseFindsGroundPlacement : 1;                          // 0x0E78(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowCrouchProneToSit : 1;                                // 0x0E79(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsesTargeting : 1;                                        // 0x0E79(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideLegacyStructureAmmoHUD : 1;                           // 0x0E79(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_4Y3F[0x2];                                     // 0x0E7A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TPVCameraYawRange;                                         // 0x0E7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOffset;                                           // 0x0E80(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOffsetMultiplier;                                 // 0x0E8C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UnboardDistance;                                           // 0x0E98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EROI[0x4];                                     // 0x0E9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SeatingActionText;                                         // 0x0EA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundCue*                                   RideSound;                                                 // 0x0EB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   UnrideSound;                                               // 0x0EB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               SeatingAnimOverride;                                       // 0x0EC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowAnyTeamToSit : 1;                                    // 0x0EC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowOrbitCam : 1;                                        // 0x0EC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHandcuffLockedSeating : 1;                         // 0x0EC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bJumpOnDetach : 1;                                         // 0x0EC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_XN9B[0x3];                                     // 0x0EC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SeatingActionPriority;                                     // 0x0ECC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastServerUpdateSent;                                      // 0x0ED0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OMZ7[0x10];                                    // 0x0ED8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSeating");
		return ptr;
	}



	void Release(class AShooterCharacter* ShooterCharacter);
	void OnRep_SeatedCharacter();
	void OnRep_CharacterPerSeat();
	int GetNearestFreeSpot(class AShooterPlayerController* ForPC, const struct FVector& CharacterLocation);
	void Control(class AShooterCharacter* ShooterCharacter, int SeatNumber, bool bLockedToSeat);
	void ClearSeats();
	bool CanSeat(class AShooterPlayerController* ForPC, class AShooterCharacter* forCharacter, bool bForce);
	void BPSeatedPlayer(class AShooterCharacter* SeatedChar, int AtSeatNumber);
	void BPReleasedPlayer(class AShooterCharacter* ReleasedChar, int AtSeatNumber);
	bool BPPreventReleaseSeatingStructure(class AShooterCharacter* ForSitter);
	void BPOnStopTargeting();
	void BPOnStartTargeting();
	bool BPHandleSitterPoop(class AShooterCharacter* ForSitter);
	int BPGetBestSeatNumber(class AShooterPlayerController* ForPC, int InBestSeatNumber);
	bool BPAllowSeating(class AShooterPlayerController* ForPC);
};

// Class ShooterGame.PrimalStructureBed
// 0x0060 (FullSize[0x0F48] - InheritedSize[0x0EE8])
class APrimalStructureBed : public APrimalStructureSeating
{
public:
	unsigned char                                      bDestroyAfterRespawnUse : 1;                               // 0x0EE8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_Z2TV[0x3];                                     // 0x0EE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PlayerSpawnLocOffset;                                      // 0x0EEC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    PlayerSpawnRotOffset;                                      // 0x0EF8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint32_t                                           LinkedPlayerID;                                            // 0x0F04(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	struct FString                                     LinkedPlayerName;                                          // 0x0F08(0x0010) (Net, ZeroConstructor, SaveGame, PersistentInstance)
	struct FString                                     BedName;                                                   // 0x0F18(0x0010) (Net, ZeroConstructor, SaveGame, PersistentInstance)
	float                                              UseCooldownTime;                                           // 0x0F28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseCooldownRadius;                                         // 0x0F2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttachedToPlatformStructureEnemySpawnPreventionRadius;     // 0x0F30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HVQS[0x4];                                     // 0x0F34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             NextAllowedUseTime;                                        // 0x0F38(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_XQB0[0x8];                                     // 0x0F40(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureBed");
		return ptr;
	}



	void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
};

// Class ShooterGame.PrimalStructureSeatingMusic
// 0x0058 (FullSize[0x0F40] - InheritedSize[0x0EE8])
class APrimalStructureSeatingMusic : public APrimalStructureSeating
{
public:
	class UStaticMeshComponent*                        StickMesh1;                                                // 0x0EE8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        StickMesh2;                                                // 0x0EF0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FName                                       StickMeshAttachPoint1;                                     // 0x0EF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StickMeshAttachPoint2;                                     // 0x0F00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class USoundBase*>                          InstrumentSounds;                                          // 0x0F08(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimMontage*>                        InstrumentPawnAnimations;                                  // 0x0F18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MinimumTimeBetweenPlays;                                   // 0x0F28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2NGX[0x4];                                     // 0x0F2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LastPlayInstrumentTime;                                    // 0x0F30(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSeatingMusic");
		return ptr;
	}



};

// Class ShooterGame.PrimalStructureTurretBallista
// 0x01E8 (FullSize[0x10D0] - InheritedSize[0x0EE8])
class APrimalStructureTurretBallista : public APrimalStructureSeating
{
public:
	struct FName                                       TurretTipBone;                                             // 0x0EE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RiderOverrideSocketName;                                   // 0x0EF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AmmoItemTemplate;                                          // 0x0EF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              AlternateAmmoItemTemplates;                                // 0x0F00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      ProjectileClass;                                           // 0x0F10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ShootingDamageType;                                        // 0x0F18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShootingDamageAmount;                                      // 0x0F20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShootingDamageImpulse;                                     // 0x0F24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             ShootingTrailFX;                                           // 0x0F28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShootingAimSpread;                                         // 0x0F30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PIR9[0x4];                                     // 0x0F34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MuzzleFlashEmitter;                                        // 0x0F38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShootingFireInterval;                                      // 0x0F40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R0Q5[0x4];                                     // 0x0F44(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastShootingFireTime;                                      // 0x0F48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsTryingToShoot;                                          // 0x0F50(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsShooting;                                               // 0x0F51(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsTargeting;                                              // 0x0F52(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L7JD[0x1];                                     // 0x0F53(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              YawViewRotation;                                           // 0x0F54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              OldYawViewRotation;                                        // 0x0F58(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitctViewRotation;                                         // 0x0F5C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FRotator                                    RotationInput;                                             // 0x0F60(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZQLE[0x4];                                     // 0x0F6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   FireSound;                                                 // 0x0F70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EmptyFireSound;                                            // 0x0F78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   RotateSoundCue;                                            // 0x0F80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotateSpeedThreshold;                                      // 0x0F88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotateSoundFadeInSpeed;                                    // 0x0F8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotateSoundFadeOutSpeed;                                   // 0x0F90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotateSoundMinVolume;                                      // 0x0F94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RotateSoundMaxVolume;                                      // 0x0F98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVCameraPitchMin;                                         // 0x0F9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVCameraPitchMax;                                         // 0x0FA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVCameraYawMin;                                           // 0x0FA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVCameraYawMax;                                           // 0x0FA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M500[0x4];                                     // 0x0FAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                FireBallistaAnimation;                                     // 0x0FB0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                EmptyBallistaAnimation;                                    // 0x0FB8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                ReloadBallistaAnimation;                                   // 0x0FC0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsLoaded;                                                 // 0x0FC8(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_10BI[0x3];                                     // 0x0FC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ControllerRiddingYaw;                                      // 0x0FCC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       TurretSkeletalMeshComponentName;                           // 0x0FD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      MySkeletalMeshComp;                                        // 0x0FD8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	struct FName                                       AttachedModuleComponentName;                               // 0x0FE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      AttachedModuleSkeletalMeshComp;                            // 0x0FE8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                AttachedModuleFireAnimation;                               // 0x0FF0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                AttachedModuleReloadAnimation;                             // 0x0FF8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ProjectileMeshAttachPoint;                                 // 0x1000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ProjectileMeshAttachPointForMeshOnly;                      // 0x1008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ProjectileBoneName;                                        // 0x1010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bClientFireProjectile : 1;                                 // 0x1018(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseInstantDamageShooting : 1;                             // 0x1018(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableInElectricalStorm : 1;                             // 0x1018(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBallistaAimOffsetOnCharacter : 1;                      // 0x1018(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsReloading : 1;                                          // 0x1018(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsFiring : 1;                                             // 0x1018(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bQueueReloadingAnimation;                                  // 0x1019(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bFireProjectileInvertX : 1;                                // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowProjectileOnlyBasedOnAmmo : 1;                        // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideProjectileBone : 1;                                   // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanFire : 1;                                         // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPFiredWeapon : 1;                                     // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideProjectileBoneOnAttachedModule : 1;                   // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmmoFromNearbyContainer : 1;                           // 0x101A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_4ZQ8[0x5];                                     // 0x101B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        ProjectileMesh;                                            // 0x1020(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             RotateSoundComponent;                                      // 0x1028(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ProgressBarBackground;                                     // 0x1030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ProgressBarForeground;                                     // 0x1038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                AmmoCount;                                                 // 0x1040(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MXKK[0x4];                                     // 0x1044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CurrentAmmoItemTemplate;                                   // 0x1048(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                MagazineSize;                                              // 0x1050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RangeToCheckForAmmo;                                       // 0x1054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MN3G[0x18];                                    // 0x1058(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 AmmoItemTemplateMesh;                                      // 0x1070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UStaticMesh*>                         AlternateAmmoItemTemplateMeshes;                           // 0x1078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AlternateAmmoProjectileClasses;                            // 0x1088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              BuffsWhileSeated;                                          // 0x1098(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DefaultAmmoReloadAnimSpeed;                                // 0x10A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F6O6[0x4];                                     // 0x10AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      AlternateAmmoReloadAnimSpeeds;                             // 0x10B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              HealthCostPerShot;                                         // 0x10C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinimumHealthPercentToShoot;                               // 0x10C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InstantFireTraceRange;                                     // 0x10C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               AimFromPlayerView;                                         // 0x10CC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WP6Y[0x3];                                     // 0x10CD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureTurretBallista");
		return ptr;
	}



	void TryFiring(bool shouldFire);
	void ServerSwitchAmmoType();
	void ServerSetTargeting(bool bTargeting);
	class UClass* GetCurrentAmmoType();
	void ClientsPlayFireAnim();
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void BPFiredWeapon();
	bool BPCanFire();
};

// Class ShooterGame.PrimalStructureTurret
// 0x0138 (FullSize[0x0F48] - InheritedSize[0x0E10])
class APrimalStructureTurret : public APrimalStructureItemContainer
{
public:
	TWeakObjectPtr<class AActor>                       Target;                                                    // 0x0E10(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, PersistentInstance)
	class UClass*                                      AmmoItemTemplate;                                          // 0x0E18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MuzzleFlashEmitter;                                        // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FireInterval;                                              // 0x0E28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GI1H[0x4];                                     // 0x0E2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastFireTime;                                              // 0x0E30(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastLongReloadStartTime;                                   // 0x0E38(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	float                                              MaxFireYawDelta;                                           // 0x0E40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxFirePitchDelta;                                         // 0x0E44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TargetingLocOffset;                                        // 0x0E48(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetingRotationInterpSpeed;                              // 0x0E54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetingRanges[0x3];                                      // 0x0E58(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TargetingTraceOffset;                                      // 0x0E64(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FireDamageType;                                            // 0x0E70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FireDamageAmount;                                          // 0x0E78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FireDamageImpulse;                                         // 0x0E7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             TrailFX;                                                   // 0x0E80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    TurretAimRotOffset;                                        // 0x0E88(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     AimTargetLocOffset;                                        // 0x0E94(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PlayerProneTargetOffset;                                   // 0x0EA0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AimSpread;                                                 // 0x0EAC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseNoWarning : 1;                                         // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseNoAmmo : 1;                                            // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyUseAmmoOnDamage : 1;                                  // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasOmniDirectionalFire : 1;                               // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFireProjectiles : 1;                                      // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClientFireProjectile : 1;                                 // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsTargeting : 1;                                          // 0x0EB0(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bInWaterOnlyTargetWater : 1;                               // 0x0EB0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTurretIgnoreProjectiles : 1;                              // 0x0EB1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPTurretPreventsTargeting : 1;                         // 0x0EB1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAimIgnoreSockets : 1;                                     // 0x0EB1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmmoFromNearbyContainer : 1;                           // 0x0EB1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseMaxInventoryForAmmoContainerReload : 1;                // 0x0EB1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      RangeSetting;                                              // 0x0EB2(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      AISetting;                                                 // 0x0EB3(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      WarningSetting;                                            // 0x0EB4(0x0001) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_J2PX[0x3];                                     // 0x0EB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumBullets;                                                // 0x0EB8(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance)
	int                                                NumBulletsPerShot;                                         // 0x0EBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LongAmmoReloadCD;                                          // 0x0EC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxAmmoContainerReloadPercent;                             // 0x0EC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AlwaysEnableFastTurretTargetingOverVelocity;               // 0x0EC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q95O[0x4];                                     // 0x0ECC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ProjectileClass;                                           // 0x0ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WarningExpirationTime;                                     // 0x0ED8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4FJW[0x4];                                     // 0x0EDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      WarningEmitterShort;                                       // 0x0EE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      WarningEmitterLong;                                        // 0x0EE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BatteryIntervalFromActivationBeforeFiring;                 // 0x0EF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P2OD[0x14];                                    // 0x0EF4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UChildActorComponent*                        MyChildEmitterTargetingEffect;                             // 0x0F08(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FRotator                                    DefaultTurretAimRotOffset;                                 // 0x0F10(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     MuzzleLocOffset;                                           // 0x0F1C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q165[0x8];                                     // 0x0F28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MagazineSize;                                              // 0x0F30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RangeToCheckForAmmo;                                       // 0x0F34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AmmoBoxReloadCooldown;                                     // 0x0F38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QKST[0x4];                                     // 0x0F3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        CopySettingsRangeMesh;                                     // 0x0F40(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureTurret");
		return ptr;
	}



	void UpdatedTargeting();
	void StartWarning();
	struct FName GetTargetAltAimSocket(class APrimalCharacter* forTarget);
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	bool BPTurretPreventsTargeting(class APrimalCharacter* PotentialTarget);
	bool BPCopyCustomSettingsFromTurret(class APrimalStructureTurret* FromTurret);
};

// Class ShooterGame.PrimalStructureTurretPlant
// 0x0060 (FullSize[0x0FA8] - InheritedSize[0x0F48])
class APrimalStructureTurretPlant : public APrimalStructureTurret
{
public:
	TArray<struct FName>                               PlantMuzzleSockets;                                        // 0x0F48(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimMontage*>                        PlantAttackAnims;                                          // 0x0F58(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PlantHealthRecoverPerSec;                                  // 0x0F68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AmountOfFertilizerToUsePerShot;                            // 0x0F6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HealthRecoverPerSec;                                       // 0x0F70(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JTX1[0x4];                                     // 0x0F74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APrimalStructureItemContainer_CropPlot*      OwnerCropPlot;                                             // 0x0F78(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O69V[0x28];                                    // 0x0F80(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureTurretPlant");
		return ptr;
	}



	void RecoverHealthTimer();
};

// Class ShooterGame.PrimalStructureUnderwaterBase
// 0x00C8 (FullSize[0x0ED8] - InheritedSize[0x0E10])
class APrimalStructureUnderwaterBase : public APrimalStructureItemContainer
{
public:
	unsigned char                                      bIsFlooded : 1;                                            // 0x0E10(0x0001) BIT_FIELD (Net, Transient, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_8JZT[0x7];                                     // 0x0E11(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<bool>                                       PortholeOpen;                                              // 0x0E18(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	TArray<bool>                                       PortholeLocked;                                            // 0x0E28(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	TArray<bool>                                       PortholeOpenSaveState;                                     // 0x0E38(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<class APrimalStructureUnderwaterBase*>      PortholeLinks;                                             // 0x0E48(0x0010) (ZeroConstructor, Transient, SaveGame)
	unsigned char                                      UnknownData_IW3N[0x18];                                    // 0x0E58(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      FloodedEmitter;                                            // 0x0E70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      UnfloodedEmitter;                                          // 0x0E78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OpenPortholeSound;                                         // 0x0E80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ClosePortholeSound;                                        // 0x0E88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  FreezePortholeSound;                                       // 0x0E90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  UnfreezePortholeSound;                                     // 0x0E98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<uint32_t>                                   CurrentPinCodes;                                           // 0x0EA0(0x0010) (Net, ZeroConstructor, SaveGame)
	TArray<int>                                        ForcePortholesClosedIndices;                               // 0x0EB0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             PortholeNameOverrides;                                     // 0x0EC0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_RPMA[0x8];                                     // 0x0ED0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureUnderwaterBase");
		return ptr;
	}



	void UpdateCurrentPinCodes(TArray<uint32_t> NewPinCodes);
	void SetPortholeState(int index, bool bOpen);
	void SetPortholeLocked(int index, bool bLocked);
	void OnRep_IsFlooded();
	void MultiSetPortholeStates(TArray<bool> portholes);
	void ChangedCompartmentFloodState();
};

// Class ShooterGame.PrimalStructureLadder
// 0x0060 (FullSize[0x0B48] - InheritedSize[0x0AE8])
class APrimalStructureLadder : public APrimalStructure
{
public:
	float                                              LadderCenterZOffset;                                       // 0x0AE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     LadderExitTopPointOffset;                                  // 0x0AEC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     LadderExitBottomPointOffset;                               // 0x0AF8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     LadderEnterTopPointOffset;                                 // 0x0B04(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     LadderEnterBottomPointOffset;                              // 0x0B10(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    LadderClimbRotationOffset;                                 // 0x0B1C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bCanRetract : 1;                                           // 0x0B28(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnableLateralJump : 1;                                    // 0x0B28(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsRetracted : 1;                                          // 0x0B28(0x0001) BIT_FIELD (Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bHasLowerLaddersRetracted : 1;                             // 0x0B28(0x0001) BIT_FIELD (Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_W1R4[0x7];                                     // 0x0B29(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  LadderRetractionSound;                                     // 0x0B30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  LadderUnretractionSound;                                   // 0x0B38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A3IP : 3;                                      // 0x0B40(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanRetractFromBottom : 1;                                 // 0x0B40(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowPublicRetraction : 1;                                // 0x0B40(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      UnknownData_M608[0x7];                                     // 0x0B41(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureLadder");
		return ptr;
	}



	void UpdateRetraction();
	void STATIC_EndClimbingLadder(class AShooterCharacter* TheCharacter, bool bServerClimbOver, const struct FVector& ServerClimbOverLoc);
	void BP_SetLaddersRetracted(bool bRetract);
};

// Class ShooterGame.PrimalStructurePortableLadder
// 0x00A8 (FullSize[0x0BF0] - InheritedSize[0x0B48])
class APrimalStructurePortableLadder : public APrimalStructureLadder
{
public:
	float                                              MaximumHeightAllowedForLadder;                             // 0x0B48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K5O7[0x14];                                    // 0x0B4C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BottomAnimBlueprint;                                       // 0x0B60(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MidAnimBlueprint;                                          // 0x0B68(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                MidRetractedAnimMontageBlueprint;                          // 0x0B70(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                BottomRetractedAnimMontageBlueprint;                       // 0x0B78(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                MidAnimMontageBlueprint;                                   // 0x0B80(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                BottomAnimMontageBlueprint;                                // 0x0B88(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                MidAnimMontageExtendedBlueprint;                           // 0x0B90(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                BottomAnimMontageExtendedBlueprint;                        // 0x0B98(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                               MidSkeletalMesh;                                           // 0x0BA0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                               MyBottomSkeletalMesh;                                      // 0x0BA8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class USkeletalMeshComponent*>              MidLadderSkeletalMeshs;                                    // 0x0BB0(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, ContainsInstancedReference)
	class USkeletalMeshComponent*                      BottomLadderSkeletalMesh;                                  // 0x0BC0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor)
	TArray<class USkeletalMeshComponent*>              SkeletalMeshsForAnimation;                                 // 0x0BC8(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, ContainsInstancedReference)
	unsigned char                                      UnknownData_LE98[0x10];                                    // 0x0BD8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bisDonePlacing : 1;                                        // 0x0BE8(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor, PersistentInstance)
	unsigned char                                      UnknownData_GXXG[0x7];                                     // 0x0BE9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructurePortableLadder");
		return ptr;
	}



	void UpdateLadder();
	void UpdateBoxCollisionForRetraction(bool bRetracted);
	void PlaySetupAnimation();
	void BuildLadder();
};

// Class ShooterGame.PrimalStructureSeaMine
// 0x0090 (FullSize[0x0B78] - InheritedSize[0x0AE8])
class APrimalStructureSeaMine : public APrimalStructure
{
public:
	class USphereComponent*                            TriggerComponent;                                          // 0x0AE8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	class USphereComponent*                            ExplodingTriggerComponent;                                 // 0x0AF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	class UParticleSystem*                             ActivatedMineParticleSystem;                               // 0x0AF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     ActivatedMineParticleSystemOffset;                         // 0x0B00(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_C553[0x4];                                     // 0x0B0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  ActivateMaterials;                                         // 0x0B10(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	class USoundBase*                                  ActivatedSound;                                            // 0x0B20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              SeaMineSpeed;                                              // 0x0B28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              SeaMineExplodeTime;                                        // 0x0B2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionDamage;                                           // 0x0B30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionRadius;                                           // 0x0B34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplosionImpulse;                                          // 0x0B38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_8SNB[0x4];                                     // 0x0B3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ExplosionDamageType;                                       // 0x0B40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	int                                                OwnerTargetingTeam;                                        // 0x0B48(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_8R6R[0x4];                                     // 0x0B4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APrimalCharacter*>                    TriggerOverlappingCharacters;                              // 0x0B50(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      bActivatedSeaMine : 1;                                     // 0x0B60(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bDisableExplosion : 1;                                     // 0x0B60(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_C20V[0x3];                                     // 0x0B61(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LastKnownTargetLocation;                                   // 0x0B64(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class APrimalCharacter*                            SeaMineTarget;                                             // 0x0B70(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, PersistentInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSeaMine");
		return ptr;
	}



	void RefreshSeaMineTarget();
	void OnTriggerEndOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_SeaMineTarget();
	void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnExplodingTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Explode();
};

// Class ShooterGame.PrimalStructureSign
// 0x0030 (FullSize[0x0B18] - InheritedSize[0x0AE8])
class APrimalStructureSign : public APrimalStructure
{
public:
	struct FString                                     SignText;                                                  // 0x0AE8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, RepNotify, PersistentInstance)
	float                                              SignWidth;                                                 // 0x0AF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxNumberofCharacters;                                     // 0x0AFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinFontSize;                                               // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultScale;                                              // 0x0B04(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UTextRenderComponent*                        TextRender;                                                // 0x0B08(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YTJC[0x8];                                     // 0x0B10(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureSign");
		return ptr;
	}



	void OnRep_SignText(const struct FString& PreviousSignText);
};

// Class ShooterGame.PrimalStructureWaterPipe
// 0x0020 (FullSize[0x0B08] - InheritedSize[0x0AE8])
class APrimalStructureWaterPipe : public APrimalStructure
{
public:
	unsigned char                                      bAlwaysHasWater : 1;                                       // 0x0AE8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasWater : 1;                                             // 0x0AE8(0x0001) BIT_FIELD (Net, SaveGame, RepNotify, NoDestructor, PersistentInstance)
	unsigned char                                      bIsWaterPipe : 1;                                          // 0x0AE8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConnectedToNonPipe : 1;                                   // 0x0AE8(0x0001) BIT_FIELD (Transient, SaveGame, NoDestructor)
	unsigned char                                      bUseBPOnRefreshPipeMaterials : 1;                          // 0x0AE8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnWaterStateChange : 1;                              // 0x0AE8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_S1JM[0x3];                                     // 0x0AE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AutoDestroyPeriodWhenUnconnectedToNonPipe;                 // 0x0AEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          HasWaterMaterial;                                          // 0x0AF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          NoWaterMaterial;                                           // 0x0AF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                WaterMaterialIndex;                                        // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I5BN[0x4];                                     // 0x0B04(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureWaterPipe");
		return ptr;
	}



	void SetHasWater(bool bNewHasWater);
	void RefreshWaterState();
	void RefreshHasSourceMaterials();
	void OnRep_HasWater(bool bPreviousHasWater);
	void BPOnWaterStateChange(bool bPipeHasWaterOrPower);
	void BPOnRefreshPipeMaterials(bool bPipeHasWaterOrPower, class UMaterialInterface* NewMaterial);
};

// Class ShooterGame.PrimalTribeData
// 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
class UPrimalTribeData : public UObject
{
public:
	struct FTribeData                                  TribeData;                                                 // 0x0028(0x0138) (NativeAccessSpecifierPublic)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalTribeData");
		return ptr;
	}



};

// Class ShooterGame.BaseSelectableButtonWidget
// 0x0000 (FullSize[0x0518] - InheritedSize[0x0518])
class UBaseSelectableButtonWidget : public UPrimalUI
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BaseSelectableButtonWidget");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_HostSession
// 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
class UDataListEntryButton_HostSession : public UBaseSelectableButtonWidget
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsProcedural : 1;                                         // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QN49[0x7];                                     // 0x0519(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DisplayName;                                               // 0x0520(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0530(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DL1F[0x7];                                     // 0x0531(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ShortMapName;                                              // 0x0538(0x0010) (ZeroConstructor, Transient)
	struct FString                                     LongMapName;                                               // 0x0548(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModName;                                                   // 0x0558(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModPath;                                                   // 0x0568(0x0010) (ZeroConstructor, Transient)
	uint64_t                                           ModItemId;                                                 // 0x0578(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0580(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_7OQ3[0x4F];                                    // 0x0581(0x004F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_HostSession");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_ListSession
// 0x02A8 (FullSize[0x07C0] - InheritedSize[0x0518])
class UDataListEntryButton_ListSession : public UBaseSelectableButtonWidget
{
public:
	struct FCustomButtonWidgetStyle                    LastJoinedExtendedStyle;                                   // 0x0518(0x0048) (Edit, BlueprintVisible)
	struct FCustomButtonWidgetStyle                    StandardExtendedStyle;                                     // 0x0560(0x0048) (Edit, BlueprintVisible)
	struct FString                                     UniqueID;                                                  // 0x05A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     GameName;                                                  // 0x05B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     BuildId;                                                   // 0x05C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     OwnerName;                                                 // 0x05D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MapName;                                                   // 0x05E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DayTimeStr;                                                // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	uint32_t                                           NumPlayers;                                                // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint32_t                                           MaxNumPlayers;                                             // 0x060C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           ModId;                                                     // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           TotalConversionId;                                         // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint64_t                                           Ping;                                                      // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHasPassword;                                              // 0x0628(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsFavourite;                                              // 0x0629(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsPVEServer;                                              // 0x062A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SZ92[0x5];                                     // 0x062B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  PasswordTexture;                                           // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsOfficialServer;                                         // 0x0638(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUsingBattleEye;                                           // 0x0639(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowDownloadCharacters;                                  // 0x063A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowDownloadItems;                                       // 0x063B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_865T[0x4];                                     // 0x063C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  BattleEyeTexture;                                          // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OfficialServerTexture;                                     // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PVPServerTexture;                                          // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PVEServerTexture;                                          // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DisplayStringSelectedColor;                                // 0x0660(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0670(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OVXL[0x14F];                                   // 0x0671(0x014F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_ListSession");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_MainMenu
// 0x0070 (FullSize[0x0588] - InheritedSize[0x0518])
class UDataListEntryButton_MainMenu : public UBaseSelectableButtonWidget
{
public:
	unsigned char                                      bIsCustom : 1;                                             // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsProcedural : 1;                                         // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_WSUC[0x7];                                     // 0x0519(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     DisplayName;                                               // 0x0520(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCenterDisplayName;                                        // 0x0530(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RAUU[0x7];                                     // 0x0531(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MapName;                                                   // 0x0538(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModName;                                                   // 0x0548(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ModPath;                                                   // 0x0558(0x0010) (ZeroConstructor, Transient)
	uint64_t                                           ModItemId;                                                 // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0570(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_X7O1[0x7];                                     // 0x0571(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCustomButtonWidget*                         Button;                                                    // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UTextBlock*                                  EntryNameLabel;                                            // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_MainMenu");
		return ptr;
	}



};

// Class ShooterGame.DinoListButtonWidget
// 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
class UDinoListButtonWidget : public UBaseSelectableButtonWidget
{
public:
	struct FName                                       ContextMenuAnchorName;                                     // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DinoStatusLabelName;                                       // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExpirationLabelName;                                       // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExpirationLabelParentName;                                 // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0538(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_BUXJ[0x14F];                                   // 0x0539(0x014F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMenuAnchor*                                 ContextMenuAnchor;                                         // 0x0688(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_CPU3[0x8];                                     // 0x0690(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DinoListButtonWidget");
		return ptr;
	}



	class UWidget* OnGetContextMenuContent();
};

// Class ShooterGame.MissionBiomeCompletionWidget
// 0x00D0 (FullSize[0x05E8] - InheritedSize[0x0518])
class UMissionBiomeCompletionWidget : public UBaseSelectableButtonWidget
{
public:
	class UTexture2D*                                  ButtonIcon;                                                // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FText                                       SectionName;                                               // 0x0520(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData_1QNM[0x10];                                    // 0x0520(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FLinearColor                                AllMissionsCompletedColor;                                 // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SectionNameTextColor;                                      // 0x0558(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                CompletionPercentLabelTextColor;                           // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                NumCompletedValueTextColor;                                // 0x0578(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                NumCompletedLabelTextColor;                                // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                CompletionProgressBarForegroundColor;                      // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AS9C[0x40];                                    // 0x05A8(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionBiomeCompletionWidget");
		return ptr;
	}



};

// Class ShooterGame.MissionListEntryWidget
// 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
class UMissionListEntryWidget : public UBaseSelectableButtonWidget
{
public:
	struct FString                                     ItemLabelName;                                             // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_DIUS[0x10];                                    // 0x0528(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionListEntryWidget");
		return ptr;
	}



};

// Class ShooterGame.TamingListEntryWidget
// 0x0168 (FullSize[0x0680] - InheritedSize[0x0518])
class UTamingListEntryWidget : public UBaseSelectableButtonWidget
{
public:
	struct FString                                     ItemLabelName;                                             // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                NameLabelColor_Default;                                    // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                NameLabelColor_Female;                                     // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                NameLabelColor_Male;                                       // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BackgroundColor_Default;                                   // 0x0558(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BackgroundColor_Tracked;                                   // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BackgroundColor_Completed;                                 // 0x0578(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SeparatorColor;                                            // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DistanceIconTexture;                                       // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  CompletedIconTexture;                                      // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TooltipBackgroundTexture;                                  // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GenderIcon_Male;                                           // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GenderIcon_Female;                                         // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XPTO[0xC0];                                    // 0x05C0(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TamingListEntryWidget");
		return ptr;
	}



};

// Class ShooterGame.TradeItemButtonWidget
// 0x0080 (FullSize[0x0598] - InheritedSize[0x0518])
class UTradeItemButtonWidget : public UBaseSelectableButtonWidget
{
public:
	struct FName                                       ItemCostTextBlockName;                                     // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemQuantityTextBlockName;                                 // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemImageName;                                             // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemWeightTextBlockName;                                   // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                CanAffordPriceText;                                        // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TooExpensivePriceText;                                     // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_3OMR[0x3F];                                    // 0x0559(0x003F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TradeItemButtonWidget");
		return ptr;
	}



};

// Class ShooterGame.TribeManagerListButton
// 0x0018 (FullSize[0x0530] - InheritedSize[0x0518])
class UTribeManagerListButton : public UBaseSelectableButtonWidget
{
public:
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EOFB[0x17];                                    // 0x0519(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TribeManagerListButton");
		return ptr;
	}



};

// Class ShooterGame.TribeMemberButtonWidget
// 0x0040 (FullSize[0x0558] - InheritedSize[0x0518])
class UTribeMemberButtonWidget : public UBaseSelectableButtonWidget
{
public:
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_RES2[0x3F];                                    // 0x0519(0x003F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TribeMemberButtonWidget");
		return ptr;
	}



};

// Class ShooterGame.TribeWarButtonWidget
// 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
class UTribeWarButtonWidget : public UBaseSelectableButtonWidget
{
public:
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_ZAT8[0x2F];                                    // 0x0519(0x002F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TribeWarButtonWidget");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryButton_DyeResources
// 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
class UDataListEntryButton_DyeResources : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_B4TF[0x10];                                    // 0x0518(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryButton_DyeResources");
		return ptr;
	}



};

// Class ShooterGame.DataListEntryEngramList
// 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
class UDataListEntryEngramList : public UPrimalUI
{
public:
	class UClass*                                      EntryWidgetTemplate;                                       // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DataPanelName;                                             // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LevelLabelName;                                            // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LevelEnabledEffectName;                                    // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ElementIconName;                                           // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramRowStartName;                                        // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramRowMiddleName;                                       // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramRowEndName;                                          // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0558(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                WidgetLimit;                                               // 0x0578(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FIC9[0x54];                                    // 0x057C(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DataListEntryEngramList");
		return ptr;
	}



};

// Class ShooterGame.DinoAncestryEntryWidget
// 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
class UDinoAncestryEntryWidget : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_BSRP[0x20];                                    // 0x0518(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DinoAncestryEntryWidget");
		return ptr;
	}



};

// Class ShooterGame.DyeRegionButtonWidget
// 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
class UDyeRegionButtonWidget : public UPrimalUI
{
public:
	unsigned char                                      bSelectOnClicked : 1;                                      // 0x0518(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_N5DV[0x3];                                     // 0x0519(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                DefaultBackgroundColor;                                    // 0x051C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DefaultPreviewColor;                                       // 0x052C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BJPY[0x24];                                    // 0x053C(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DyeRegionButtonWidget");
		return ptr;
	}



};

// Class ShooterGame.HUDActiveMissionWidget
// 0x0400 (FullSize[0x0918] - InheritedSize[0x0518])
class UHUDActiveMissionWidget : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_DCYN[0x8];                                     // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               ActiveMissionVisibilityWidgetNames;                        // 0x0520(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MissionNameTextBlockName;                                  // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDifficultyTextBlockName;                            // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDescriptionTextBlockName;                           // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ObjectiveTimeValueTextBlockName;                           // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ObjectiveTimeLabelTextBlockName;                           // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ObjectiveTimePanelName;                                    // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ObjectiveTimeProgressBarName;                              // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDifficultyPanelName;                                // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseRequirementContainerName;                             // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MissionTimeRemainingDefaultTextColor;                      // 0x0578(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               MissionStatTrackerVisibilityWidgetNames;                   // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MissionStatTrackerContainerName;                           // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PhaseRequirementWidgetClass;                               // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseBackgroundBorderWidgetName;                           // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseRichTextBlockName;                                    // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseDescriptionBlockName;                                 // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseDescriptionPrefixBlockName;                           // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseDescriptionSuffixBlockName;                           // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseValueContainerName;                                   // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseValueTextBlockName;                                   // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseValueSlashTextBlockName;                              // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseMaxValueTextBlockName;                                // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseProgressContainerName;                                // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PhaseProgressBarName;                                      // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseNormalBackgroundColor;                                // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseCompleteBackgroundColor;                              // 0x0610(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionAlertFlyoutContainerName;                           // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionAlertEntryContainerName;                            // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionAlertTitleTextBlockName;                            // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionAlertBorderName;                                    // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TopMissionAlertFlyoutContainerName;                        // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TopMissionAlertEntryContainerName;                         // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TopMissionAlertTitleTextBlockName;                         // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TopMissionAlertBorderName;                                 // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MissionAlertColor_Negative;                                // 0x0660(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MissionAlertColor_Neutral;                                 // 0x0670(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MissionAlertColor_Positive;                                // 0x0680(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AlertEntryWidgetClass;                                     // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AlertFlyoutAnimationDuration;                              // 0x0698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_ESimpleCurve>              AlertFlyoutCurve;                                          // 0x069C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KM46[0x3];                                     // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   AlertOffscreenTransform;                                   // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   TopAlertOffscreenTransform;                                // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultPositiveMissionAlertSound;                          // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultNeutralMissionAlertSound;                           // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultNegativeMissionAlertSound;                          // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AlertEntryIconContainerName;                               // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AlertEntryIconName;                                        // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AlertCountTextBlockName;                                   // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AlertContentTextBlockName;                                 // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RacePanelName;                                             // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RacePositionTextBlockName;                                 // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RaceMaxPositionTextBlockName;                              // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionTimeValueTextBlockName;                             // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BestRaceTimeName;                                          // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                ObjectiveTimeRemainingProgressBarColor;                    // 0x0710(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LowObjectiveTimeRemainingProgressBarColor;                 // 0x0720(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqTextColor_Negative;                                // 0x0730(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqTextColor_Neutral;                                 // 0x0740(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqTextColor_Positive;                                // 0x0750(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqProgressColor_Negative;                            // 0x0760(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqProgressColor_Neutral;                             // 0x0770(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PhaseReqProgressColor_Positive;                            // 0x0780(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OpacityForSlashAndMaxValueText;                            // 0x0790(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AGMC[0x4];                                     // 0x0794(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      WorldBuffEffectListEntry_WidgetType;                       // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YWR3[0x8];                                     // 0x07A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextBlock*                                  BestRaceTimeTextBlock;                                     // 0x07A8(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5NJV[0x130];                                   // 0x07B0(0x0130) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMissionType*                                ActiveMission;                                             // 0x08E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class APrimalBuff_MissionData*                     missionData;                                               // 0x08E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UUserWidget*                                 ActiveMissionWidget;                                       // 0x08F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UCanvasPanel*                                CustomStatusCanvas;                                        // 0x08F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_MNQW[0x18];                                    // 0x0900(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDActiveMissionWidget");
		return ptr;
	}



	void ShowMissionAlert(TEnumAsByte<ShooterGame_EMissionAlertType> AlertType, const struct FString& AlertTitle, TArray<struct FMissionAlertEntry> NewEntries, bool bInstant, bool bFlyoutFromTop);
	void SetRacePositionText(const struct FText& PositionText);
	void SetRacePanelVisibility(TEnumAsByte<UMG_ESlateVisibility> NewVisibility);
	bool IsMissionAlertVisible(bool bIsTop);
	void HideMissionAlert(bool bInstant, bool bHideTop);
	bool HaveActiveMission();
	class UHUDActiveMissionWidget* STATIC_GetActiveMissionWidget(class APlayerController* PlayerController);
};

// Class ShooterGame.HUDCustomStatusWidget
// 0x00C8 (FullSize[0x05E0] - InheritedSize[0x0518])
class UHUDCustomStatusWidget : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_70YW[0x8];                                     // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       CanvasPanelName;                                           // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TextWidgetClass;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleWidgetTextBlockName;                                  // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TextWidgetTextBlockName;                                   // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CustomTextContainerName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ProgressWidgetClass;                                       // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ProgressWidgetProgressName;                                // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ImageWidgetClass;                                          // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ImageBackgroundWidgetName;                                 // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       IconWidgetName;                                            // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCanvasPanel*                                CustomStatusCanvas;                                        // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_A61Q[0x50];                                    // 0x0578(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UUserWidget*>                         WidgetRefs;                                                // 0x05C8(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_V558[0x8];                                     // 0x05D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDCustomStatusWidget");
		return ptr;
	}



	void STATIC_SetHUDElementVisibility(struct FHUDElement* ElementInfo, bool bIsVisible);
	void STATIC_SetHUDElementTitle(struct FHUDElement* ElementInfo, const struct FString& NewTitle);
	void STATIC_SetHUDElementTextScale(struct FHUDElement* ElementInfo, float NewScale);
	void STATIC_SetHUDElementTextPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
	void STATIC_SetHUDElementTextColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
	void STATIC_SetHUDElementTextAlignment_Title(struct FHUDElement* ElementInfo, TEnumAsByte<Slate_ETextJustify> NewAlignment);
	void STATIC_SetHUDElementTextAlignment_Label(struct FHUDElement* ElementInfo, TEnumAsByte<Slate_ETextJustify> NewAlignment);
	void STATIC_SetHUDElementSize(struct FHUDElement* ElementInfo, const struct FVector2D& NewSize);
	void STATIC_SetHUDElementScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
	void STATIC_SetHUDElementProgressColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
	void STATIC_SetHUDElementProgressBarScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
	void STATIC_SetHUDElementProgressBarPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
	void STATIC_SetHUDElementProgress(struct FHUDElement* ElementInfo, float NewProgress);
	void STATIC_SetHUDElementLocation(struct FHUDElement* ElementInfo, const struct FVector2D& NewLocation);
	void STATIC_SetHUDElementLabelNumeric(struct FHUDElement* ElementInfo, float LabelValue, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinIntDigits, int MaxIntDigits, int MinFractionalDigits, int MaxFractionalDigits, bool bAddPercentSymbol);
	void STATIC_SetHUDElementLabel(struct FHUDElement* ElementInfo, const struct FString& NewLabel);
	void STATIC_SetHUDElementImage(struct FHUDElement* ElementInfo, class UTexture2D* NewIcon, bool bSetIcon, bool bSetProgressBarFillImage, bool bSetBackgroundImage);
	void STATIC_SetHUDElementIconScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
	void STATIC_SetHUDElementIconRotation(struct FHUDElement* ElementInfo, float NewAngle);
	void STATIC_SetHUDElementIconPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
	void STATIC_SetHUDElementIconColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
	void STATIC_SetHUDElementBackgroundImageColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
	void STATIC_SetHUDElementAnchor(struct FHUDElement* ElementInfo, const struct FAnchors& NewAnchor);
	bool IsHUDElementVisible(class AActor* WidgetOwner, const struct FHUDElement& WidgetInfo);
	class UHUDCustomStatusWidget* STATIC_GetHUDElementRootWidget(class APlayerController* PlayerController);
};

// Class ShooterGame.HUDPingsContainer
// 0x0028 (FullSize[0x0540] - InheritedSize[0x0518])
class UHUDPingsContainer : public UPrimalUI
{
public:
	struct FName                                       PingContainerCanvasName;                                   // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PingWidgetClass;                                           // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCanvasPanel*                                PingContainerCanvas;                                       // 0x0528(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class UUserWidget*>                         SpawnedPingWidgets;                                        // 0x0530(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDPingsContainer");
		return ptr;
	}



};

// Class ShooterGame.HUDPingWidget
// 0x00D0 (FullSize[0x05E8] - InheritedSize[0x0518])
class UHUDPingWidget : public UPrimalUI
{
public:
	struct FName                                       PingPlayerNameTextBlockName;                               // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingRespondingPlayerNameTextBlockName;                     // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingIconName;                                              // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingSwitcherName;                                          // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingOffScreenArrowName;                                    // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingOffScreenIconName;                                     // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PingOffScreenArrowBackgroundName;                          // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WidgetRemoveDuration;                                      // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FG52[0x4];                                     // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPingData                                   WidgetPingData;                                            // 0x0558(0x0050) (BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference)
	unsigned char                                      UnknownData_NG84[0x38];                                    // 0x05A8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIsHovered : 1;                                            // 0x05E0(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      UnknownData_FO01[0x7];                                     // 0x05E1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDPingWidget");
		return ptr;
	}



	bool UpdateWidgetPingData(const struct FPingData& WithPingData);
	void RemovePingWidget();
	void OnPingWidgetRemoved();
	void OnPingWidgetCreated();
	void OnPingUnhovered(class AShooterCharacter* UnhoveringPlayer);
	void OnPingResponseReceived(class AShooterCharacter* RespondingPlayer);
	void OnPingHovered(class AShooterCharacter* HoveringPlayer);
	bool STATIC_IsPingValid(const struct FPingData& ForPingData);
	void InitializePingWidget(const struct FPingData& FromPingData);
	bool HasValidPingData();
	struct FVector STATIC_GetPingWorldLocation(const struct FPingData& FromPingData);
	struct FPingData GetPingData();
};

// Class ShooterGame.HUDPointOfInterestWidget
// 0x0268 (FullSize[0x0780] - InheritedSize[0x0518])
class UHUDPointOfInterestWidget : public UPrimalUI
{
public:
	struct FName                                       OuterContainerName;                                        // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointTitleTextBlockName;                                   // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointDescTextBlockName;                                    // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointIconPanelName;                                        // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointIconName;                                             // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointSwitcherName;                                         // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointOffScreenArrowName;                                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PointOffScreenIconName;                                    // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OnScreenPrimaryPanelName;                                  // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OffScreenPrimaryPanelName;                                 // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OnScreenIndicatorImageName;                                // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OffScreenIndicatorImageName;                               // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OnScreenProgressPanelName;                                 // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OnScreenProgressLabelName;                                 // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OffScreenProgressPanelName;                                // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OffScreenProgressLabelName;                                // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WidgetTitleHiddenIconRenderOffset_Y;                       // 0x0598(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OKZX[0x4];                                     // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPointOfInterestData                        WidgetPointOfInterestData;                                 // 0x05A0(0x0140) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UTexture2D*                                  FallbackIcon;                                              // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultLocationAddedSound;                                 // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultLocationReachedSound;                               // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsPulsing : 1;                                            // 0x06F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor)
	unsigned char                                      UnknownData_A3M0[0x3];                                     // 0x06F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OffScreenWidgetScale;                                      // 0x06FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VCQT[0x80];                                    // 0x0700(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDPointOfInterestWidget");
		return ptr;
	}



	bool UpdateWidgetPointOfInterestData(const struct FPointOfInterestData& WithPointData);
	bool STATIC_IsPointOfInterestValid(const struct FPointOfInterestData& ForPointData);
	bool STATIC_IsPointOfInterestInitialized(const struct FPointOfInterestData& ForPointData);
	void InitializePointOfInterestWidget(const struct FPointOfInterestData& FromPointData);
	bool HasValidPointOfInterestData();
	struct FRotator STATIC_GetPointOfInterestWorldRotation(const struct FPointOfInterestData& FromPointData);
	struct FVector STATIC_GetPointOfInterestWorldLocation(const struct FPointOfInterestData& FromPointData);
	struct UObject_FTransform STATIC_GetPointOfInterestTransform(const struct FPointOfInterestData& FromPointData);
	class USoundBase* GetPointOfInterestReachedSound();
	struct FPointOfInterestData GetPointOfInterestData();
	struct UObject_FTransform STATIC_GetPointOfInterestCosmeticActorTransform(const struct FPointOfInterestData& FromPointData);
	class USoundBase* GetPointOfInterestAddedSound();
	void DestroyPointOfInterestWidget();
	bool STATIC_CanActorViewPointOfInterest(class AActor* forActor, const struct FPointOfInterestData& CanViewPointData);
};

// Class ShooterGame.HUDPointsOfInterestContainer
// 0x0038 (FullSize[0x0550] - InheritedSize[0x0518])
class UHUDPointsOfInterestContainer : public UPrimalUI
{
public:
	struct FName                                       PointContainerCanvasName;                                  // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PointOfInterestWidgetClass;                                // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TamingListEntryTemplate;                                   // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCanvasPanel*                                PointContainerCanvas;                                      // 0x0530(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	TArray<class UUserWidget*>                         SpawnedPointWidgets;                                       // 0x0538(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected)
	class UTamingListEntryWidget*                      TamingPOITooltip;                                          // 0x0548(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.HUDPointsOfInterestContainer");
		return ptr;
	}



};

// Class ShooterGame.InventoryArkCreaturesPanel
// 0x0300 (FullSize[0x0818] - InheritedSize[0x0518])
class UInventoryArkCreaturesPanel : public UPrimalUI
{
public:
	struct FName                                       UploadedCreatureListName;                                  // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LocalCreatureListName;                                     // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UploadCreatureButtonName;                                  // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DownloadCreatureButtonName;                                // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DinoSlotButtonTemplate;                                    // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YI5D[0x2D8];                                   // 0x0540(0x02D8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryArkCreaturesPanel");
		return ptr;
	}



	void UploadedDinoSlotButtonSelected(class UWidget* theWidget);
	void LocalDinoSlotButtonSelected(class UWidget* theWidget);
};

// Class ShooterGame.InventoryDinoAncestryPanel
// 0x0078 (FullSize[0x0590] - InheritedSize[0x0518])
class UInventoryDinoAncestryPanel : public UPrimalUI
{
public:
	class UClass*                                      AncestryEntryWidgetTemplate;                               // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P6R3[0x70];                                    // 0x0520(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryDinoAncestryPanel");
		return ptr;
	}



};

// Class ShooterGame.PrimalSubMenuUI
// 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
class UPrimalSubMenuUI : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_0TYZ[0x10];                                    // 0x0518(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalSubMenuUI");
		return ptr;
	}



};

// Class ShooterGame.UI_Inventory
// 0x0388 (FullSize[0x08B0] - InheritedSize[0x0528])
class UUI_Inventory : public UPrimalSubMenuUI
{
public:
	struct FName                                       PanelContainerLeftName;                                    // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PanelContainerCenterName;                                  // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PanelContainerRightName;                                   // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WidgetSwitcherRightName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       QuickActionSlotPanelName;                                  // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       QuickActionSlotDataListName;                               // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PlayerCharacterPanelName;                                  // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PlayerInventoryPanelName;                                  // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoteInventoryPanelName;                                  // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatsPanelName;                                            // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DinoAncestryOverlayName;                                   // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ListSessionsUITemplate;                                    // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SteamInventoryStatusUITemplate;                            // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   ErrorSound;                                                // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SQIG[0x1];                                     // 0x0598(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bHasRemoteInventory;                                       // 0x0599(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OWQS[0x316];                                   // 0x059A(0x0316) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Inventory");
		return ptr;
	}



	void SetInventoryVisibility(bool bVisible);
};

// Class ShooterGame.InventoryQuickSlotsPanel
// 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
class UInventoryQuickSlotsPanel : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_A7I0[0x10];                                    // 0x0518(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryQuickSlotsPanel");
		return ptr;
	}



};

// Class ShooterGame.InventoryPanelWidget
// 0x0228 (FullSize[0x0740] - InheritedSize[0x0518])
class UInventoryPanelWidget : public UPrimalUI
{
public:
	struct FName                                       TabBgSwitcherName;                                         // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InventoryButtonName;                                       // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingButtonName;                                        // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CreaturesButtonName;                                       // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InventoryEnabledEffectName;                                // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingEnabledEffectName;                                 // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SearchTextBoxName;                                         // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TooltipToggleButtonName;                                   // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SortMenuButtonName;                                        // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SortMenuAnchorName;                                        // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowAllButtonName;                                         // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowEngramsButtonName;                                     // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowEngramsBoxName;                                        // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TransferAllButtonName;                                     // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DropAllButtonName;                                         // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NewFolderButtonName;                                       // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DataListSwitcherName;                                      // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InventoryDataListName;                                     // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingDataListName;                                      // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingQueueHeaderBoxName;                                // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingQueueItemsBoxName;                                 // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               CraftQueueItemButtonNames;                                 // 0x05C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       HeaderBoxName;                                             // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InventoryTabLabelName;                                     // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftingTabLabelName;                                      // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArkCreaturesPanelName;                                     // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ClearCraftingQueueButtonName;                              // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ReceivingItemsLabelName;                                   // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0600(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x0610(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsRemoteInventory;                                        // 0x0620(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HEQ1[0x11F];                                   // 0x0621(0x011F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryPanelWidget");
		return ptr;
	}



	void SearchTextChanged(const struct FText& Text);
	class UWidget* OnGetSortContextMenuContent();
	void OnGamepadPressSortIcon();
};

// Class ShooterGame.InventoryStatsPanel
// 0x00E8 (FullSize[0x0600] - InheritedSize[0x0518])
class UInventoryStatsPanel : public UPrimalUI
{
public:
	struct FName                                       TabBgSwitcherName;                                         // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PlayerStatsTabButtonName;                                  // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoteStatsTabButtonName;                                  // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoteStatsTabTextBlockName;                               // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PlayerEnabledEffectName;                                   // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoteEnabledEffectName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatsWidgetSwitcherName;                                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PlayerStatsPanelName;                                      // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HeaderPanelName;                                           // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RootSizeBoxName;                                           // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CharacterStatsPanelUITemplate;                             // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      StructureStatsPanelUITemplate;                             // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ObeliskStatsPanelUITemplate;                               // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0580(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x0590(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TFMC[0x58];                                    // 0x05A0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStatsPanelWidget*                           RemoteStatsPanel;                                          // 0x05F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.InventoryStatsPanel");
		return ptr;
	}



};

// Class ShooterGame.LeaderboardRowWidget
// 0x00C8 (FullSize[0x05E0] - InheritedSize[0x0518])
class ULeaderboardRowWidget : public UPrimalUI
{
public:
	bool                                               bIsHeaderRow;                                              // 0x0518(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K5PJ[0x3];                                     // 0x0519(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ColumnContainerWidgetName;                                 // 0x051C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_66A5[0x4];                                     // 0x0524(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLeaderboardColumnDefinition>        Columns;                                                   // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                DefaultLeaderboardRowTextColor;                            // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DefaultLeaderboardRowBackgroundColor;                      // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DefaultLeaderboardRowBackgroundTexture;                    // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PersonalLeaderboardRowTextColor;                           // 0x0560(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                PersonalLeaderboardRowBackgroundColor;                     // 0x0570(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  PersonalLeaderboardRowBackgroundTexture;                   // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                HeaderLeaderboardRowTextColor;                             // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                HeaderLeaderboardRowBackgroundColor;                       // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  HeaderLeaderboardRowBackgroundTexture;                     // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WAET[0x18];                                    // 0x05B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UHorizontalBox*                              ColumnContainer;                                           // 0x05C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class UTextBlock*>                          ColumnWidgets;                                             // 0x05D0(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.LeaderboardRowWidget");
		return ptr;
	}



	void SetRowContents(const struct FLeaderboardDisplayRow& RowData, float ContainerWidth, float RowHeight, bool IsHeaderRow, bool ManuallySetPlayersOwnRowStyling, bool UsePlayersOwnRowStyling);
};

// Class ShooterGame.PlayerHUDUI
// 0x0160 (FullSize[0x0678] - InheritedSize[0x0518])
class UPlayerHUDUI : public UPrimalUI
{
public:
	struct FString                                     SlotItemsDataListName;                                     // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       PrimaryStatusBarsWidgetName;                               // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SecondaryStatusBarsWidgetName;                             // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CraftQueueItemButtonName;                                  // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExtraProgressBarName;                                      // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     SlotItemsDataListParentPanelName;                          // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       CompassBarWidgetName;                                      // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ElementBarWidgetName;                                      // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FHUDRichTextOverlayData>             RichTextOverlayData;                                       // 0x0568(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<class UPrimalRichTextBlock*>                RichTextBlocks;                                            // 0x0578(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_VFL9[0xA0];                                    // 0x0588(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UProgressBarWidget*                          ExtraProgressBar;                                          // 0x0628(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_W7T1[0x48];                                    // 0x0630(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PlayerHUDUI");
		return ptr;
	}



};

// Class ShooterGame.UI_DinoOrderGroups
// 0x00E8 (FullSize[0x0610] - InheritedSize[0x0528])
class UUI_DinoOrderGroups : public UPrimalSubMenuUI
{
public:
	class UClass*                                      DinoOrderGroupEntryTemplate;                               // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ContextMenuClass;                                          // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AE5K[0xD8];                                    // 0x0538(0x00D8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_DinoOrderGroups");
		return ptr;
	}



	void DinoOrderGroupSelected(class UWidget* theWidget);
	void DinoClassSelected(class UWidget* theWidget);
	void DinoCharSelected(class UWidget* theWidget);
};

// Class ShooterGame.UI_EngramsMenu
// 0x0120 (FullSize[0x0648] - InheritedSize[0x0528])
class UUI_EngramsMenu : public UPrimalSubMenuUI
{
public:
	struct FName                                       ARKPrimeEngramsButtonName;                                 // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ScorchedEarthEngramsButtonName;                            // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TekgramsButtonName;                                        // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LearnEngramButtonTextName;                                 // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AvailablePointsTextName;                                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UnlearnedEngramsButtonName;                                // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AberrationEngramsButtonName;                               // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExtinctionEngramsButtonName;                               // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GenesisEngramsButtonName;                                  // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramTitleLabelName;                                      // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramsDataListName;                                       // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramFilterTextBoxName;                                   // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LearnEngramButtonName;                                     // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P0KV[0xB8];                                    // 0x0590(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_EngramsMenu");
		return ptr;
	}



	void OnEngramsFilterChanged(bool bIsChecked);
	void OnEngramFilterChanged(const struct FText& Text);
	void EngramSelected(class UDataListEntryButton* theButton);
	void EngramDoubleClicked(class UDataListEntryButton* theButton);
};

// Class ShooterGame.UI_MissionList
// 0x0580 (FullSize[0x0AA8] - InheritedSize[0x0528])
class UUI_MissionList : public UPrimalSubMenuUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionListContainerName;                                  // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetailsContainerName;                               // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_MissionNameTextBlockName;                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_MissionDescriptionTextBlockName;            // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_StartMissionButtonName;                     // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_StartMissionButtonTextName;                 // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_LeaderboardsButtonName;                     // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_LeaderboardsButtonTextName;                 // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionDetails_DifficultyTextBlockName;                    // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionStatusPanelName;                                    // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MetaTagInfoClass;                                          // 0x0588(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionList_WidgetType;                                    // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionRequirement_WidgetType;                             // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionObjective_WidgetType;                               // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionTimer_WidgetType;                                   // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      WorldBuffEffectListEntry_WidgetType;                       // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionRequirementEntry_WidgetType;                        // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     StartButtonDisplayText_StartMission;                       // 0x05C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     StartButtonDisplayText_LeaveMission;                       // 0x05D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     StartButtonDisplayText_EnableStatTracker;                  // 0x05E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     StartButtonDisplayText_DisableStatTracker;                 // 0x05F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MissionList_EntryButtonWidgetName;                         // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_NameWidgetName;                                // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_DescWidgetName;                                // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_ErrorTextWidgetName;                           // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_EligibilityWidgetName;                         // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_StartButtonTextWidgetName;                     // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionList_StartButtonWidgetName;                         // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ArcticIcon;                                                // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BogIcon;                                                   // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  LunarIcon;                                                 // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OceanIcon;                                                 // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  VolcanicIcon;                                              // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SoloIcon;                                                  // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MultiplayerIcon;                                           // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TableWidth;                                                // 0x0670(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatestScoreTableWidth;                                     // 0x0674(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxLeaderboardRowsToDisplay;                               // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x067C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x068C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GV8G[0x4];                                     // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  TabBackgroundTexture;                                      // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TabMirroredBackgroundTexture;                              // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                AlphaMissionColor;                                         // 0x06B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                BetaMissionColor;                                          // 0x06C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GammaMissionColor;                                         // 0x06D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                ActiveMissionColor;                                        // 0x06E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                InactiveMissionColor;                                      // 0x06F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                AvailableMissionColor;                                     // 0x0700(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                UnavailableMissionColor;                                   // 0x0710(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DefaultTextColor;                                          // 0x0720(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GlitchTintColor;                                           // 0x0730(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GlitchTextColor;                                           // 0x0740(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MD5S[0x2C8];                                   // 0x0750(0x02C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULeaderboardRowWidget*                       HeaderRowWidget;                                           // 0x0A18(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UVerticalBox*                                RowContainer;                                              // 0x0A20(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	TArray<class ULeaderboardRowWidget*>               RowWidgets;                                                // 0x0A28(0x0010) (ZeroConstructor, Transient, Protected)
	class ULeaderboardRowWidget*                       LatestScoreRowWidget;                                      // 0x0A38(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UVerticalBox*                                LatestPlayerScoreRowContainer;                             // 0x0A40(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_GGWD[0x60];                                    // 0x0A48(0x0060) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_MissionList");
		return ptr;
	}



	void OnMissionFilterChanged(const struct FText& Text);
};

// Class ShooterGame.UI_OptionsMenu
// 0x0408 (FullSize[0x0930] - InheritedSize[0x0528])
class UUI_OptionsMenu : public UPrimalSubMenuUI
{
public:
	struct FName                                       SaveButtonName;                                            // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ApplyButtonName;                                           // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResetButtonName;                                           // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionWidthTextBoxName;                                // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionHeightTextBoxName;                               // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionsComboBoxName;                                   // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WindowModeComboBoxName;                                    // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GraphicsQualityComboBoxName;                               // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionScaleSliderName;                                 // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ViewDistanceComboBoxName;                                  // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AntiAliasingComboBoxName;                                  // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PostProcessingComboBoxName;                                // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShadowsComboBoxName;                                       // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TexturesComboBoxName;                                      // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EffectsComboBoxName;                                       // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AudioVolumeSliderName;                                     // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UIScalingSliderName;                                       // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FKeyBindingItem>                     KeyBindings;                                               // 0x05B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       InvertMouseYCheckBoxName;                                  // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CameraShakeScaleSliderName;                                // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FirstPersonRidingCheckboxName;                             // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleToTalkCheckBoxName;                                  // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       KeyBindingsPanelName;                                      // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       XBoxControlsPanelName;                                     // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleExtendedHUDInfoCheckboxName;                         // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AE3G[0x330];                                   // 0x0600(0x0330) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_OptionsMenu");
		return ptr;
	}



	void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnWidthChanged(const struct FText& Text);
	void OnResolutionsComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnHeightChanged(const struct FText& Text);
	void OnGraphicsQualityComboBoxChanged(const struct FString& SelectedItem);
	void OnGraphicsPresetValueChanged();
};

// Class ShooterGame.UI_OptionsMenu_UWP
// 0x0420 (FullSize[0x0948] - InheritedSize[0x0528])
class UUI_OptionsMenu_UWP : public UPrimalSubMenuUI
{
public:
	struct FName                                       SaveButtonName;                                            // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ApplyButtonName;                                           // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResetButtonName;                                           // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionWidthTextBoxName;                                // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionHeightTextBoxName;                               // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionsComboBoxName;                                   // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WindowModeComboBoxName;                                    // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GraphicsQualityComboBoxName;                               // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResolutionScaleSliderName;                                 // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ViewDistanceComboBoxName;                                  // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AntiAliasingComboBoxName;                                  // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PostProcessingComboBoxName;                                // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShadowsComboBoxName;                                       // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TexturesComboBoxName;                                      // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EffectsComboBoxName;                                       // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AudioVolumeSliderName;                                     // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FKeyBindingItem>                     KeyBindings;                                               // 0x05B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       InvertMouseYCheckBoxName;                                  // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CameraShakeScaleSliderName;                                // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FirstPersonRidingCheckboxName;                             // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleToTalkCheckBoxName;                                  // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleExtendedHUDInfoCheckboxName;                         // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VOYA[0x360];                                   // 0x05E8(0x0360) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_OptionsMenu_UWP");
		return ptr;
	}



	void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnWidthChanged(const struct FText& Text);
	void OnViewDistanceComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnResolutionsComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnResolutionScaleChanged(float SliderValue);
	void OnHeightChanged(const struct FText& Text);
	void OnGraphicsQualityComboBoxChanged(const struct FString& SelectedItem);
	void OnGraphicsPresetValueChanged();
};

// Class ShooterGame.UI_SurvivorProfile
// 0x03F0 (FullSize[0x0918] - InheritedSize[0x0528])
class UUI_SurvivorProfile : public UPrimalSubMenuUI
{
public:
	unsigned char                                      UnknownData_B8GS[0x268];                                   // 0x0528(0x0268) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundWave*                                  AsyncLoadedSoundWave;                                      // 0x0790(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_J23P[0x58];                                    // 0x0798(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInstanceDynamic*>            ExplorerNoteDynamicMaterials;                              // 0x07F0(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_LP4X[0x40];                                    // 0x0800(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   AsyncLoadedSoundCue;                                       // 0x0840(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_AXLS[0x50];                                    // 0x0848(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGenericDataListEntry*                       AsyncLoadingDinoEntry;                                     // 0x0898(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  AsyncLoadedDinoTexture;                                    // 0x08A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UTexture2D*                                  AsyncLoadedDialogueAnimTexture;                            // 0x08A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UAudioComponent*                             DialogueSoundComponent;                                    // 0x08B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	bool                                               bShowingDossiers;                                          // 0x08B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bShowingScorchedEarth;                                     // 0x08B9(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_U723[0x2];                                     // 0x08BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ExplorerNoteMaterialParameterName;                         // 0x08BC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ExplorerNoteAnimTextureParamName;                          // 0x08C4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ExplorerNoteAnimTextureStartTimeParamName;                 // 0x08CC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ExplorerNoteAnimTextureDurationParamName;                  // 0x08D4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplorerNoteAnimTextureDurationOffset;                     // 0x08DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplorerNoteFadeInSpeed;                                   // 0x08E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplorerNoteFadeOutSpeed;                                  // 0x08E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ShowDossierTitleDelayTime;                                 // 0x08E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ExplorerNoteExtraCloseTime;                                // 0x08EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	TArray<struct FString>                             NoteCategoryNames;                                         // 0x08F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	TArray<struct FSlateBrush>                         CategoryIcons;                                             // 0x0900(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	unsigned char                                      UnknownData_EGOA[0x8];                                     // 0x0910(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SurvivorProfile");
		return ptr;
	}



	void OnSubtitlesCheckboxChanged(bool InNewState);
	void OnNoteNameFilterChanged(const struct FText& Text);
	void HideDossier();
};

// Class ShooterGame.UI_TamingList
// 0x0108 (FullSize[0x0630] - InheritedSize[0x0528])
class UUI_TamingList : public UPrimalSubMenuUI
{
public:
	class UClass*                                      TamingListEntryTemplate;                                   // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  POI_Icon;                                                  // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_80SC[0xF8];                                    // 0x0538(0x00F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_TamingList");
		return ptr;
	}



	void SearchTextChanged(const struct FText& Text);
};

// Class ShooterGame.UI_TribeManager
// 0x04B0 (FullSize[0x09D8] - InheritedSize[0x0528])
class UUI_TribeManager : public UPrimalSubMenuUI
{
public:
	struct FName                                       CreateNewTribeButtonName;                                  // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LeaveTribeButtonName;                                      // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TribeNameLabelName;                                        // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TribeNameEditBoxName;                                      // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemovePlayerFromTribeButtonName;                           // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManageTribePanelName;                                      // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NewTribePanelName;                                         // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ReverseLogOrderButtonName;                                 // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribePlayerEntryButtonTemplate;                            // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeWarEntryButtonTemplate;                               // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeAllianceEntryButtonTemplate;                          // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeAllianceMemberEntryButtonTemplate;                    // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      RankEntryButtonTemplate;                                   // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x05A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastPlayerRefreshTime;                                     // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NPRS[0x418];                                   // 0x05C0(0x0418) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_TribeManager");
		return ptr;
	}



	void TribeWarEntryButtonSelected(class UWidget* theWidget);
	void TribeAllianceMemberButtonSelected(class UWidget* theWidget);
	void TribeAllianceEntryButtonSelected(class UWidget* theWidget);
	void RankGroupButtonSelected(class UWidget* theWidget);
	void PlayerEntryButtonSelected(class UWidget* theWidget);
	void OnGroupRankSelected(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
};

// Class ShooterGame.StatsPanelWidget
// 0x02E0 (FullSize[0x07F8] - InheritedSize[0x0518])
class UStatsPanelWidget : public UPrimalUI
{
public:
	struct FName                                       MultiUseButton1Name;                                       // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MultiUseButton2Name;                                       // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MultiUseButton3Name;                                       // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FCustomButtonWidgetStyle                    DefaultMultiuseButtonExtendedStyle;                        // 0x0530(0x0048) (Edit, DisableEditOnInstance)
	struct FButtonStyle                                DefaultMultiuseButtonStyle;                                // 0x0578(0x0248) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_YDGB[0x38];                                    // 0x07C0(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StatsPanelWidget");
		return ptr;
	}



};

// Class ShooterGame.StatsPanelWidget_Character
// 0x0318 (FullSize[0x0B10] - InheritedSize[0x07F8])
class UStatsPanelWidget_Character : public UStatsPanelWidget
{
public:
	struct FName                                       PlayerStatusBoxName;                                       // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceBoxName;                                         // 0x0800(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UpgradesBoxName;                                           // 0x0808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EquipmentDataListPanelName;                                // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DisabledEquipmentPanelName;                                // 0x0818(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GenderSwitcherName;                                        // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NameLabelName;                                             // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LevelLabelName;                                            // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TribeLabelName;                                            // 0x0838(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BiomeRegionLabelName;                                      // 0x0840(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpawnRegionLabelName;                                      // 0x0848(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TameLimitLabelName;                                        // 0x0850(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArmorLabelName;                                            // 0x0858(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HypothermalInsulationLabelName;                            // 0x0860(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HyperthermalInsulationLabelName;                           // 0x0868(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HypothermalInsulationNameLabelName;                        // 0x0870(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HyperthermalInsulationNameLabelName;                       // 0x0878(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceBarName;                                         // 0x0880(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceLabelName;                                       // 0x0888(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatWidgetNames[0xC];                                      // 0x0890(0x0060) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ImprintingStatWidgetName;                                  // 0x08F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowAncestorsButtonName;                                   // 0x08F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumUpgradePointsAvailableLabelName;                        // 0x0900(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HyperthermalInsulationBoxName;                             // 0x0908(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HypothermalInsulationBoxName;                              // 0x0910(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TameLimitBoxName;                                          // 0x0918(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatDayValueTextBlockName;                                 // 0x0920(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatTimeValueTextBlockName;                                // 0x0928(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatTmpValueTextBlockName;                                 // 0x0930(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatWindValueTextBlockName;                                // 0x0938(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZWDA[0x1D0];                                   // 0x0940(0x01D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StatsPanelWidget_Character");
		return ptr;
	}



};

// Class ShooterGame.StatsPanelWidget_Obelisk
// 0x0080 (FullSize[0x0878] - InheritedSize[0x07F8])
class UStatsPanelWidget_Obelisk : public UStatsPanelWidget
{
public:
	struct FName                                       NameLabelName;                                             // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DescriptionLabelName;                                      // 0x0800(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UploadCharacterDataButtonName;                             // 0x0808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TravelToAnotherServerButtonName;                           // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshArkButtonName;                                      // 0x0818(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArkStorageStatName;                                        // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArkDinoStatName;                                           // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StorageStatName;                                           // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TBRM[0x40];                                    // 0x0838(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StatsPanelWidget_Obelisk");
		return ptr;
	}



};

// Class ShooterGame.StatsPanelWidget_Structure
// 0x0080 (FullSize[0x0878] - InheritedSize[0x07F8])
class UStatsPanelWidget_Structure : public UStatsPanelWidget
{
public:
	struct FName                                       EquipmentDataListPanelName;                                // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DisabledEquipmentPanelName;                                // 0x0800(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StructureNameLabelName;                                    // 0x0808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OwnerLabelName;                                            // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DescriptionLabelName;                                      // 0x0818(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HealthStatName;                                            // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StorageStatName;                                           // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightStatName;                                            // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RREM[0x40];                                    // 0x0838(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StatsPanelWidget_Structure");
		return ptr;
	}



};

// Class ShooterGame.StructureStatWidget
// 0x0070 (FullSize[0x0588] - InheritedSize[0x0518])
class UStructureStatWidget : public UPrimalUI
{
public:
	struct FText                                       StatName;                                                  // 0x0518(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData_3KWY[0x10];                                    // 0x0518(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UTexture2D*                                  StatIcon;                                                  // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatTextBlockName;                                         // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatValueBlockName;                                        // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatImageName;                                             // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatBarName;                                               // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_W464[0x20];                                    // 0x0568(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StructureStatWidget");
		return ptr;
	}



};

// Class ShooterGame.UI_AdminMangment
// 0x0488 (FullSize[0x09A0] - InheritedSize[0x0518])
class UUI_AdminMangment : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_TGUT[0x58];                                    // 0x0518(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       FPSValueName;                                              // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumConnectedName;                                          // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumBannedName;                                             // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumWhiteListedName;                                        // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MaxStructuresInRangeName;                                  // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveFromWhiteListButtonName;                             // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelCheatCommandButtonName;                              // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExcuteCheatCommandButtonName;                              // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CopyPlayerIDCheatCommandButtonName;                        // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CopySteamIDCheatCommandButtonName;                         // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CheatsScrollBoxName;                                       // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CheatSlotButtonTemplate;                                   // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K0B5[0x10];                                    // 0x05D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       CancelManualBanButtonName;                                 // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExcuteManualBanButtonName;                                 // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelManualwhiteListedButtonName;                         // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExcuteManualwhiteListedButtonName;                         // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       KickButtonName;                                            // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshButtonName;                                         // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       paramtersPanelName;                                        // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualBanPanelName;                                        // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualWhiteListedPaneName;                                 // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConnectedPlayerPanelName;                                  // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshingConnectedPlayerPanelName;                        // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BannedPlayerPanelName;                                     // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshingBannedPlayerPanelName;                           // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WhiteListedPlayerPanelName;                                // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshingWhiteListedPlayerPanelName;                      // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ParmterTextFieldName;                                      // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ChetFunctionSelectedImageName;                             // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DifficultyOffsetName;                                      // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GlobalVoiceChatName;                                       // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ProximityChatName;                                         // 0x0678(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NoTributeDownloadsName;                                    // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllowThirdPersonPlayerName;                                // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AlwaysNotifyPlayerLeftName;                                // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DontAlwaysNotifyPlayerJoinedName;                          // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AddToWhiteListButtonName;                                  // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualAddToWhiteListButtonName;                            // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerHardcoreName;                                        // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerPVEName;                                             // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerCrosshairName;                                       // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerForceNoHUDName;                                      // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FunctionDiscriptionName;                                   // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowMapPlayerLocationName;                                 // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerPasswordName;                                        // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerAdminPasswordName;                                   // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PositionName;                                              // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MessgaeOfTheDayName;                                       // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SetMessgaeOfTheDayName;                                    // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllConnectedPlayerScrollBoxName;                           // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllBannedPlayerScrollBoxName;                              // 0x0710(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllWhiteListedPlayerScrollBoxName;                         // 0x0718(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerScrollBoxName;                                       // 0x0720(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ServerInfoButtonTemplate;                                  // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BanButtonName;                                             // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualBanButtonName;                                       // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EnterPramterName;                                          // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UnBanButtonName;                                           // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseButtonName;                                           // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DirectMessageTextFieldName;                                // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DirectMessageButtonName;                                   // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorBlockName;                                            // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       errorBlockManualBanName;                                   // 0x0778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       errorBlockManualWhiteListedName;                           // 0x0780(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       errorBlockMessageOfTheDayName;                             // 0x0788(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualBanningSteamIDTextFieldName;                         // 0x0790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ManualWhiteListedSteamIDTextFieldName;                     // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AShooterPlayerController*                    OwnerPlayerController;                                     // 0x07A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       CustomGameUIButtonName;                                    // 0x07A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7M86[0x48];                                    // 0x07B0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxDirectMessageChars;                                     // 0x07F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxSteamIDChars;                                           // 0x07FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxMessageofthedayChars;                                   // 0x0800(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RK37[0x19C];                                   // 0x0804(0x019C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_AdminMangment");
		return ptr;
	}



	void OnTextCommittedWhiteListed(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextCommittedMessageOfTheDay(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextCommittedManualBan(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextChangedMessageOfTheDay(const struct FText& Text);
	void OnTextChangedManulaBan(const struct FText& Text);
	void OnTextChangedManualWhiteLised(const struct FText& Text);
	void OnTextChanged(const struct FText& Text);
};

// Class ShooterGame.UI_AllPlayersList
// 0x0090 (FullSize[0x05A8] - InheritedSize[0x0518])
class UUI_AllPlayersList : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllPlayersListBoxName;                                     // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_41JD[0x78];                                    // 0x0530(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_AllPlayersList");
		return ptr;
	}



	void OnTribeNameFilterChanged(const struct FText& Text);
	void OnPlayerNameFilterChanged(const struct FText& Text);
};

// Class ShooterGame.UI_ChangeTransponderFreqencyEntry
// 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
class UUI_ChangeTransponderFreqencyEntry : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FrequencyNameTextBoxName;                                  // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YCSQ[0x20];                                    // 0x0528(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ChangeTransponderFreqencyEntry");
		return ptr;
	}



	void HandleFilterStringTextChanged(const struct FText& NewText);
};

// Class ShooterGame.UI_ChatBox
// 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
class UUI_ChatBox : public UPrimalUI
{
public:
	class UClass*                                      ChatMessageUITemplate;                                     // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ServerBroadCastMessageUITemplate;                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     ChatBoxName;                                               // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     EditTextBoxName;                                           // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     SendingModelLabelName;                                     // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DisplayModeLabelName;                                      // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CanavasPanelName;                                          // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     ServerSenderText;                                          // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                ChatHistoryLimit;                                          // 0x0578(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VGJC[0x54];                                    // 0x057C(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ChatBox");
		return ptr;
	}



	void HandleChatTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void HandleChatTextChanged(const struct FText& Text);
};

// Class ShooterGame.UI_ChatMessage
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_ChatMessage : public UPrimalUI
{
public:
	struct FString                                     ChatBlockName;                                             // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_3363[0x48];                                    // 0x0528(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ChatMessage");
		return ptr;
	}



};

// Class ShooterGame.UI_ConsoleDedicated
// 0x0230 (FullSize[0x0748] - InheritedSize[0x0518])
class UUI_ConsoleDedicated : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_HLRS[0x90];                                    // 0x0518(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SlotButtonTemplate;                                        // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxDirectMessageChars;                                     // 0x05B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExitToMenuButtonName;                                      // 0x05B4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AdminUIButtonName;                                         // 0x05BC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BannedPlayerPanelName;                                     // 0x05C4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshingBannedPlayerPanelName;                           // 0x05CC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllBannedPlayerScrollBoxName;                              // 0x05D4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UnBanButtonName;                                           // 0x05DC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TextMessageEditableBoxName;                                // 0x05E4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BroadcastingVoiceTextBlockName;                            // 0x05EC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerNameTextBlockName;                                   // 0x05F4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServerPassTextBlockName;                                   // 0x05FC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InviteFriendsButtonName;                                   // 0x0604(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BanButtonName;                                             // 0x060C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumConnectedName;                                          // 0x0614(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AllConnectedPlayerScrollBoxName;                           // 0x061C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConnectedPlayerPanelName;                                  // 0x0624(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshingConnectedPlayerPanelName;                        // 0x062C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshButtonName;                                         // 0x0634(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DirectMessageTextFieldName;                                // 0x063C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DirectMessageButtonName;                                   // 0x0644(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorBlockName;                                            // 0x064C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       KickButtonName;                                            // 0x0654(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NumBannedName;                                             // 0x065C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CT02[0xE4];                                    // 0x0664(0x00E4) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ConsoleDedicated");
		return ptr;
	}



	void PlayerDoubleClicked(class UDataListEntryButton* theButton);
	void OnTextChanged(const struct FText& Text);
	void HandleTextMessageTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
};

// Class ShooterGame.UI_Cooking
// 0x0158 (FullSize[0x0670] - InheritedSize[0x0518])
class UUI_Cooking : public UPrimalUI
{
public:
	TArray<class UClass*>                              DrinkRecipeTemplates;                                      // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              FoodRecipeTemplates;                                       // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      NoteItemTemplate;                                          // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9VOF[0x70];                                    // 0x0540(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FColor>                              PaletteColors;                                             // 0x05B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	unsigned char                                      UnknownData_TI4S[0x58];                                    // 0x05C0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInstanceDynamic*                    ItemIconMIC;                                               // 0x0618(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_RY45[0x50];                                    // 0x0620(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Cooking");
		return ptr;
	}



	void RefreshItemLists();
	void OnRedSliderValueChanged(float SliderValue);
	void OnItemNameChanged(const struct FText& Text);
	void OnItemDescriptionChanged(const struct FText& Text);
	void OnGreenSliderValueChanged(float SliderValue);
	void OnBlueSliderValueChanged(float SliderValue);
	void MyInventoryItemDoubleClicked(class UDataListEntryButton* theButton);
};

// Class ShooterGame.UI_DyeItem
// 0x0278 (FullSize[0x0790] - InheritedSize[0x0518])
class UUI_DyeItem : public UPrimalUI
{
public:
	struct FString                                     DyeItemsDataListName;                                      // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     BrushItemsDataListName;                                    // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       CloseButtonName;                                           // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadPaintingsButtonName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SavePaintingsButtonName;                                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResetCameraButtonName;                                     // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemLabelName;                                             // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DyeLabelName;                                              // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               DyeRegionButtonsNames;                                     // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DyeButtonName;                                             // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DyeIconImageName;                                          // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DurabilityProgressBarName;                                 // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemIconImageName;                                         // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PreviewWidgetName;                                         // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PaintLabelName;                                            // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EraseAllButtonName;                                        // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BackgroundImageName;                                       // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      PantingListUITemplate;                                     // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SaveDialogUITemplate;                                      // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V3GR[0x14];                                    // 0x05D0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       CursorWidgetName;                                          // 0x05E4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YD8E[0x1A4];                                   // 0x05EC(0x01A4) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_DyeItem");
		return ptr;
	}



	void DyeItemDoubleClicked(class UDataListEntryButton* theButton);
};

// Class ShooterGame.UI_GenericConfirmationDialog
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_GenericConfirmationDialog : public UPrimalUI
{
public:
	struct FName                                       AcceptButtonName;                                          // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MessageLabelName;                                          // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R9CE[0x38];                                    // 0x0538(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_GenericConfirmationDialog");
		return ptr;
	}



	void OnConfirmationDialogClosedEvent__DelegateSignature(bool bAccept);
};

// Class ShooterGame.UI_Hairstyle
// 0x0188 (FullSize[0x06A0] - InheritedSize[0x0518])
class UUI_Hairstyle : public UPrimalUI
{
public:
	struct FName                                       TabBgSwitcherName;                                         // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HeadHairEnabledEffectName;                                 // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FacialHairEnabledEffectName;                               // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x0530(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x0540(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HairStyleEntryTemplate;                                    // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QEZG[0xD8];                                    // 0x0558(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    TheHairStyleSelectedDelegate;                              // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClearHeadHairButtonClickedDelegate;                        // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClearFacialHairButtonClickedDelegate;                      // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_3K4K[0x40];                                    // 0x0660(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Hairstyle");
		return ptr;
	}



	void OnHeadHairStyleButtonClicked(class UWidget* theWidget);
	void OnHairStyleAccepted__DelegateSignature(int newHeadHairIndex, int newFacialHairIndex, float NewHeadHairPercent, float NewFacialHairPercent, int HeadHairDyeID1, int HeadHairDyeID2, int FacialHairDyeID1, int FacialHairDyeID2);
	void OnFacialHairStyleButtonClicked(class UWidget* theWidget);
	void ClearHairButtonClicked__DelegateSignature();
};

// Class ShooterGame.UI_HelpPage
// 0x00F0 (FullSize[0x0608] - InheritedSize[0x0518])
class UUI_HelpPage : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_AQDD[0xF0];                                    // 0x0518(0x00F0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_HelpPage");
		return ptr;
	}



};

// Class ShooterGame.UI_HexagonConversion
// 0x08E0 (FullSize[0x0DF8] - InheritedSize[0x0518])
class UUI_HexagonConversion : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_XM7N[0x138];                                   // 0x0518(0x0138) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ItemIconName;                                              // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemIconPanelName;                                         // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemNameTextBoxName;                                       // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CostPanelName;                                             // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CostCountTextBoxName;                                      // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CurrentCountTextBoxName;                                   // 0x0678(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SubtotalCountTextBoxName;                                  // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemainingCountTextBoxName;                                 // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AvailableItemsScrollboxName;                               // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConvertButtonName;                                         // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseButtonName;                                           // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemQuantityTextBoxName;                                   // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemDescriptionTextBoxName;                                // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemWeightValueTextBlockName;                              // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemInventoryQuantityValueTextBlockName;                   // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConvertButtonItemIconName;                                 // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       QuantitySelectorTextBlockName;                             // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConvertButtonSubtotalTextBlockName;                        // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConvertButtonQuantityTextBlockName;                        // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightBeforePurchaseTextBlockName;                         // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightAfterPurchaseTextBlockName;                          // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightBeforePurchaseProgressBarName;                       // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightAfterPurchaseProgressBarName;                        // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       IncreaseQuantityButtonName;                                // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       IncreaseQuantity10ButtonName;                              // 0x0710(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MaxIncreaseQuantityButtonName;                             // 0x0718(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DecreaseQuantityButtonName;                                // 0x0720(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DecreaseQuantity10ButtonName;                              // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MaxDecreaseQuantityButtonName;                             // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SearchTextBoxName;                                         // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                AvailableItemsPerRow;                                      // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L0UE[0x4];                                     // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<bool>                                       CurrentAvailableItems;                                     // 0x0748(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_8AIO[0x10];                                    // 0x0758(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EmptySlotButtonTemplate;                                   // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FCustomButtonWidgetStyle                    UnavailableItemButtonStyle;                                // 0x0778(0x0048) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_F948[0x48];                                    // 0x07C0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCustomButtonWidgetStyle                    UnavailableConvertButtonStyle;                             // 0x0808(0x0048) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_VWLA[0x48];                                    // 0x0850(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSlateColor                                 NotAbleToPurchaseTextColor;                                // 0x0898(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 AbleToPurchaseTextColor;                                   // 0x08C0(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 NeutralTextColor;                                          // 0x08E8(0x0028) (Edit, DisableEditOnInstance)
	struct FCompanionReactionData                      PurchaseItemReaction;                                      // 0x0910(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      CloseStoreReactionNoPurchase;                              // 0x09B0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      CloseStoreReactionDidPurchase;                             // 0x0A50(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      OpenStoreReaction;                                         // 0x0AF0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      OpenStoreReactionSale;                                     // 0x0B90(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      OpenStoreReactionChange;                                   // 0x0C30(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCompanionReactionData                      OpenStoreReactionNewItemUnlocked;                          // 0x0CD0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData_SJZO[0x2];                                     // 0x0D70(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               DebugTestSaleReaction;                                     // 0x0D72(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               DebugTestChangeReaction;                                   // 0x0D73(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               DebugTestNewReaction;                                      // 0x0D74(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SYZH[0x3];                                     // 0x0D75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   StoreOpenSound;                                            // 0x0D78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   StoreCloseSound;                                           // 0x0D80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                RequiredQuantity;                                          // 0x0D88(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3T4E[0x4];                                     // 0x0D8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UHexagonTradableOption*                      CurrentTradableItemOption;                                 // 0x0D90(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FSlateColor                                 WeightTextColor;                                           // 0x0D98(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 OverencumberedTextColor;                                   // 0x0DC0(0x0028) (Edit, DisableEditOnInstance)
	int                                                ItemRow;                                                   // 0x0DE8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ItemColumn;                                                // 0x0DEC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZC3L[0x8];                                     // 0x0DF0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_HexagonConversion");
		return ptr;
	}



	void TradableItemSelected(class UWidget* theWidget);
	void PopulateAvailableTradeItems(TArray<bool> AvailableItems);
	void OnSearchTextChanged(const struct FText& Text);
	void HideItem(int ItemIndex);
	int GetWidgetIndexOfAssociatedItemIndex(int ItemIndex);
	int GetCurrentlySelectedTradeItemWidgetIndex();
	void FilterAvailableTradeItems(TArray<bool> AvailableTradableItems, const struct FString& FilterText);
};

// Class ShooterGame.UI_HostSession
// 0x0D28 (FullSize[0x1240] - InheritedSize[0x0518])
class UUI_HostSession : public UPrimalUI
{
public:
	TArray<struct FMapDescription>                     MapDescriptionsArray;                                      // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ProceduralButtonName;                                      // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DeleteProceduralArkButtonName;                             // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HostButtonName;                                            // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HostDedicatedButtonName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HostListenButtonName;                                      // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UpdateModsButtonName;                                      // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ProgressTextName;                                          // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SessionsPanelName;                                         // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ClearLocalDataButtonName;                                  // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConnectingPanelName;                                       // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordAcceptButtonName;                                  // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordCancelButtonName;                                  // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordTextFieldName;                                     // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordAdminTextFieldName;                                // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SessionNameTextFieldName;                                  // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordPanelName;                                         // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorBlockName;                                            // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ProceduralSettingsTemplate;                                // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O8FP[0x4];                                     // 0x05D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxPasswordChars;                                          // 0x05D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxSessionNameChars;                                       // 0x05D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x05DC(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x05EC(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6LA3[0xC44];                                   // 0x05FC(0x0C44) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_HostSession");
		return ptr;
	}



	void SlotButtonSelected(class UWidget* theWidget);
	void OnSliderValueChanged(float SliderValue);
	void OnSessionPasswordTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnSessionPasswordTextChanged(const struct FText& Text);
	void OnSessionNameTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnSessionNameTextChanged(const struct FText& Text);
	void OnNumericValueCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnDeleteMapServerDataButtonClicked(class UWidget* theWidget);
	void OnDeleteMapSaveDataButtonClicked(class UWidget* theWidget);
	void OnAdminPasswordTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnAdminPasswordTextChanged(const struct FText& Text);
	void ModSelected(class UWidget* theWidget);
	void EngramDoubleClicked(class UDataListEntryButton* theButton);
	void ActiveModSelected(class UWidget* theWidget);
};

// Class ShooterGame.UI_Hub
// 0x0218 (FullSize[0x0730] - InheritedSize[0x0518])
class UUI_Hub : public UPrimalUI
{
public:
	struct FName                                       TopRecenteringSpacerName;                                  // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       InventoryMenuButtonName;                                   // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EngramsMenuButtonName;                                     // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TribeManagerMenuButtonName;                                // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TameGroupsMenuButtonName;                                  // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SurvivorProfileMenuButtonName;                             // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissionListMenuButtonName;                                 // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OptionsMenuButtonName;                                     // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SubMenuWidgetSwitcherName;                                 // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseHubButtonName;                                        // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HexagonCurrencyValuePanelName;                             // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HexagonCurrencyValueTextBlockName;                         // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      InventoryUITemplate;                                       // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TribeManagerUITemplate;                                    // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      EngramsMenuUITemplate;                                     // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TameGroupsUITemplate;                                      // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SurvivorProfileUITemplate;                                 // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionListUITemplate;                                     // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OptionsMenuUITemplate;                                     // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TamingListUITemplate;                                      // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   TabSwitchSound;                                            // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P6ZO[0x68];                                    // 0x05C0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SelectedMissionEntryIndex;                                 // 0x0628(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                SelectedBiomeFilterMask;                                   // 0x062C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FDUN[0x100];                                   // 0x0630(0x0100) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Hub");
		return ptr;
	}



	void RecenterHub();
};

// Class ShooterGame.UI_HudOverlay
// 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
class UUI_HudOverlay : public UPrimalUI
{
public:
	struct FName                                       HudOverlayWidgetName;                                      // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XT4W[0x18];                                    // 0x0520(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_HudOverlay");
		return ptr;
	}



	void ShowOverlayTooltip(class AShooterPlayerController* HUDOwner, class UObject* SponsorObject, class UClass* ToolTipPrefab, const struct FVector2D& ScreenPos, TEnumAsByte<UMG_EAlignHorizontalUI> HorizontalAlignment, TEnumAsByte<UMG_EAlignVerticalUI> VerticalAlignment, const struct FVector2D& Padding, const struct FVector2D& OverlayScale, bool bRetainScreenProjectionFromWorld, const struct FVector& ScreenProjectionWorldPosition, const struct FVector2D& ScreenProjectionPositionOffset);
};

// Class ShooterGame.UI_LeaderboardWidget
// 0x0050 (FullSize[0x0568] - InheritedSize[0x0518])
class UUI_LeaderboardWidget : public UPrimalUI
{
public:
	struct FName                                       LeaderboardHeaderContainerName;                            // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LeaderboardRowContainerName;                               // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseButtonName;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TableWidth;                                                // 0x0530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ANKO[0x4];                                     // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPanelWidget*                                HeaderContainer;                                           // 0x0538(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class ULeaderboardRowWidget*                       HeaderRowWidget;                                           // 0x0540(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UButton*                                     CloseButton;                                               // 0x0548(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UVerticalBox*                                RowContainer;                                              // 0x0550(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class ULeaderboardRowWidget*>               RowWidgets;                                                // 0x0558(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_LeaderboardWidget");
		return ptr;
	}



	void SetRows(class UClass* LeaderboardRowWidget, const struct FLeaderboardDisplayRow& HeaderRow, TArray<struct FLeaderboardDisplayRow> Rows);
	void SetLeaderboardWidgetVisible(bool bIsVisible);
};

// Class ShooterGame.UI_ListCharacterData
// 0x02E8 (FullSize[0x0800] - InheritedSize[0x0518])
class UUI_ListCharacterData : public UPrimalUI
{
public:
	struct FName                                       DownloadButtonName;                                        // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterStatsPanelName;                                   // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      CharacterSlotButtonTemplate;                               // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterLabelName;                                        // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceLabelName;                                       // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceBarName;                                         // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterHypoThermalInsulationLabelName;                   // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterHyperThermalInsulationLabelName;                  // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatsLabelNames[0xC];                                      // 0x0568(0x0060) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SteamInventoryStatusUITemplate;                            // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3TVU[0x230];                                   // 0x05D0(0x0230) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ListCharacterData");
		return ptr;
	}



	void OnArkCharacterPlayerDataChosen__DelegateSignature(TArray<unsigned char> ChoosenPlayerDataBytes);
	void CharacterSlotButtonSelected(class UWidget* theWidget);
};

// Class ShooterGame.UI_ListSessions
// 0x0638 (FullSize[0x0B50] - InheritedSize[0x0518])
class UUI_ListSessions : public UPrimalUI
{
public:
	struct FSlateColor                                 SearchingColor;                                            // 0x0518(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 SearchingCompleteColor;                                    // 0x0540(0x0028) (Edit, DisableEditOnInstance)
	struct FName                                       JoinButtonName;                                            // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RefreshButtonName;                                         // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FavoritesButtonName;                                       // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FavoritesButtonLabelName;                                  // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RentYourOwnServerButtonName;                               // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SearchingTextBlockName;                                    // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SessionsPanelName;                                         // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FindSessionTextFieldName;                                  // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordAcceptButtonName;                                  // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DarkBGName;                                                // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordCancelButtonName;                                  // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordTextFieldName;                                     // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PasswordPanelName;                                         // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorBlockName;                                            // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ServersCountBlockName;                                     // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowProtectedSessionsCheckBoxName;                         // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowAvailableServersCheckBoxName;                          // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShowServersTypeComboBoxName;                               // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OfficialStatusLabelName;                                   // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxPasswordChars;                                          // 0x0618(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EJRH[0x4];                                     // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSlateBrush                                 AscendingIcon;                                             // 0x0620(0x0078) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 DescendingIcon;                                            // 0x0698(0x0078) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_X617[0x430];                                   // 0x0710(0x0430) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ChineseLaunchURL;                                          // 0x0B40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ListSessions");
		return ptr;
	}



	void SlotButtonSelected(class UWidget* theWidget);
	void RefreshSlotButtons();
	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextChanged(const struct FText& Text);
	void OnSortComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnServersFilterComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnMapComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnGameModeComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
	void OnCheckBoxChecked(bool InNewState);
	void OnAutoFavoriteChecked(bool InNewState);
};

// Class ShooterGame.UI_ClusterServersListSessions
// 0x0018 (FullSize[0x0B68] - InheritedSize[0x0B50])
class UUI_ClusterServersListSessions : public UUI_ListSessions
{
public:
	unsigned char                                      UnknownData_4P8W[0x8];                                     // 0x0B50(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterGameSession*                         ClustersServersListGameSession;                            // 0x0B58(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_RQYX[0x8];                                     // 0x0B60(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ClusterServersListSessions");
		return ptr;
	}



};

// Class ShooterGame.UI_ListTamedDinos
// 0x01C0 (FullSize[0x06D8] - InheritedSize[0x0518])
class UUI_ListTamedDinos : public UPrimalUI
{
public:
	struct FName                                       DownloadButtonName;                                        // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UploadButtonName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CancelButtonName;                                          // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MyScrollBoxName;                                           // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DinoSlotButtonTemplate;                                    // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterStatsPanelName;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterLabelName;                                        // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceLabelName;                                       // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ExperienceBarName;                                         // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterHypoThermalInsulationLabelName;                   // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CharacterHyperThermalInsulationLabelName;                  // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StatsLabelNames[0xC];                                      // 0x0570(0x0060) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0F0B[0x108];                                   // 0x05D0(0x0108) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ListTamedDinos");
		return ptr;
	}



};

// Class ShooterGame.UI_MainMenu
// 0x01D8 (FullSize[0x06F0] - InheritedSize[0x0518])
class UUI_MainMenu : public UPrimalUI
{
public:
	struct FString                                     OptionsButtonName;                                         // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     HostButtonName;                                            // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     JoinButtonName;                                            // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ExitButtonName;                                            // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ListSessionsName;                                          // 0x0558(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     HelpButtonName;                                            // 0x0568(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     NewsLabelName;                                             // 0x0578(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ConnectingPanelName;                                       // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     EditableTextJoinName;                                      // 0x0590(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       EditableTextJoinPanelName;                                 // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ConnectingDialogPanelName;                                 // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ListSessionsUITemplate;                                    // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OptionsMenuUITemplate;                                     // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OptionsMenuUITemplate_UWP;                                 // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HostSessoinUITemplate;                                     // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HelpPageUITemplate;                                        // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NotifClass;                                                // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      WelcomeClass;                                              // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X0I2[0x20];                                    // 0x05F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UScrollBox*                                  TotalConversionsScrollBox;                                 // 0x0610(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UDataListEntryButton_MainMenu*>       TotalConversionsEntryWidgets;                              // 0x0618(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_W7X7[0xC8];                                    // 0x0628(0x00C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_MainMenu");
		return ptr;
	}



	void TotalConversionSelected(class UWidget* theWidget);
	void HandleDLCInstalledEvent();
};

// Class ShooterGame.UI_MapMarkersEntry
// 0x01A8 (FullSize[0x06C0] - InheritedSize[0x0518])
class UUI_MapMarkersEntry : public UPrimalUI
{
public:
	class UClass*                                      SlotButtonTemplate;                                        // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TabBgSwitcherName;                                         // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AddEnabledEffectName;                                      // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveEnabledEffectName;                                   // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseButtonName;                                           // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AcceptButtonName;                                          // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CoordOneLabelName;                                         // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CoordTwoLabelName;                                         // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MarkerNameLabelName;                                       // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MarkerNameTextBoxName;                                     // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CoordOneTextBoxName;                                       // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CoordTwoTextBoxName;                                       // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorBlockName;                                            // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveCloseButtonName;                                     // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveAcceptButtonName;                                    // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveMarkersListName;                                     // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RemoveMarkersPanelName;                                    // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AddMarkersPanelName;                                       // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GoToAddButtonName;                                         // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GoToRemoveButtonName;                                      // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxOpenTime;                                               // 0x05C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextActiveColor;                                   // 0x05C4(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SwitcherTextInactiveColor;                                 // 0x05D4(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EZVW[0x4];                                     // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLinearColor>                        ColorSetMarkers;                                           // 0x05E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_RAJN[0xC8];                                    // 0x05F8(0x00C8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_MapMarkersEntry");
		return ptr;
	}



	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextChanged(const struct FText& Text);
	void OnColorSliderValueChanged(float SliderValue);
	void MarkerButtonSelected(class UWidget* theWidget);
};

// Class ShooterGame.UI_MultiUse
// 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
class UUI_MultiUse : public UPrimalUI
{
public:
	struct FName                                       MyScrollBoxName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ActorDescriptionLabelName;                                 // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ButtonEntryWidgetTemplate;                                 // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BW8E[0x30];                                    // 0x0530(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_MultiUse");
		return ptr;
	}



	void ClickedEntry(class UWidget* clickedWidget);
};

// Class ShooterGame.UI_Notification
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_Notification : public UPrimalUI
{
public:
	struct FName                                       TitleLabelName;                                            // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MessageLabelName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OkButtonName;                                              // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       BoxCanvasPanelName;                                        // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bReturnToMainMenuOnClose;                                  // 0x0538(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VNU0[0x37];                                    // 0x0539(0x0037) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Notification");
		return ptr;
	}



};

// Class ShooterGame.UI_PaintingsList
// 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
class UUI_PaintingsList : public UPrimalUI
{
public:
	struct FName                                       PaintingListName;                                          // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SelectButtonName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CloseButtonName;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FailCloseButtonName;                                       // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadingLabelName;                                          // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadingCanvasName;                                         // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MissingTextName;                                           // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       NeededTextName;                                            // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RenamePaintingName;                                        // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      SlotButtonTemplate;                                        // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ResourceEntryTemplate;                                     // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FCVZ[0x108];                                   // 0x0570(0x0108) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPaintingTexture*                            Preview;                                                   // 0x0678(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3EIX[0x18];                                    // 0x0680(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_PaintingsList");
		return ptr;
	}



};

// Class ShooterGame.UI_PauseMenu
// 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
class UUI_PauseMenu : public UPrimalUI
{
public:
	struct FString                                     CloseButtonName;                                           // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     QuitButtonName;                                            // 0x0528(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     QuitButtonTextBlockName;                                   // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     TestWidgetName;                                            // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       InventoryButtonName;                                       // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TribeManagerButtonName;                                    // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OptionsButtonName;                                         // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     InviteFriendsButtonName;                                   // 0x0570(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ServerPingTextBlockName;                                   // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     HelpButtonName;                                            // 0x0588(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      OptionsMenuUITemplate;                                     // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OptionsMenuUITemplate_UWP;                                 // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3T6N[0xF0];                                    // 0x05A8(0x00F0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_PauseMenu");
		return ptr;
	}



};

// Class ShooterGame.UI_PinEntry
// 0x00C0 (FullSize[0x05D8] - InheritedSize[0x0518])
class UUI_PinEntry : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UseLastPinButtonName;                                      // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UseLastPinButtonLabelName;                                 // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleShowLastPinButtonName;                               // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ToggleShowLastPinButtonLabelName;                          // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PinLabelName;                                              // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               PinButtonsNames;                                           // 0x0550(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_BZU0[0x78];                                    // 0x0560(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_PinEntry");
		return ptr;
	}



};

// Class ShooterGame.UI_PrimalTest
// 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
class UUI_PrimalTest : public UPrimalUI
{
public:
	struct FString                                     VerticalBoxName;                                           // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      ChildWidgetTemplate;                                       // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I42E[0x8];                                     // 0x0530(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_PrimalTest");
		return ptr;
	}



};

// Class ShooterGame.UI_ProceduralSettings
// 0x0B00 (FullSize[0x1018] - InheritedSize[0x0518])
class UUI_ProceduralSettings : public UPrimalUI
{
public:
	struct FName                                       CancelButtonName;                                          // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HostButtonName;                                            // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ResetButtonName;                                           // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RandomizeButtonName;                                       // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadFavoriteButtonName;                                    // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SaveFavoriteButtonName;                                    // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       PresetsComboBoxName;                                       // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FavoriteComboBoxName;                                      // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArkNameTextBoxName;                                        // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MapSeedTextBoxName;                                        // 0x0560(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LandscapeRadiusTextBoxName;                                // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WaterFrequencyTextBoxName;                                 // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainFrequencyTextBoxName;                              // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainSlopeTextBoxName;                                  // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainHeightTextBoxName;                                 // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TurbulencePowerTextBoxName;                                // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ShoreSlopeTextBoxName;                                     // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WaterLevelTextBoxName;                                     // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GrassDensityTextBoxName;                                   // 0x05A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       JungleGrassDensityTextBoxName;                             // 0x05B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OceanFloorLevelTextBoxName;                                // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnowBiomeSizeTextBoxName;                                  // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RedwoodBiomeSizeTextBoxName;                               // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainBiomeStartTextBoxName;                             // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainTreeDensityTextBoxName;                            // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       JungleBiomeStartTextBoxName;                               // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       IslandBorderCurveTextBoxName;                              // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MaxSawnHeightTextBoxName;                                  // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       MountainGrassDensityTextBoxName;                           // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnowGrassDensityTextBoxName;                               // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnowMountainGrassDensityTextBoxName;                       // 0x0608(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnowBiomeLocationXTextBoxName;                             // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SnowBiomeLocationYTextBoxName;                             // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RedwoodBiomeLocationXTextBoxName;                          // 0x0620(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RedwoodBiomeLocationYTextBoxName;                          // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TerrainScaleXTextBoxName;                                  // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TerrainScaleYTextBoxName;                                  // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TerrainScaleZTextBoxName;                                  // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North1StartXTextBoxName;                                   // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North1StartYTextBoxName;                                   // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North1EndXTextBoxName;                                     // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North1EndYTextBoxName;                                     // 0x0660(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North2StartXTextBoxName;                                   // 0x0668(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North2StartYTextBoxName;                                   // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North2EndXTextBoxName;                                     // 0x0678(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North2EndYTextBoxName;                                     // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North3StartXTextBoxName;                                   // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North3StartYTextBoxName;                                   // 0x0690(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North3EndXTextBoxName;                                     // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       North3EndYTextBoxName;                                     // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South1StartXTextBoxName;                                   // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South1StartYTextBoxName;                                   // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South1EndXTextBoxName;                                     // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South1EndYTextBoxName;                                     // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South2StartXTextBoxName;                                   // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South2StartYTextBoxName;                                   // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South2EndXTextBoxName;                                     // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South2EndYTextBoxName;                                     // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South3StartXTextBoxName;                                   // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South3StartYTextBoxName;                                   // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South3EndXTextBoxName;                                     // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       South3EndYTextBoxName;                                     // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East1StartXTextBoxName;                                    // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East1StartYTextBoxName;                                    // 0x0710(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East1EndXTextBoxName;                                      // 0x0718(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East1EndYTextBoxName;                                      // 0x0720(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East2StartXTextBoxName;                                    // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East2StartYTextBoxName;                                    // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East2EndXTextBoxName;                                      // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East2EndYTextBoxName;                                      // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East3StartXTextBoxName;                                    // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East3StartYTextBoxName;                                    // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East3EndXTextBoxName;                                      // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       East3EndYTextBoxName;                                      // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West1StartXTextBoxName;                                    // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West1StartYTextBoxName;                                    // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West1EndXTextBoxName;                                      // 0x0778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West1EndYTextBoxName;                                      // 0x0780(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West2StartXTextBoxName;                                    // 0x0788(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West2StartYTextBoxName;                                    // 0x0790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West2EndXTextBoxName;                                      // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West2EndYTextBoxName;                                      // 0x07A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West3StartXTextBoxName;                                    // 0x07A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West3StartYTextBoxName;                                    // 0x07B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West3EndXTextBoxName;                                      // 0x07B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       West3EndYTextBoxName;                                      // 0x07C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4MEQ[0x850];                                   // 0x07C8(0x0850) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ProceduralSettings");
		return ptr;
	}



	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnPresetSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<SlateCore_ESelectInfo> SelectionType);
};

// Class ShooterGame.UI_SavePainting
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_SavePainting : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SaveButtonName;                                            // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FileNameTextBoxName;                                       // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ErrorTextBoxName;                                          // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GLWD[0x38];                                    // 0x0538(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SavePainting");
		return ptr;
	}



	void HandleFilterStringTextCommitted(const struct FText& NewText, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void HandleFilterStringTextChanged(const struct FText& NewText);
};

// Class ShooterGame.UI_SavingOverlay
// 0x0008 (FullSize[0x0520] - InheritedSize[0x0518])
class UUI_SavingOverlay : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_GVQK[0x8];                                     // 0x0518(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SavingOverlay");
		return ptr;
	}



};

// Class ShooterGame.UI_ServerBroadcastMessage
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_ServerBroadcastMessage : public UPrimalUI
{
public:
	struct FString                                     MessageTextBlockName;                                      // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FSlateFontInfo                              BoldFont;                                                  // 0x0528(0x0020) (Edit, DisableEditOnInstance)
	struct FSlateFontInfo                              RegularFont;                                               // 0x0548(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_GRWU[0x8];                                     // 0x0568(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_ServerBroadcastMessage");
		return ptr;
	}



};

// Class ShooterGame.UI_SessionSortArrow
// 0x0038 (FullSize[0x0550] - InheritedSize[0x0518])
class UUI_SessionSortArrow : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_M7DA[0x8];                                     // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ImageName;                                                 // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  UpImage;                                                   // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DownImage;                                                 // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  EmptyImage;                                                // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R728[0x10];                                    // 0x0540(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SessionSortArrow");
		return ptr;
	}



};

// Class ShooterGame.UI_SpawnPoint
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_SpawnPoint : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_E5ML[0x14];                                    // 0x0518(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SpawnPointImageName;                                       // 0x052C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CI50[0x4];                                     // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  SpawnPointImageNormal;                                     // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SpawnPointImageDisabled;                                   // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  SpawnPointImageSelected;                                   // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  CurrentLocation;                                           // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MarkerTexture;                                             // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UP63[0x10];                                    // 0x0560(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SpawnPoint");
		return ptr;
	}



};

// Class ShooterGame.UI_SteamInventoryStatusPopup
// 0x0090 (FullSize[0x05A8] - InheritedSize[0x0518])
class UUI_SteamInventoryStatusPopup : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DownloadMessageLabelName;                                  // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       UploadMessageLabelName;                                    // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     TitleText;                                                 // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MessageText;                                               // 0x0548(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                NumberOfDots;                                              // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimeoutInterval;                                           // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DotsUpdateInterval;                                        // 0x0560(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7ESS[0x44];                                    // 0x0564(0x0044) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_SteamInventoryStatusPopup");
		return ptr;
	}



};

// Class ShooterGame.UI_Subtitles
// 0x00A0 (FullSize[0x05B8] - InheritedSize[0x0518])
class UUI_Subtitles : public UPrimalUI
{
public:
	struct FName                                       SubtitlesTextBoxName;                                      // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DialogueTextBoxName;                                       // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DialogueIconImageName;                                     // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnProcessDynamicMaterialForDialogueIcon;                   // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FSubtitleCue>                        SoundWaveSubtitles;                                        // 0x0540(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_REQH[0x18];                                    // 0x0550(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   CurrentlyPlayingSound;                                     // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class USoundWave*                                  CurrentlyPlayingSoundWave;                                 // 0x0570(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DWHT[0x40];                                    // 0x0578(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Subtitles");
		return ptr;
	}



	void SetSubtitleFromText(const struct FText& SubtitleTextLine);
	void SetSubtitleFromStringWithDurationAndIcon(const struct FString& SubtitleTextLine, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetSubtitleFromString(const struct FString& SubtitleTextLine);
	void SetSubtitleFromSoundWave(class USoundWave* SoundWave, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetSubtitleFromSoundCue(class USoundCue* SoundCueWithSubtitles, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetIconMaterialParams(TArray<struct FNameScalarPair> scalarParams, TArray<struct FNameColorPair> colorParams, class UTexture2D* CurrentAT);
	void ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature(const struct FName& MaterialFName, class UMaterialInstanceDynamic* LoadedMaterial);
	void OnShowSubtitles();
	void OnHideSubtitles();
	bool IsIconVisible();
	bool IsCurrentIconEqualToGivenIcon(class UMaterialInterface* DialogueIcon);
	void HideSubtitles();
	void ForceSetSubtitlesManualTime(float ManualGlobalStartTime);
};

// Class ShooterGame.UI_TextEntry
// 0x0098 (FullSize[0x05B0] - InheritedSize[0x0518])
class UUI_TextEntry : public UPrimalUI
{
public:
	struct FName                                       CloseButtonName;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       AcceptButtonName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TitleLabelName;                                            // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       EditTextBoxName;                                           // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CheckBoxName;                                              // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CheckBoxLabelName;                                         // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxOpenTime;                                               // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DANL[0x54];                                    // 0x054C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bNumericValue;                                             // 0x05A0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bLimitInput;                                               // 0x05A1(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_02X7[0x2];                                     // 0x05A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LimitCount;                                                // 0x05A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bCanCommitEmptyString;                                     // 0x05A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bNumericAndChar;                                           // 0x05A9(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_TGML[0x6];                                     // 0x05AA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_TextEntry");
		return ptr;
	}



	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextChanged(const struct FText& Text);
};

// Class ShooterGame.UI_TribeWarEntry
// 0x0050 (FullSize[0x0568] - InheritedSize[0x0518])
class UUI_TribeWarEntry : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_8LB8[0x50];                                    // 0x0518(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_TribeWarEntry");
		return ptr;
	}



	void OnTextCommitted(const struct FText& Text, TEnumAsByte<SlateCore_ETextCommit> CommitMethod);
	void OnTextChanged(const struct FText& Text);
};

// Class ShooterGame.UI_Tutorial
// 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
class UUI_Tutorial : public UPrimalUI
{
public:
	struct FName                                       TutorialTitleLabelName;                                    // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TutorialTextLabelName;                                     // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TutorialImageName;                                         // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZZ00[0x18];                                    // 0x0530(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Tutorial");
		return ptr;
	}



};

// Class ShooterGame.UI_Welcome
// 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
class UUI_Welcome : public UPrimalUI
{
public:
	struct FName                                       NicknameLabelName;                                         // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LoadingLabelName;                                          // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OkButtonName;                                              // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MainMenuTemplate;                                          // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NotifClass;                                                // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V2XH[0x30];                                    // 0x0540(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Welcome");
		return ptr;
	}



};

// Class ShooterGame.UI_XBoxFooter
// 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
class UUI_XBoxFooter : public UPrimalUI
{
public:
	unsigned char                                      UnknownData_OVSM[0x48];                                    // 0x0518(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_XBoxFooter");
		return ptr;
	}



};

// Class ShooterGame.PrimalWheeledVehicleDustType
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UPrimalWheeledVehicleDustType : public UDataAsset
{
public:
	class UParticleSystem*                             DefaultFX;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             ConcreteFX;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             DirtFX;                                                    // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             WaterFX;                                                   // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             MetalFX;                                                   // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             WoodFX;                                                    // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             GrassFX;                                                   // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             FleshFX;                                                   // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             LeavesFX;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             RockFX;                                                    // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             SandFX;                                                    // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             SnowFX;                                                    // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultMinSpeed;                                           // 0x0088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ConcreteMinSpeed;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DirtMinSpeed;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WaterMinSpeed;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MetalMinSpeed;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WoodMinSpeed;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrassMinSpeed;                                             // 0x00A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FleshMinSpeed;                                             // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LeavesMinSpeed;                                            // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RockMinSpeed;                                              // 0x00AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SandMinSpeed;                                              // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SnowMinSpeed;                                              // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWheeledVehicleDustType");
		return ptr;
	}



};

// Class ShooterGame.PrimalWorldBuffCustomImplement
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UPrimalWorldBuffCustomImplement : public UObject
{
public:
	struct FName                                       WorldBuffID;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWorldBuffCustomImplement");
		return ptr;
	}



	void UpdateBuffCustomPersistantData();
	void Tick(float DeltaSeconds);
	void PreDeconstruction();
	void PostConstruction();
	class UWorld* GetWorld();
	class UObject* GetOwner();
	void BuffTimerRefreshed();
	void BuffStackIncreased(int newStackCount);
	void BuffStackDecrease(int newStackCount);
};

// Class ShooterGame.PrimalWorldBuffData
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UPrimalWorldBuffData : public UObject
{
public:
	TArray<struct FWorldBuffDefinition>                WorldBuffDefinitions;                                      // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UPrimalWorldBuffCustomImplement*>     ConstructedWorldBuffImplements;                            // 0x0038(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWorldBuffData");
		return ptr;
	}



	void STATIC_RemoveWorldBuff(class UObject* WorldContextObject, const struct FName& WorldBuffIdentifier);
	TArray<struct FWorldBuffDefinition> STATIC_GetWorldBuffSet(const struct FName& WorldBuffSetName);
	bool STATIC_GetWorldBuffDefinitionByName(const struct FName& WorldBuffIdentifier, struct FWorldBuffDefinition* outWorldBuffDefinition);
	class UPrimalWorldBuffData* STATIC_GetWorldBuffData();
	bool STATIC_CanActivateWorldBuff(class UObject* WorldContextObject, const struct FName& WorldBuffIdentifier, TArray<struct FName>* OutWorldBuffsToBeReplaced);
	void STATIC_AddWorldBuff(class UObject* WorldContextObject, const struct FName& WorldBuffIdentifier, int StacksToGive);
};

// Class ShooterGame.PrimalWorldModifier
// 0x0078 (FullSize[0x04E8] - InheritedSize[0x0470])
class APrimalWorldModifier : public AActor
{
public:
	bool                                               bUseMapExclusionListAsExclusiveList;                       // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z88W[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             MapExclusionList;                                          // 0x0478(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               PriorityTags;                                              // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class AInstancedFoliageActor*>              ReskinnedFoliageTrackingList;                              // 0x0498(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FFoliageReskinDefinition>            FoliageReskinList;                                         // 0x04A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class AStaticMeshActor*>                    ReskinnedLevelStaticMeshTrackingList;                      // 0x04B8(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FSublevelOverrideGroup>              SublevelOverrideGroups;                                    // 0x04C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnFoliageSkinned;                                          // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWorldModifier");
		return ptr;
	}



	void TrySublevelSwaps();
	void TryStaticMeshActorReskin(class AStaticMeshActor* ForStaticMeshActor, struct FSublevelOverrideGroup* CurrentSublevelOverrideGroup);
	void TryFoliageReskin(class AInstancedFoliageActor* ForFoliageActor);
	void RescanForMapStaticMeshes();
	void RescanForFoliage();
	void NotifyOnFoliageSkinned__DelegateSignature(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance);
	bool IsAllowedOnCurrentMap();
	bool HasPriority();
	void GetCurrentSublevelOverrideGroup(struct FSublevelOverrideGroup* outSublevelOverrideGroup);
	void DoRescanForSublevelLoaded();
	void BPSkinFoliage(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance);
	void BPPreFoliageScan();
	void BPPostInitializationHasPriority();
	void BPPostFoliageScan();
};

// Class ShooterGame.PrimalWorldSettings
// 0x0538 (FullSize[0x11F8] - InheritedSize[0x0CC0])
class APrimalWorldSettings : public AWorldSettings
{
public:
	bool                                               bMapSupportsMissions;                                      // 0x0CC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TNDC[0x7];                                     // 0x0CC1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      DefaultCameraPositionActor;                                // 0x0CC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UObject*>                             DynamicResourceRefs;                                       // 0x0CD0(0x0010) (ZeroConstructor, Transient)
	bool                                               bEditorEnableNPCSpawners;                                  // 0x0CE0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEditorForceDisableNPCSpawners;                            // 0x0CE1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventGlobalNonEventSpawnOverrides;                      // 0x0CE2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PMZ7[0x1];                                     // 0x0CE3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       PlacingStructureToggleMeshTagVisibility;                   // 0x0CE4(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bGenerateTerrain;                                          // 0x0CEC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceSpawnAnimationTest;                                  // 0x0CED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOverrideLongitudeAndLatitude;                             // 0x0CEE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SL2Q[0x1];                                     // 0x0CEF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LongitudeScale;                                            // 0x0CF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RegularWildDinoResistanceVersusTamesMultiplier;            // 0x0CF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RegularWildDinoDamageVersusTamesMultiplier;                // 0x0CF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RegularWildDinoXPMultiplier;                               // 0x0CFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeScale;                                             // 0x0D00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeOrigin;                                           // 0x0D04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeOrigin;                                            // 0x0D08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinKillX;                                                  // 0x0D0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxKillX;                                                  // 0x0D10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinKillY;                                                  // 0x0D14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxKillY;                                                  // 0x0D18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxKillZ;                                                  // 0x0D1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxUnderWorldTraceRangeZ;                                  // 0x0D20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0ZE9[0x4];                                     // 0x0D24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  OverrideWeaponMapTextureEmpty;                             // 0x0D28(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OverrideWeaponMapTextureFilled;                            // 0x0D30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OverrideUIMapTextureEmpty;                                 // 0x0D38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OverrideUIMapTextureFilled;                                // 0x0D40(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  OverrideUIMapTextureSmall;                                 // 0x0D48(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                      LevelBlueprintContainerActor;                              // 0x0D50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PrimalGameDataOverride;                                    // 0x0D58(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     ForceLoadMapName;                                          // 0x0D60(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             OverridePlayerSpawnRegions;                                // 0x0D70(0x0010) (Edit, ZeroConstructor)
	TArray<int>                                        OverridePlayerSpawnRegionDifficulties;                     // 0x0D80(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              LevelUseNPCClasses;                                        // 0x0D90(0x0010) (Edit, ZeroConstructor)
	TArray<struct FClassRemappingWeight>               NPCRandomSpawnClassWeights;                                // 0x0DA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemappingWeight>               SinglePlayerNPCRandomSpawnClassWeights;                    // 0x0DB0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector2D                                   SpawnLevelBoundsMax;                                       // 0x0DC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SpawnLevelBoundsMin;                                       // 0x0DC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AutoSpectatorNamesMinZ;                                    // 0x0DD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseSpawnLevelBounds;                                      // 0x0DD4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CS65[0x3];                                     // 0x0DD5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              CachedPersistentObjectClasses;                             // 0x0DD8(0x0010) (ZeroConstructor)
	float                                              DinosLerpToMaxRandomBaseLevel;                             // 0x0DE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JQKG[0x4];                                     // 0x0DEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        DefaultSpawnPointRandomIndices;                            // 0x0DF0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                                OverrideFirstSpawnAnim;                                    // 0x0E00(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OverrideSpawnAnim;                                         // 0x0E08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GammaOffset;                                               // 0x0E10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bWaterDinosUseFlightBlocking;                              // 0x0E14(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LOR4[0x3];                                     // 0x0E15(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalHarvestHealthMultiplier;                             // 0x0E18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalHarvestAmountMultiplier;                             // 0x0E1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFlyersStructurePreventionDismountingAnywhere;             // 0x0E20(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFlyersStructurePreventionDismountingUnderTerrainOnly;     // 0x0E21(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RRDH[0x2];                                     // 0x0E22(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverrideDifficultyMax;                                     // 0x0E24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FItemMultiplier>                     GlobalSpoilingTimeMultipliers;                             // 0x0E28(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              GlobalStatusAdjustmentRateMultipliersPositive[0xC];        // 0x0E38(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalStatusAdjustmentRateMultipliersNegative[0xC];        // 0x0E68(0x0030) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ValidEngramGroupsBitMask;                                  // 0x0E98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SSXX[0x4];                                     // 0x0E9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppends;                                 // 0x0EA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppendsNonDedicated;                     // 0x0EB0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              DayCycleSpeedScale;                                        // 0x0EC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DayTimeSpeedScale;                                         // 0x0EC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NightTimeSpeedScale;                                       // 0x0EC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NegativeHyperthermalInsulationMultiplier;                  // 0x0ECC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PositiveHyperthermalInsulationMultiplier;                  // 0x0ED0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NegativeHypothermalInsulationMultiplier;                   // 0x0ED4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PositiveHypothermalInsulationMultiplier;                   // 0x0ED8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IGS0[0x4];                                     // 0x0EDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              GlobalCuddleFoodList;                                      // 0x0EE0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              CarnivoreNaturalTargetingRangeMultiplier;                  // 0x0EF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HerbivoreNaturalTargetingRangeMultiplier;                  // 0x0EF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay;                                    // 0x0EF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight;                                  // 0x0F00(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicDay_Heavy;                              // 0x0F08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  OverrideCombatMusicNight_Heavy;                            // 0x0F10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  SplitscreenUnderwaterSound;                                // 0x0F18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                              HarvestComponentHealthScaleParents;                        // 0x0F20(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      HarvestComponentHealthScaleParentsValue;                   // 0x0F30(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              HarvestComponentHealthScaleExactMatch;                     // 0x0F40(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      HarvestComponentHealthScaleExactMatchValue;                // 0x0F50(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  Override_Sound_ReconnectToCharacter;                       // 0x0F60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                RequiresID;                                                // 0x0F68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreBiomeWind;                                          // 0x0F6C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1YXT[0x3];                                     // 0x0F6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          Override_PostProcess_ColorLUT;                             // 0x0F70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      AutoGenerateTerrainActorTemplate;                          // 0x0F78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultWaterLineStartZ;                                    // 0x0F80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultDeepWaterStartZ;                                    // 0x0F84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumPlayerFlyZ;                                         // 0x0F88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EI78[0x4];                                     // 0x0F8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             ExtraReferences;                                           // 0x0F90(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              AllowDownloadDinoClasses;                                  // 0x0FA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DefaultBiomeName;                                          // 0x0FB0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              PreventStructureClasses;                                   // 0x0FC0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxFallSpeedMultiplier;                                    // 0x0FD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableStructureObstructedByWorldGeometryCheck;           // 0x0FD4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceEnableTurretLimit;                                   // 0x0FD5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseMissions;                                              // 0x0FD6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseMissionsMetaData;                                      // 0x0FD7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LoadForceRespawnDinosVersion;                              // 0x0FD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FirstSpawnNotTargetableForTime;                            // 0x0FDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreInMeshCheckingUnderwater;                           // 0x0FE0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowRidingFliers;                                        // 0x0FE1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceDinoDrawHUD;                                         // 0x0FE2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableFirstPersonRiding;                                 // 0x0FE3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceDinoHighQualityAttacks;                              // 0x0FE4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bScaleDinoFloatingHUDByMeshSize;                           // 0x0FE5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0ROA[0x2];                                     // 0x0FE6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceCameraTransitionTimeUponPossession;                   // 0x0FE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AdditionalDinoHealthBarOffsetY;                            // 0x0FEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AIOverrideNotifyNeighborsRange;                            // 0x0FF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     SpawnAnimationLocationOffset;                              // 0x0FF4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionMultiUseEntryToolTipWidget;                         // 0x1000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MissionDataBuff;                                           // 0x1008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ActiveEventSpawnActor;                                     // 0x1010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FAvailableMission>                   AvailableMissions;                                         // 0x1018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMissionMetaData>                    AvailableMissionsMetaData;                                 // 0x1028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMissionMetaData>                    NonPlayerFacingMissionsMetaData;                           // 0x1038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_PSXD[0x148];                                   // 0x1048(0x0148) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalDinoCountValue;                                      // 0x1190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C61A[0x1C];                                    // 0x1194(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ServerForceReplicateObjectClasses;                         // 0x11B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UBlueprint>                        ActiveEventOverrideObjectBlueprint;                        // 0x11C0(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData_44PB[0x4];                                     // 0x11C0(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UPrimalWorldSettingsEventOverrides*          ActiveEventOverrides;                                      // 0x11E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UClass*                                      MetaTagInfoClass;                                          // 0x11E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEnforceSingleBiomeBuff;                                   // 0x11F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHideMissionSortByDistance;                                // 0x11F1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IV8H[0x6];                                     // 0x11F2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWorldSettings");
		return ptr;
	}



	bool IsAllowedInLevelBounds(const struct FVector& AtLocat);
	bool GetMissionMetaData(const struct FName& MissionTag, struct FMissionMetaData* Value);
};

// Class ShooterGame.PrimalWorldSettingsEventOverrides
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UPrimalWorldSettingsEventOverrides : public UObject
{
public:
	TArray<struct FClassRemappingWeight>               NPCRandomSpawnClassWeights;                                // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FClassRemappingWeight>               SinglePlayerNPCRandomSpawnClassWeights;                    // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FActiveEventUndeprecatedStructures>  UndeprecatedStructuresDuringEvent;                         // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FActiveEventUndeprecatedItems>       UndeprecatedItemsDuringEvent;                              // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FActiveEventUndeprecatedDinos>       UndeprecatedDinosDuringEvent;                              // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FActiveEventGlobalStatusAdjustments> AdditionalGlobalStatusAdjustmentsDuringEvent;              // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWorldSettingsEventOverrides");
		return ptr;
	}



};

// Class ShooterGame.RadialSelectorHUD_Inventory
// 0x0008 (FullSize[0x00E0] - InheritedSize[0x00D8])
class URadialSelectorHUD_Inventory : public URadialSelectorHUD
{
public:
	class UPrimalInventoryComponent*                   PlayerInventory;                                           // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RadialSelectorHUD_Inventory");
		return ptr;
	}



};

// Class ShooterGame.RadialSelectorHUD_MultiUse
// 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
class URadialSelectorHUD_MultiUse : public URadialSelectorHUD
{
public:
	unsigned char                                      UnknownData_4UUM[0x1C];                                    // 0x00D8(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TextScaleCountOffset;                                      // 0x00F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RadialSelectorHUD_MultiUse");
		return ptr;
	}



};

// Class ShooterGame.RadialSelectorHUD_PlayerAction
// 0x0068 (FullSize[0x0140] - InheritedSize[0x00D8])
class URadialSelectorHUD_PlayerAction : public URadialSelectorHUD
{
public:
	unsigned char                                      UnknownData_OS66[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<ShooterGame_EPlayerActionIndex>> ActionBindings;                                            // 0x00E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	unsigned char                                      UnknownData_IWKT[0x20];                                    // 0x00F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAddUnlockableEmotes;                                      // 0x0110(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_JZ6J[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TextScaleCountOffset;                                      // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1SBJ[0x28];                                    // 0x0118(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RadialSelectorHUD_PlayerAction");
		return ptr;
	}



};

// Class ShooterGame.RCONServer
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class URCONServer : public UObject
{
public:
	unsigned char                                      UnknownData_OCKL[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UShooterCheatManager*                        CheatManager;                                              // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3YTK[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.RCONServer");
		return ptr;
	}



};

// Class ShooterGame.SaveGameActor
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class ASaveGameActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SaveGameActor");
		return ptr;
	}



};

// Class ShooterGame.SaveGameActorTickable
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class ASaveGameActorTickable : public ASaveGameActor
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SaveGameActorTickable");
		return ptr;
	}



};

// Class ShooterGame.ShooterCharacterMovement
// 0x0040 (FullSize[0x0570] - InheritedSize[0x0530])
class UShooterCharacterMovement : public UCharacterMovementComponent
{
public:
	float                                              MaxSpeedMultiplier;                                        // 0x0530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseAdditionalLinePenetrationChecks;                       // 0x0534(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0Q7G[0x3];                                     // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bWaterBaseOnly : 1;                                        // 0x0538(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowWaterWalking : 1;                                    // 0x0538(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_29MR[0x37];                                    // 0x0539(0x0037) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterCharacterMovement");
		return ptr;
	}



	void UpdateAnalogueInputModifier();
	void SetCurrentAcceleration(const struct FVector& NewAcceleration);
	void SetClimbingTarget(const struct FVector& TargetPosition, const struct FRotator& TargetRotation);
	bool IsWaterWalking();
	void BPApplyVelocityBraking(float DeltaTime, float Friction, float BrakingDeceleration, struct FVector* InOutVelocity);
	void BP_PhysicsRotation(float DeltaTime);
	void BP_PerformMovement(float DeltaTime);
	float BP_GetAnalogueInputModifier();
};

// Class ShooterGame.ShooterCheatManager
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UShooterCheatManager : public UCheatManager
{
public:
	bool                                               bIsRCONCheatManager;                                       // 0x0080(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6ORQ[0xF];                                     // 0x0081(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterCheatManager");
		return ptr;
	}



	void WhatIsMyTarget();
	void VisualizeWorldGeo();
	void VisualizeWorld();
	void VisualizeClass(const struct FString& ClassIn, int MaxTotal);
	void VerifyTransferInventory();
	void UnlockEngram(const struct FString& ItemClassName);
	void UnlockEmote(const struct FString& EmoteName);
	void UnlockAllExplorerNotes();
	void UnlockAchievement(const struct FString& AchievementID);
	void UnbanPlayer(const struct FString& PlayerSteamName);
	void TribeStructureAudit(int TribeTeamID);
	void TribeMessage(int TribeTeamID, const struct FString& Message);
	void TribeDinoAudit(int TribeTeamID);
	void TransferImprints(int oldPlayerId, int newPlayerId, const struct FString& NewImprinterName);
	void TPName(const struct FString& PlayerName);
	void TPCoords(float lat, float lon, float Z);
	void TP(const struct FString& LocationName);
	void ToggleLowGravSpin();
	void ToggleLocation();
	void ToggleHud();
	void ToggleGun();
	void ToggleDamageNumbers();
	void ToggleDamageLogging();
	void ToggleClawStepping();
	void TestSteamRefreshItems();
	void TeleportToPlayerName(const struct FString& PlayerName);
	void TeleportToPlayer(int64_t PlayerId);
	void TeleportToActorLocation(const struct FString& ActorName);
	void TeleportToActiveHorde(int EventIndex);
	void TeleportPlayerNameToMe(const struct FString& PlayerName);
	void TeleportPlayerIDToMe(int64_t PlayerId);
	void TakeTribe(int TribeTeamID);
	void TakeAllStructure();
	void TakeAllDino();
	void SummonTamed(const struct FString& ClassName);
	void Suicide();
	void StartSaveBackup();
	void StartNearestHorde(const struct FName& HordeType, int DifficultyLevel);
	void StartMissionWithMetaData(const struct FName& MissionTag);
	void StartMission(const struct FName& MissionTag);
	void SPI(float X, float Y, float Z, float Yaw, float Pitch);
	void SpawnSetupDino(const struct FString& DinoBlueprintPath, const struct FString& SaddleBlueprintPath, float SaddleQuality, int DinoLevel, const struct FString& DinoStats, float spawnDistance, float YOffset, float ZOffset);
	void SpawnExactDino(const struct FString& DinoBlueprintPath, const struct FString& SaddleBlueprintPath, float SaddleQuality, int BaseLevel, int ExtraLevels, const struct FString& BaseStats, const struct FString& AddedStats, const struct FString& DinoName, int8_t Cloned, int8_t Neutered, const struct FString& TamedOn, const struct FString& UploadedFrom, const struct FString& ImprinterName, int ImprinterPlayerID, float ImprintQuality, const struct FString& Colors, int64_t DinoID, int64_t Exp, float spawnDistance, float YOffset, float ZOffset);
	void SpawnDino(const struct FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int DinoLevel);
	void SpawnActorTamed(const struct FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset);
	void SpawnActorSpreadTamed(const struct FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int NumberActors, float SpreadAmount);
	void SpawnActorSpread(const struct FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int NumberActors, float SpreadAmount);
	void SpawnActor(const struct FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset);
	void ShowTutorial(int TutorialIndex, bool bForceDisplay);
	void ShowMessageOfTheDay();
	void ShowInGameMenu();
	void ShowAvailableMissionTags();
	void ShowActiveMissions();
	void SetTimeOfDay(const struct FString& timeString);
	void SetTargetPlayerColorVal(int ColorValIndex, float ColorVal);
	void SetTargetPlayerBodyVal(int BodyValIndex, float BodyVal);
	void SetTargetDinoColor(int ColorRegion, int ColorID);
	void SetTamingEffectivenessModifier(float tameEff);
	void SetStatOnTarget(const struct FName& StatName, float Value);
	void SetShowAllPlayers(bool bEnable);
	void SetPlayerPos(float X, float Y, float Z);
	void SetPlayerLevel(int64_t PlayerId, int16_t Level);
	void SetPerfCheck(int PerfCheckLocation);
	void SetNetworkTime(float NewTime);
	void SetMyTargetSleeping(bool bIsSleeping);
	void SetMessageOfTheDay(const struct FString& Message);
	void SetMaterialParamaterCollectionByNameAndFloatValue(const struct FName& ParamaterName, float ParamaterValue);
	void SetInstantHarvest(bool bEnable);
	void SetInfiniteStats(bool bInfinite);
	void SetImprintQuality(float ImprintQuality);
	void SetImprintedPlayer(const struct FString& NewImprinterName, int PlayerId);
	void SetHeadHairstyle(int hairStyleIndex);
	void SetHeadHairPercent(float thePercent);
	void SetGraphicsQuality(int val);
	void SetGodMode(bool bEnable);
	void SetGlobalPause(bool bIsPaused);
	void SetFacialHairstyle(int hairStyleIndex);
	void SetFacialHairPercent(float thePercent);
	void SetDifficultyValue(float NewTime);
	void SetDebugMeleeAttacks(bool bDebugMelee, float DrawDuration);
	void SetDay(int day);
	void SetChatLogMaxAgeInDays(int NumDays);
	void SetBabyAgeAOE(float AgeValue, float Radius);
	void SetBabyAge(float AgeValue);
	void SetActiveMissionDebugFlags(int DebugFlags);
	void ServerChatToPlayer(const struct FString& PlayerName, const struct FString& MessageText);
	void ServerChatTo(const struct FString& SteamID, const struct FString& MessageText);
	void ServerChat(const struct FString& MessageText);
	void SendDataDogMetric(const struct FString& Message);
	void SDFRide(const struct FName& DinoBlueprintPath, int DinoLevel);
	void SDF(const struct FName& DinoBlueprintPath, bool bIsTamed, int DinoLevel);
	void ScriptCommand(const struct FString& commandString);
	void SaveWorldDisableTransfer();
	void SaveWorld();
	void SAP();
	void RespawnPlayer(bool KeepGender);
	void ResetLiveTuningOverloads();
	void RequestUpdateActiveMissionTags();
	void ReportSpawnManagers();
	void ReportLeastSpawnManagers();
	void RepairArea(float Radius);
	void RenameTribeID(int TribeId, const struct FString& NewName);
	void RenameTribe(const struct FString& TribeName, const struct FString& NewName);
	void RenamePlayerId(int PlayerId, const struct FString& NewName);
	void RenamePlayer(const struct FString& PlayerName, const struct FString& NewName);
	void RemoveWorldBuff(const struct FString& WorldBuffIdentifier);
	void RemoveTribeAdmin();
	void RemoveAllWorldBuffs();
	void RegrowFoliage(float Radius);
	void RefillStats();
	void ReassertColorization();
	void RainDinos(int NumberActors, float SpreadAmount, float ZOffset);
	void RainDanger(int NumberActors, float SpreadAmount, float ZOffset);
	void RainCritters(int NumberActors, float SpreadAmount, float ZOffset);
	void psc(const struct FString& Command);
	void PrintActorLocation(const struct FString& ActorName);
	void PlayerCommand(const struct FString& TheCommand);
	void OpenMap(const struct FString& MapName);
	void OnToggleInGameMenu();
	void NextPerfCheck();
	void MoveTargetTo(float X, float Y, float Z);
	void Mission(const struct FName& CheatName, float Value);
	void MaxAscend(int PlayerId);
	void MakeTribeFounder();
	void MakeTribeAdmin();
	void LvlUp(int64_t PlayerId, int16_t Level);
	void LMA();
	void ListPlayers();
	void ListMyTargetBuffs();
	void ListMyBuffs();
	void ListDinos();
	void ListActiveHordeEvents();
	void LevelUpTarget(const struct FName& StatName, int NumLevels);
	void LevelUpAOE(const struct FName& StatName, float Radius, int NumLevels);
	void LevelUp(const struct FName& StatName, int NumLevels);
	void LessThan(int TribeTeamID, int Connections, bool includeContainers);
	void LeaveMission();
	void LeaveMeAlone();
	void KillPlayer(int64_t PlayerId);
	void KillAOETribe(const struct FName& Category, float Radius, int TribeId);
	void KillAOE(const struct FName& Category, float Radius);
	void Kill();
	void KickPlayer(const struct FString& PlayerSteamName);
	void JoinTribe(int64_t PlayerId, int TribeTeamID);
	void IsUndermesh(float DebugDrawSeconds);
	void InfiniteWeight();
	void InfiniteStats();
	void HurtMyTarget(int HowMuch);
	void HurtMyAOE(int HowMuch, float Radius);
	void HiWarp(const struct FString& ClassName, int index);
	void HideTutorial(int TutorialIndex);
	void HibernationReport(const struct FString& ClassName);
	void HatchEgg();
	void GoToFirstMutagenDrop();
	void GMSummon(const struct FString& ClassName, int Level);
	void GMComp(int Level);
	void GMBuff();
	void GlobalObjectCount();
	void GiveWeaponSet(const struct FName& Tier, const struct FName& Quality);
	void GiveToMeAOE(float Radius);
	void GiveToMe();
	void GiveTekEngramsTo(int64_t PlayerId, const struct FName& blueprintPath);
	void GiveResources();
	void GiveItemToPlayer(int PlayerId, const struct FString& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint);
	void GiveItemSkins(const struct FString& equipmentType);
	void GiveItemSet(const struct FName& Tier);
	void GiveItemNumToPlayer(int PlayerId, int MasterIndexNum, int quantityOverride, float qualityOverride, bool bForceBlueprint);
	void GiveItemNum(int MasterIndexNum, int quantityOverride, float qualityOverride, bool bForceBlueprint);
	void GiveItem(const struct FString& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint);
	void GiveInfiniteStatsToTarget();
	void GiveExpToTarget(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
	void GiveExpToPlayer(int64_t PlayerId, float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
	void GiveExplorerNote(int NoteIndex);
	void GiveEngramsTekOnly();
	void GiveEngrams();
	void GiveDinoSet(const struct FName& Tier, int NumDinos);
	void GiveCreativeModeToTarget();
	void GiveCreativeModeToPlayer(int64_t PlayerId);
	void GiveCreativeMode();
	void GiveArmorSet(const struct FName& Tier, const struct FName& Quality);
	void GiveAllStructure();
	void GiveAllExplorerNotes();
	void GFI(const struct FName& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint);
	void GetTribeIdPlayerList(int TribeId);
	void GetSteamIDForPlayerID(int PlayerId);
	void GetPlayerIDForSteamID(int SteamID);
	void GetGameLog();
	void GetEgg(int NumMutationsToAdd);
	void GetChat();
	void GCMT();
	void GCMP(int64_t PlayerId);
	void GCM();
	void GameCommand(const struct FString& TheCommand);
	void ForceUpdateDynamicConfig();
	void ForceTribes(const struct FString& PlayerName1, const struct FString& PlayerName2, const struct FString& NewTribeName);
	void ForceTameAOE(float Radius);
	void ForceTame();
	void ForceStartMission(const struct FName& MissionTag);
	void ForceReturnIsXboxOneBuildOnPC(bool ReturnValue);
	void ForceReturnIsPS4BuildOnPC(bool ReturnValue);
	void ForcePoop();
	void ForcePlayerToJoinTribeId(int64_t PlayerId, int TribeTeamID);
	void ForcePlayerToJoinTribe(int64_t PlayerId, const struct FString& TribeName);
	void ForcePlayerToJoinTargetTribe(int64_t PlayerId);
	void ForceMutagenSpawn();
	void ForceJoinTribe();
	void ForceGiveBuff(const struct FName& BuffBlueprintPath, bool bEnable);
	void ForceEnableMeshCheckingOnMe(bool bEnableChecking);
	void ForceCompleteActiveMission(const struct FString& MissionStateSimValues);
	void ForceCheckInMesh();
	void FindMutagenDrops();
	void EnemyInVisible(bool Invisible);
	void EnableSpectator();
	void EnableCheats(const struct FString& pass);
	void EnableAllMating();
	void DupeLastItem();
	void DumpFallbackSeeds();
	void DumpDinoStats();
	void DumpAssetProperties(const struct FString& Asset);
	void DrawDebugBoxForVolumes(float Duration, int VolumeClassIndex, bool bDebugAllVolumeClasses, bool bDrawSolidBox, float LineThickness);
	void DoTestingThing();
	void DoTame();
	void DoRestartLevel();
	void DoHang();
	void DoExit();
	void DisallowPlayerToJoinNoCheck(const struct FString& SteamID);
	void DisableSpectator();
	void DisableAllMating();
	void DinoSet(const struct FName& CheatName, float Value);
	void Dino(const struct FName& CheatName);
	void DetachChar();
	void DestroyWildDinos();
	void DestroyWildDinoClasses(const struct FString& ClassName);
	void DestroyTribeStructuresLessThan(int TribeTeamID, int Connections, bool includeContainers, bool includeLargeGates);
	void DestroyTribeStructures();
	void DestroyTribePlayers();
	void DestroyTribeIdStructures(int TribeTeamID);
	void DestroyTribeIdPlayers(int TribeTeamID);
	void DestroyTribeIdDinos(int TribeTeamID);
	void DestroyTribeId(int TribeTeamID);
	void DestroyTribeDinos();
	void DestroyStructures();
	void DestroyMyTarget();
	void DestroyMyPawn();
	void DestroyFoliage(float Radius, bool PutFoliageResourcesInInventory);
	void DestroyAllTames();
	void DestroyAllEnemies();
	void DestroyActors(const struct FString& ClassName);
	void DefeatBoss(int PlayerId, const struct FName& BossName, int8_t difficulty);
	void DefeatAllBosses(int PlayerId);
	void DeepPockets();
	void DebugToggleHLNAMonologue();
	void DebugMyTarget();
	void DebugCompanionReactions();
	void DebugCompanionAsyncLoadedFiles();
	void DebugAllowVRMissionTeleport();
	void DeactivateMission();
	void DCMSet(const struct FName& Cheat, float val);
	void CompleteMission();
	void ClearTutorials();
	void ClearPlayerInventory(int PlayerId, bool bClearInventory, bool bClearSlotItems, bool bClearEquippedItems);
	void ClearMyBuffs();
	void ClearMessageOfTheDay();
	void ClearCryoSickness();
	void CamZoomOut();
	void CamZoomIn();
	void Broadcast(const struct FString& MessageText);
	void BanPlayer(const struct FString& PlayerSteamName);
	void AllowPlayerToJoinNoCheck(const struct FString& SteamID);
	void AddWorldBuff(const struct FString& WorldBuffIdentifier);
	void AddItemToAllClustersInventory(const struct FString& UserId, int MasterIndexNum);
	void AddHexagons(float HowMuch);
	void AddExperienceToTarget(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
	void AddExperience(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
	void AddEquipmentDurability(float durability);
	void AddBuffPreventTagToSelf(const struct FName& TagName);
};

// Class ShooterGame.ShooterDamageType
// 0x00D8 (FullSize[0x0128] - InheritedSize[0x0050])
class UShooterDamageType : public UDamageType
{
public:
	class UClass*                                      HitTargetableActorImpactEffects;                           // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageTorpidityIncreaseMultiplier;                         // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HMFJ[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCanvasIcon                                 KillIcon;                                                  // 0x0060(0x0018) (Edit, DisableEditOnInstance)
	class UForceFeedbackEffect*                        HitForceFeedback;                                          // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UForceFeedbackEffect*                        KilledForceFeedback;                                       // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FDamagePrimalCharacterStatusValueModifier> DamageCharacterStatusValueModifiers;                       // 0x0088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bIsMeleeDamage : 1;                                        // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontActuallyDealDamage : 1;                               // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventMeleeHarvesting : 1;                               // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHarvestDamageWithNoResourceGrab : 1;                      // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventMomentumWhenFalling : 1;                           // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyGiveBuffToPlayerOrTamed : 1;                          // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDamageProjectiles : 1;                                    // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyGiveBuffToPlayer : 1;                                 // 0x0098(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyGiveBuffToDino : 1;                                   // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHasRiderIgnoreDamage : 1;                                 // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowShieldBlockAllPointDamage : 1;                       // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDefaultTargetHurtEffect : 1;                       // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDamageInstigator : 1;                                     // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bApplyMomentumToBigPawns : 1;                              // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoDragDeadDino : 1;                                     // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImpulseResetsDinoVelocity : 1;                            // 0x0099(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHitPawnEffectsFromLocalInstigator : 1;             // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRiderIgnoreDamage : 1;                                    // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoFriendlyDamage : 1;                                     // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsTurretDamage : 1;                                       // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceGeneralArmorUsage : 1;                               // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDamageImpulseOnly : 1;                                    // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoreDinoFlyers : 1;                                     // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustDamage : 1;                                    // 0x009A(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustAggro : 1;                                     // 0x009B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAdjustHarvestingDamage : 1;                          // 0x009B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisplayHitMarker : 1;                                     // 0x009B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDinoDamageCauserAllowSameTeam : 1;                        // 0x009B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyApplyDamageTorpidityToPlayersAndTames : 1;            // 0x009B(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              DamageInstigatorPercentage;                                // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDinoOnDinoDamageCauserAllowSameTeam : 1;                  // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceRespawnCooldown : 1;                                 // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowDamageCorpses : 1;                                   // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowFriendlyFire : 1;                               // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAllowPvEDamage : 1;                                  // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnKill : 1;                                        // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDinoKillVictimItemCollection : 1;                  // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsInstantDamage : 1;                                      // 0x00A0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHurtAnim : 1;                                      // 0x00A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventHurtSoundAndCameraShake : 1;                       // 0x00A1(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OUHX[0x2];                                     // 0x00A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UseSpecialDamageInterval;                                  // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildDinoForcedAggroDuration;                               // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_61RX[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BuffToGiveVictimCharacter;                                 // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MassScaleDamageImpulseExponent;                            // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BUQM[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              DamageIgnoreActorClasses;                                  // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              DamageOnlyActorClasses;                                    // 0x00D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FOverrideDamageHarvestingEntry>      OverrideDamageHarvestEntries;                              // 0x00E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      InvalidHarvestOverrideDamageType;                          // 0x00F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FTargetClassDamageScaler>            TargetClassDamageScalers;                                  // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              OverrideDamageForResourceHarvestingItems;                  // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              OverrideDamageForResourceHarvestingDamageTypes;            // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterDamageType");
		return ptr;
	}



	class UClass* OverrideBuffToGiveVictimCharacter(class APrimalCharacter* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	float BPAdjustHarvestingDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	float BPAdjustDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	float BPAdjustAggro(class APrimalDinoAIController* DamagedCharacterController, class APrimalCharacter* DamagedCharacter, float DesiredAggroValue, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
};

// Class ShooterGame.ShooterEngine
// 0x0020 (FullSize[0x09B0] - InheritedSize[0x0990])
class UShooterEngine : public UGameEngine
{
public:
	unsigned char                                      UnknownData_7JUM[0x20];                                    // 0x0990(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterEngine");
		return ptr;
	}



};

// Class ShooterGame.ShooterGame_Menu
// 0x0050 (FullSize[0x05B0] - InheritedSize[0x0560])
class AShooterGame_Menu : public AGameMode
{
public:
	struct FString                                     MenuMusic;                                                 // 0x0560(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      SponsoredModsMenu;                                         // 0x0570(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       ActiveEvent;                                               // 0x0578(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FActiveEventMainMenuOverride>        ActiveEventMainMenuOverrides;                              // 0x0580(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                          BackgroundTextureOverrides;                                // 0x0590(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_9Q62[0x10];                                    // 0x05A0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGame_Menu");
		return ptr;
	}



	void PlayMusic();
	bool GetMainMenuOverrideData(struct FActiveEventMainMenuOverride* OverrideData);
	class UTexture2D* GetMainMenuBackgroundTexture();
};

// Class ShooterGame.ShooterGameInstance
// 0x0350 (FullSize[0x03A8] - InheritedSize[0x0058])
class UShooterGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData_IZQJ[0x58];                                    // 0x0058(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAsyncAssetLoaded;                                        // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FAssetPathObjectPair>                AsyncLoadededAssetReferences;                              // 0x00C0(0x0010) (ZeroConstructor, Transient)
	class UWorldModifiersContainer*                    WorldModifiersContainer;                                   // 0x00D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     WelcomeScreenMap;                                          // 0x00D8(0x0010) (ZeroConstructor, Config)
	struct FString                                     MainMenuMap;                                               // 0x00E8(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_DMFF[0x298];                                   // 0x00F8(0x0298) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ActiveEvent;                                               // 0x0390(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     WorldModifierConfigOverride;                               // 0x0398(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameInstance");
		return ptr;
	}



	void LoadTheGameMedia();
	void DisplayGlobalMainMenuNotification();
	void AsyncUnloadAssetFromPath(const struct FString& AssetPathToUnload, bool bForceGarbageCollection);
	void AsyncUnloadAssetFromObject(class UObject* AssetObjectToUnload, bool bForceGarbageCollection);
	void AsyncLoadAssetFromPath(const struct FString& AssetPath);
	void AsyncAssetLoadedDelegate__DelegateSignature(const struct FString& AssetPath, class UObject* LoadedAsset);
};

// Class ShooterGame.TerrainActor
// 0x0020 (FullSize[0x0490] - InheritedSize[0x0470])
class ATerrainActor : public AActor
{
public:
	class UTerrainComponent*                           TerrainComponent;                                          // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, SaveGame, IsPlainOldData, NoDestructor)
	class AInstancedFoliageActor*                      FoliageActor;                                              // 0x0478(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class UHierarchicalInstancedStaticMeshComponent*> HierarchicalInstancedStaticMeshComponents;                 // 0x0480(0x0010) (ExportObject, ZeroConstructor, Transient, SaveGame, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TerrainActor");
		return ptr;
	}



	void GenerateTerrain();
};

// Class ShooterGame.TerrainComponent
// 0x0220 (FullSize[0x02F8] - InheritedSize[0x00D8])
class UTerrainComponent : public UActorComponent
{
public:
	class UClass*                                      TerrainGeneratorTemplete;                                  // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      BlockingVolumeActorTemplate;                               // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BlockingVolumeAreaRatioOfTerrain;                          // 0x00E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bGenerate : 1;                                             // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bClear : 1;                                                // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPreview : 1;                                              // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPreviewDecorations : 1;                                   // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SCIX[0x3];                                     // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PreviewSize;                                               // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7K02[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UTexture2D*>                          GeneratedTextures;                                         // 0x00F8(0x0010) (Edit, ZeroConstructor)
	class UTerrainGenerator*                           TerrainGenerator;                                          // 0x0108(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9EMM[0x24];                                    // 0x0110(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SectionsPerComponent;                                      // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                QuadsPerSection;                                           // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VV82[0x4];                                     // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTerrainInfo                                ReplicatedTerrainInfo;                                     // 0x0140(0x0058) (Net, SaveGame, RepNotify, ContainsInstancedReference)
	int                                                TerrainMapSizeX;                                           // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TerrainMapSizeY;                                           // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MapSeed;                                                   // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumberOfThreads;                                           // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LandscapeScale;                                            // 0x01A8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LandscapeRadius;                                           // 0x01B4(0x0004) (Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FVector                                     BiomeGridSize;                                             // 0x01B8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     NPCGridSize;                                               // 0x01C4(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BiomeHeight;                                               // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NPCZoneHeight;                                             // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SupplyDropsGridSize;                                       // 0x01D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PJLF[0xE0];                                    // 0x01E0(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ALandscape*                                  Landscape;                                                 // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                              SpawnedActors;                                             // 0x02C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_J5R6[0x8];                                     // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AInstancedFoliageActor*                      FoliageActor;                                              // 0x02E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1Q2P[0x10];                                    // 0x02E8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TerrainComponent");
		return ptr;
	}



	void OnRep_TerrainInfo();
	void OnConstruct();
	void ApplyToTexture(class UFloatMap* FloatMap, class UTexture2D** Texture, float Minimum, float Maximum);
};

// Class ShooterGame.ShooterGameMode
// 0x2B10 (FullSize[0x3070] - InheritedSize[0x0560])
class AShooterGameMode : public AGameMode
{
public:
	unsigned char                                      UnknownData_ABDA[0xF8];                                    // 0x0560(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     BanFileName;                                               // 0x0658(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_JRXY[0xE0];                                    // 0x0668(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class URCONServer*                                 RCONSocket;                                                // 0x0748(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FString                                     PlayersJoinNoCheckFilename;                                // 0x0750(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	struct FString                                     PlayersExclusiveCheckFilename;                             // 0x0760(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected)
	class UShooterCheatManager*                        GlobalCommandsCheatManager;                                // 0x0770(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_35PX[0x10];                                    // 0x0778(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CheckGlobalEnablesURL;                                     // 0x0788(0x0010) (ZeroConstructor, Transient, Protected)
	class UDatabase_LoginData*                         Database_LoginDataRef;                                     // 0x0798(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UDatabase_PubSub_GeneralNotifications*       PubSub_GeneralNotificationsRef;                            // 0x07A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class ATerrainActor*                               TerrainActor;                                              // 0x07A8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_UET9[0x128];                                   // 0x07B0(0x0128) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bGlobalDisableLoginLockCheck;                              // 0x08D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bTempDisableLoginLockCheck;                                // 0x08D9(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RKBP[0x6];                                     // 0x08DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MyServerId;                                                // 0x08E0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_HQBO[0x70];                                    // 0x08F0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTribeData>                          TribesData;                                                // 0x0960(0x0010) (ZeroConstructor)
	TArray<class APrimalDinoCharacter*>                ActivelyTamingDinos;                                       // 0x0970(0x0010) (ZeroConstructor)
	class UClass*                                      TerrainActorTemplate;                                      // 0x0980(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       TerrainActorClassName;                                     // 0x0988(0x0010) (ZeroConstructor, Config)
	struct FString                                     PGMapName;                                                 // 0x0998(0x0010) (ZeroConstructor, Config)
	struct FString                                     PGTerrainPropertiesString;                                 // 0x09A8(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_PB67[0x50];                                    // 0x09B8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAutoCreateNewPlayerData;                                  // 0x0A08(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LVC4[0x7];                                     // 0x0A09(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DifficultyValue;                                           // 0x0A10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DifficultyValueMin;                                        // 0x0A14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DifficultyValueMax;                                        // 0x0A18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ProximityRadius;                                           // 0x0A1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ProximityRadiusUnconsiousScale;                            // 0x0A20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CE5Y[0x4];                                     // 0x0A24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      CheatClass;                                                // 0x0A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIsOfficialServer;                                         // 0x0A30(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsConsoleUnOfficialPCServer;                              // 0x0A31(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerAllowArkDownload;                                   // 0x0A32(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FTIN[0x2];                                     // 0x0A33(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAlwaysNotifyPlayerLeft;                                   // 0x0A35(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAlwaysNotifyPlayerJoined;                                 // 0x0A36(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bServerHardcore;                                           // 0x0A37(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LACU[0x34];                                    // 0x0A38(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bEnableCryoSicknessPVE;                                    // 0x0A6C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2NAN[0x3];                                     // 0x0A6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CryopodNerfDamageMult;                                     // 0x0A70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CryopodNerfDuration;                                       // 0x0A74(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bEnableMeshBitingProtection;                               // 0x0A78(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SIEE[0x3];                                     // 0x0A79(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CryopodNerfIncomingDamageMultPercent;                      // 0x0A7C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TVWT[0x40];                                    // 0x0A80(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResourcesRespawnPeriodMultiplier;                          // 0x0AC0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              KickIdlePlayersPeriod;                                     // 0x0AC4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MateBoostEffectMultiplier;                                 // 0x0AC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AYUI[0x4];                                     // 0x0ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              XPMultiplier;                                              // 0x0AD0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ActiveEvent;                                               // 0x0AD4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TribeNameChangeCooldown;                                   // 0x0ADC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlatformSaddleBuildAreaBoundsMultiplier;                   // 0x0AE0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAlwaysAllowStructurePickup;                               // 0x0AE4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V0NI[0x3];                                     // 0x0AE5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StructurePickupTimeAfterPlacement;                         // 0x0AE8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StructurePickupHoldDuration;                               // 0x0AEC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAllowIntegratedSPlusStructures;                           // 0x0AF0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAllowHideDamageSourceFromLogs;                            // 0x0AF1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3VVQ[0x2];                                     // 0x0AF2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              KillXPMultiplier;                                          // 0x0AF4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HarvestXPMultiplier;                                       // 0x0AF8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CraftXPMultiplier;                                         // 0x0AFC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GenericXPMultiplier;                                       // 0x0B00(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SpecialXPMultiplier;                                       // 0x0B04(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J538[0x78];                                    // 0x0B08(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UPrimalPlayerData*>                   PlayerDatas;                                               // 0x0B80(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_CXDG[0x6];                                     // 0x0B90(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bForceRespawnDinos;                                        // 0x0B96(0x0001) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NQVC[0x19];                                    // 0x0B97(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnCharacterPossessedByPlayer;                              // 0x0BB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterUnpossessedByPlayer;                            // 0x0BC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShooterCharacterSpawned;                                 // 0x0BD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShooterCharacterDied;                                    // 0x0BE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionTriggerBeginOverlap;                              // 0x0BF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionTriggerEndOverlap;                                // 0x0C00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              TamedDinoDamageMultiplier;                                 // 0x0C10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoDamageMultiplier;                                      // 0x0C14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerDamageMultiplier;                                    // 0x0C18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StructureDamageMultiplier;                                 // 0x0C1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerResistanceMultiplier;                                // 0x0C20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoResistanceMultiplier;                                  // 0x0C24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedDinoResistanceMultiplier;                             // 0x0C28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StructureResistanceMultiplier;                             // 0x0C2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bJoinInProgressGamesAsSpectator;                           // 0x0C30(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BSOC[0x3];                                     // 0x0C31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TamingSpeedMultiplier;                                     // 0x0C34(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HarvestAmountMultiplier;                                   // 0x0C38(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HarvestHealthMultiplier;                                   // 0x0C3C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerCharacterWaterDrainMultiplier;                       // 0x0C40(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerCharacterFoodDrainMultiplier;                        // 0x0C44(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoCharacterFoodDrainMultiplier;                          // 0x0C48(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RaidDinoCharacterFoodDrainMultiplier;                      // 0x0C4C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerCharacterStaminaDrainMultiplier;                     // 0x0C50(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoCharacterStaminaDrainMultiplier;                       // 0x0C54(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerCharacterHealthRecoveryMultiplier;                   // 0x0C58(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoCharacterHealthRecoveryMultiplier;                     // 0x0C5C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CarnivoreNaturalTargetingRangeMultiplier;                  // 0x0C60(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CarnivorePlayerAggroMultiplier;                            // 0x0C64(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HerbivoreNaturalTargetingRangeMultiplier;                  // 0x0C68(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HerbivorePlayerAggroMultiplier;                            // 0x0C6C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               AIForceTargetPlayers;                                      // 0x0C70(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               AIForceOverlapCheck;                                       // 0x0C71(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R7KQ[0x6];                                     // 0x0C72(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDisableSaveLoad;                                          // 0x0C78(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableXP;                                                // 0x0C79(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableDynamicMusic;                                      // 0x0C7A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RLYQ[0x5];                                     // 0x0C7B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FPlayerDeathReason>                  PlayerDeathReasons;                                        // 0x0C80(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<struct FLevelExperienceRamp>                LevelExperienceRampOverrides;                              // 0x0C90(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<int>                                        OverridePlayerLevelEngramPoints;                           // 0x0CA0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<int>                                        ExcludeItemIndices;                                        // 0x0CB0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FEngramEntryOverride>                OverrideEngramEntries;                                     // 0x0CC0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FEngramEntryOverride>                OverrideNamedEngramEntries;                                // 0x0CD0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FEngramEntryAutoUnlock>              EngramEntryAutoUnlocks;                                    // 0x0CE0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FString>                             PreventDinoTameClassNames;                                 // 0x0CF0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FDinoSpawnWeightMultiplier>          DinoSpawnWeightMultipliers;                                // 0x0D00(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassMultiplier>                    DinoClassResistanceMultipliers;                            // 0x0D10(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassMultiplier>                    TamedDinoClassResistanceMultipliers;                       // 0x0D20(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassMultiplier>                    DinoClassDamageMultipliers;                                // 0x0D30(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassMultiplier>                    TamedDinoClassDamageMultipliers;                           // 0x0D40(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassMultiplier>                    HarvestResourceItemAmountClassMultipliers;                 // 0x0D50(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FClassNameReplacement>               NPCReplacements;                                           // 0x0D60(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	float                                              PvPZoneStructureDamageMultiplier;                          // 0x0D70(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOnlyAllowSpecifiedEngrams;                                // 0x0D74(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8A2V[0x3];                                     // 0x0D75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OverrideMaxExperiencePointsPlayer;                         // 0x0D78(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                OverrideMaxExperiencePointsDino;                           // 0x0D7C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalSpoilingTimeMultiplier;                              // 0x0D80(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalItemDecompositionTimeMultiplier;                     // 0x0D84(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalCorpseDecompositionTimeMultiplier;                   // 0x0D88(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxFallSpeedMultiplier;                                    // 0x0D8C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAutoPvETimer;                                             // 0x0D90(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAutoPvEUseSystemTime;                                     // 0x0D91(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X41H[0xA];                                     // 0x0D92(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AutoPvEStartTimeSeconds;                                   // 0x0D9C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AutoPvEStopTimeSeconds;                                    // 0x0DA0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2TEX[0x4];                                     // 0x0DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AHibernationManager*                         HibernationManager;                                        // 0x0DA8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                TributeItemExpirationSeconds;                              // 0x0DB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                TributeDinoExpirationSeconds;                              // 0x0DB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                TributeCharacterExpirationSeconds;                         // 0x0DB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OGC5[0x8];                                     // 0x0DBC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxTributeItems;                                           // 0x0DC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxTributeDinos;                                           // 0x0DC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxTributeCharacters;                                      // 0x0DCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIncreasePvPRespawnInterval;                               // 0x0DD0(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RPFT[0x3];                                     // 0x0DD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IncreasePvPRespawnIntervalCheckPeriod;                     // 0x0DD4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IncreasePvPRespawnIntervalMultiplier;                      // 0x0DD8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              IncreasePvPRespawnIntervalBaseAmount;                      // 0x0DDC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceNoReplenishRadiusStructures;                       // 0x0DE0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ResourceNoReplenishRadiusPlayers;                          // 0x0DE4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropGrowthSpeedMultiplier;                                 // 0x0DE8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LayEggIntervalMultiplier;                                  // 0x0DEC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PoopIntervalMultiplier;                                    // 0x0DF0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CropDecaySpeedMultiplier;                                  // 0x0DF4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowChatFromDeadNonAdmins;                               // 0x0DF8(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowDisablingSpectator;                                  // 0x0DF9(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPvEDisableFriendlyFire;                                   // 0x0DFA(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFlyerPlatformAllowUnalignedDinoBasing;                    // 0x0DFB(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowUnclaimDinos;                                        // 0x0DFC(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DRGC[0x3];                                     // 0x0DFD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxPerTribePlatformSaddleStructureLimit;                   // 0x0E00(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxPlatformSaddleStructureLimit;                           // 0x0E04(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxDinoBaseLevel;                                          // 0x0E08(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxNumberOfPlayersInTribe;                                 // 0x0E0C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TribeSlotReuseCooldown;                                    // 0x0E10(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MatingIntervalMultiplier;                                  // 0x0E14(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              EggHatchSpeedMultiplier;                                   // 0x0E18(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyMatureSpeedMultiplier;                                 // 0x0E1C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyFoodConsumptionSpeedMultiplier;                        // 0x0E20(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LK15[0x4];                                     // 0x0E24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PerLevelStatsMultiplier_Player[0xC];                       // 0x0E28(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PerLevelStatsMultiplier_DinoTamed[0xC];                    // 0x0E58(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PerLevelStatsMultiplier_DinoTamed_Add[0xC];                // 0x0E88(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PerLevelStatsMultiplier_DinoTamed_Affinity[0xC];           // 0x0EB8(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PerLevelStatsMultiplier_DinoWild[0xC];                     // 0x0EE8(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MutagenLevelBoost[0xC];                                    // 0x0F18(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MutagenLevelBoost_Bred[0xC];                               // 0x0F48(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ItemStatClamps[0x8];                                       // 0x0F78(0x0020) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxGateFrameOnSaddles;                                     // 0x0F98(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxHexagonsPerCharacter;                                   // 0x0F9C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bCustomGameModeAllowSpectatorJoinAfterMatchStart;          // 0x0FA0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KE88[0x1047];                                  // 0x0FA1(0x1047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bGameplayLogEnabled;                                       // 0x1FE8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bServerGameLogEnabled;                                     // 0x1FE9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HN9B[0x6];                                     // 0x1FEA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      BonusSupplyCrateItemClass;                                 // 0x1FF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BonusSupplyCrateItemGiveInterval;                          // 0x1FF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StructureDamageRepairCooldown;                             // 0x1FFC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CustomRecipeEffectivenessMultiplier;                       // 0x2000(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CustomRecipeSkillMultiplier;                               // 0x2004(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FString                                     BonusSupplyCrateItemString;                                // 0x2008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               MaxDifficulty;                                             // 0x2018(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPvEAllowTribeWar;                                         // 0x2019(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPvEAllowTribeWarCancel;                                   // 0x201A(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowCustomRecipes;                                       // 0x201B(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPassiveDefensesDamageRiderlessDinos;                      // 0x201C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5STT[0xB];                                     // 0x201D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bEnableDeathTeamSpectator;                                 // 0x2028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bTribeStoreCharacterConfiguration;                         // 0x2029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZOKR[0xF6];                                    // 0x202A(0x00F6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxTribeLogs;                                              // 0x2120(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O1XL[0x1C];                                    // 0x2124(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDisableFriendlyFire;                                      // 0x2140(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowInactiveTribes;                                      // 0x2141(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceMapPlayerLocation;                                   // 0x2142(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5P8B[0x1];                                     // 0x2143(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DinoHarvestingDamageMultiplier;                            // 0x2144(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerHarvestingDamageMultiplier;                          // 0x2148(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DinoTurretDamageMultiplier;                                // 0x214C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableLootCrates;                                        // 0x2150(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FENR[0x3];                                     // 0x2151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ExtinctionEventTimeInterval;                               // 0x2154(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3ZKM[0x4];                                     // 0x2158(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           NextExtinctionEventUTC;                                    // 0x215C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D56X[0x18];                                    // 0x2160(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bShowFloatingDamageText;                                   // 0x2178(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VFQB[0x3];                                     // 0x2179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SavedGameModeVersion;                                      // 0x217C(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GBA9[0x4];                                     // 0x2180(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAllowTekSuitPowersInGenesis;                              // 0x2184(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6W4Y[0x43];                                    // 0x2185(0x0043) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemCraftingCostOverride>           OverrideItemCraftingCosts;                                 // 0x21C8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FConfigItemCraftingCostOverride>     ConfigOverrideItemCraftingCosts;                           // 0x21D8(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FConfigMaxItemQuantityOverride>      ConfigOverrideItemMaxQuantity;                             // 0x21E8(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	unsigned char                                      UnknownData_HZYT[0x50];                                    // 0x21F8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FConfigSupplyCrateItemsOverride>     ConfigOverrideSupplyCrateItems;                            // 0x2248(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FConfigNPCSpawnEntriesContainer>     ConfigOverrideNPCSpawnEntriesContainer;                    // 0x2258(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FConfigNPCSpawnEntriesContainer>     ConfigAddNPCSpawnEntriesContainer;                         // 0x2268(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FConfigNPCSpawnEntriesContainer>     ConfigSubtractNPCSpawnEntriesContainer;                    // 0x2278(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	float                                              BabyImprintingStatScaleMultiplier;                         // 0x2288(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleIntervalMultiplier;                              // 0x228C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyImprintAmountMultiplier;                               // 0x2290(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleGracePeriodMultiplier;                           // 0x2294(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BabyCuddleLoseImprintQualitySpeedMultiplier;               // 0x2298(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HairGrowthSpeedMultiplier;                                 // 0x229C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventDiseases;                                          // 0x22A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bNonPermanentDiseases;                                     // 0x22A1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WQA5[0x6];                                     // 0x22A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAllClustersInventory*                       AllClustersInventory;                                      // 0x22A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                SaveForceRespawnDinosVersion;                              // 0x22B0(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G63C[0x4];                                     // 0x22B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint64_t                                           ServerID;                                                  // 0x22B8(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9SIF[0x58];                                    // 0x22C0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        SupportedSpawnRegions;                                     // 0x2318(0x0010) (ZeroConstructor, Transient)
	bool                                               bServerUseDinoList;                                        // 0x2328(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IHP3[0x3];                                     // 0x2329(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxAllowedRespawnInterval;                                 // 0x232C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseDinoLevelUpAnimations;                                 // 0x2330(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableDinoTaming;                                        // 0x2331(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableDinoRiding;                                        // 0x2332(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RW6I[0x5];                                     // 0x2333(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SaveGameCustomVersion;                                     // 0x2338(0x0004) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LWE4[0x824];                                   // 0x233C(0x0824) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlayerBaseStatMultipliers[0xC];                            // 0x2B60(0x0030) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NPCActiveCountTamed;                                       // 0x2B90(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NPCActiveCount;                                            // 0x2B94(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NPCCount;                                                  // 0x2B98(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RTSModeNumSelectableDinosScale;                            // 0x2B9C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RTSMaxRangeFromPlayerCharacterScale;                       // 0x2BA0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RTSProximityToEnemyStructureScale;                         // 0x2BA4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MatingSpeedMultiplier;                                     // 0x2BA8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FastDecayInterval;                                         // 0x2BAC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseSingleplayerSettings;                                  // 0x2BB0(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseCorpseLocator;                                         // 0x2BB1(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableGenesisMissions;                                   // 0x2BB2(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableStructurePlacementCollision;                       // 0x2BB3(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceUseInventoryAppends;                                 // 0x2BB4(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O8FS[0x3];                                     // 0x2BB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SupplyCrateLootQualityMultiplier;                          // 0x2BB8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FishingLootQualityMultiplier;                              // 0x2BBC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ItemStackSizeMultiplier;                                   // 0x2BC0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CraftingSkillBonusMultiplier;                              // 0x2BC4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowPlatformSaddleMultiFloors;                           // 0x2BC8(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowUnlimitedRespecs;                                    // 0x2BC9(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KYJE[0x2];                                     // 0x2BCA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FuelConsumptionIntervalMultiplier;                         // 0x2BCC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                DestroyTamesOverLevelClamp;                                // 0x2BD0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxAlliancesPerTribe;                                      // 0x2BD4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxTribesPerAlliance;                                      // 0x2BD8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableDinoDecayClaiming;                                 // 0x2BDC(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableNonTribePinAccess;                                 // 0x2BDD(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseTameLimitForStructuresOnly;                            // 0x2BDE(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bLimitTurretsInRange;                                      // 0x2BDF(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LimitTurretsRange;                                         // 0x2BE0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LimitTurretsNum;                                           // 0x2BE4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHardLimitTurretsInRange;                                  // 0x2BE8(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAutoUnlockAllEngrams;                                     // 0x2BE9(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A0ZX[0x6];                                     // 0x2BEA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ServerLastForceRespawnWildDinosTime;                       // 0x2BF0(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	struct FString                                     UseStructurePreventionVolumeTagString;                     // 0x2BF8(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	float                                              BaseTemperatureMultiplier;                                 // 0x2C08(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceAllowAllStructures;                                  // 0x2C0C(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceAllowAscensionItemDownloads;                         // 0x2C0D(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowCreativeMode;                                         // 0x2C0E(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5BRY[0x1];                                     // 0x2C0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LimitNonPlayerDroppedItemsRange;                           // 0x2C10(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LimitNonPlayerDroppedItemsCount;                           // 0x2C14(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GlobalPoweredBatteryDurabilityDecreasePerSecond;           // 0x2C18(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SingleplayerSettingsCorpseLifespanMultiplier;              // 0x2C1C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              UseCorpseLifeSpanMultiplier;                               // 0x2C20(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TimePeriodToHideDisconnectedPlayers;                       // 0x2C24(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPPreSpawnedDino;                                      // 0x2C28(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MNBY[0x3];                                     // 0x2C29(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PreventOfflinePvPConnectionInvincibleInterval;             // 0x2C2C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedDinoCharacterFoodDrainMultiplier;                     // 0x2C30(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildDinoCharacterFoodDrainMultiplier;                      // 0x2C34(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WildDinoTorporDrainMultiplier;                             // 0x2C38(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PassiveTameIntervalMultiplier;                             // 0x2C3C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TamedDinoTorporDrainMultiplier;                            // 0x2C40(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableWeatherFog;                                        // 0x2C44(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_241Z[0x3];                                     // 0x2C45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MeshCheckingRayDistance;                                   // 0x2C48(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MeshCheckingSubdivisons;                                   // 0x2C4C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MeshCheckingPercentageToFail;                              // 0x2C50(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreStructuresPreventionVolumes;                        // 0x2C54(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bGenesisUseStructuresPreventionVolumes;                    // 0x2C55(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GAGU[0x2];                                     // 0x2C56(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     LiveTuningFileName;                                        // 0x2C58(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	unsigned char                                      UnknownData_2QIA[0x31];                                    // 0x2C68(0x0031) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bLogChatMessages;                                          // 0x2C99(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LFQH[0x2];                                     // 0x2C9A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ChatLogFlushIntervalSeconds;                               // 0x2C9C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ChatLogFileSplitIntervalSeconds;                           // 0x2CA0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ChatLogMaxAgeInDays;                                       // 0x2CA4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1K1L[0x58];                                    // 0x2CA8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLeaderboardsContainer                      LeaderboardContainer;                                      // 0x2D00(0x0010) (Transient, SaveGame)
	unsigned char                                      UnknownData_IDFR[0x58];                                    // 0x2D10(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bHasCovertedToStore;                                       // 0x2D68(0x0001) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	bool                                               bAllowStoredDatas;                                         // 0x2D69(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R28Q[0x126];                                   // 0x2D6A(0x0126) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBuffAddition>                       AdditionalDefaultBuffs;                                    // 0x2E90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bParseServerToJson;                                        // 0x2EA0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FI57[0x7F];                                    // 0x2EA1(0x007F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnPreSpawnedDino;                                          // 0x2F20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilled;                                                  // 0x2F30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostLogin;                                               // 0x2F40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartNewPlayer;                                          // 0x2F50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAddNewTribe;                                             // 0x2F60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemoveTribe;                                             // 0x2F70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemovePlayerFromTribe;                                   // 0x2F80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnServerChatMessage;                                       // 0x2F90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnServerDirectMessage;                                     // 0x2FA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnServerNotification;                                      // 0x2FB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDamage;                                            // 0x2FC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSerializeForSaveFile;                                    // 0x2FD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_UPBU[0x20];                                    // 0x2FE0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseHexagonRewardMultiplier;                               // 0x3000(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HexagonRewardMultiplier;                                   // 0x3004(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HexagonCostMultiplier;                                     // 0x3008(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableHexagonStore;                                      // 0x300C(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bHexStoreAllowOnlyEngramTradeOption;                       // 0x300D(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HQMK[0x2];                                     // 0x300E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FClassNameReplacement>               DynamicNPCReplacements;                                    // 0x3010(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FClassNameReplacement>               CollectiveNPCReplacements;                                 // 0x3020(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             PreventTransferForClassNames;                              // 0x3030(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	bool                                               bAllowFlyerSpeedLeveling;                                  // 0x3040(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bEnableWorldBuffScaling;                                   // 0x3041(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SZLU[0x6];                                     // 0x3042(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCrateTemporaryQualityModifierSet>   TemporaryCrateModifiers;                                   // 0x3048(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FResourceTemporaryAmountModifierSet> TemporaryResourceModifiers;                                // 0x3058(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              AdjustableMutagenSpawnDelayMultiplier;                     // 0x3068(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableDefaultMapItemSets;                                // 0x306C(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RYLZ[0x3];                                     // 0x306D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameMode");
		return ptr;
	}



	bool TryGetIntOptionIni(const struct FString& Section, const struct FString& OptionName, int* Value);
	bool TryGetIntOption(const struct FString& Section, const struct FString& Options, const struct FString& OptionName, int* Value);
	bool TryGetBoolOptionIni(const struct FString& Section, const struct FString& OptionName, bool* Value);
	bool TryGetBoolOption(const struct FString& Section, const struct FString& Options, const struct FString& OptionName, bool* Value);
	bool STATIC_TriggerLevelCustomEvents(class UWorld* inWorld, const struct FString& EventName, int IDtoOnlyAllowExecutionOncePerFrame);
	float TimeSinceMissionDeactivated(class UClass* MissionType);
	void ShooterCharacterSpawned__DelegateSignature(class AShooterCharacter* TheShooterCharacter);
	void ShooterCharacterDied__DelegateSignature(class AShooterCharacter* TheShooterCharacter);
	void SetTimeOfDay(const struct FString& timeString);
	void SetLastMissionDeactivatedUtcTime(class UClass* MissionType, double UtcTime);
	void SendServerNotification(const struct FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int ReceiverTeamId, int ReceiverPlayerID, bool bDoBillboard);
	void SendServerDirectMessage(const struct FString& PlayerSteamIDconst, const struct FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int ReceiverTeamId, int ReceiverPlayerID, const struct FString& PlayerName);
	void SendServerChatMessage(const struct FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int ReceiverTeamId, int ReceiverPlayerID);
	void RestartServer();
	void RemovePlayerData(class AShooterPlayerState* PlayerState);
	void RemoveInactivePlayersAndTribes();
	void ReassertColorization();
	void PrintToServerGameLog(const struct FString& InString, bool bSendChatToAllAdmins);
	void PrintToGameplayLog(const struct FString& InString);
	void PreSpawnedDino__DelegateSignature(class APrimalDinoCharacter* theDino);
	void PostAlarmNotificationTribe(int TribeId, const struct FString& Title, const struct FString& Message);
	void PostAlarmNotificationPlayerID(int PlayerId, const struct FString& Title, const struct FString& Message);
	void PostAlarmNotification(const struct FString& SteamID, const struct FString& Title, const struct FString& Message);
	void OnStartNewPlayer__DelegateSignature(class APlayerController* NewPlayer);
	void OnServerNotification__DelegateSignature(const struct FString& MessageText, int ReceiverTeamId, int ReceiverPlayerID);
	void OnServerDirectMessage__DelegateSignature(const struct FString& PlayerSteamIDconst, const struct FString& MessageText, int ReceiverTeamId, int ReceiverPlayerID, const struct FString& PlayerName);
	void OnServerChatMessage__DelegateSignature(const struct FString& MessageText, int ReceiverTeamId, int ReceiverPlayerID);
	void OnSerializeForSaveFile__DelegateSignature();
	void OnRemoveTribe__DelegateSignature(int TribeId);
	void OnRemovePlayerFromTribe__DelegateSignature(int TribeId, int PlayerDataID);
	void OnPostLogin__DelegateSignature(class APlayerController* NewPlayer);
	void OnNotifyDamage__DelegateSignature(class AActor* Victim, float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void OnLogout(class AController* Exiting);
	void OnLandscapeLevelUnloaded();
	void OnLandscapeLevelLoaded();
	void OnKilled__DelegateSignature(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UDamageType* DamageType);
	void OnAddNewTribe__DelegateSignature(class AShooterPlayerState* PlayerOwner, const struct FString& TribeName, const struct FTribeGovernment& TribeGovernment);
	void MissionTriggerEndOverlap__DelegateSignature(class AMissionTrigger* Trigger, const struct FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void MissionTriggerBeginOverlap__DelegateSignature(class AMissionTrigger* Trigger, const struct FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void LoadedWorld();
	void KickPlayerController(class APlayerController* thePC, const struct FString& KickMessage);
	void KickAllPlayersAndReload();
	bool IsTimeSinceMissionDeactivated(class UClass* MissionType, float CheckTimeSince, bool bForceTrueAtZeroTime);
	bool IsPlayerControllerAllowedToJoinNoCheck(class AShooterPlayerController* ForPlayer);
	bool IsPlayerControllerAllowedToExclusiveJoin(class AShooterPlayerController* ForPlayer);
	bool IsPlayerAllowedToCheat(class AShooterPlayerController* ForPlayer);
	void InitOptionString(const struct FString& Commandline, const struct FString& Section, const struct FString& Option);
	void InitOptionInteger(const struct FString& Commandline, const struct FString& Section, const struct FString& Option, int CurrentValue);
	void InitOptionFloat(const struct FString& Commandline, const struct FString& Section, const struct FString& Option, float CurrentValue);
	void InitOptionBool(const struct FString& Commandline, const struct FString& Section, const struct FString& Option, bool bDefaultValue);
	void InitGameStateDataSets();
	void IncrementNumDeaths(const struct FString& PlayerDataID);
	bool HandleNewPlayer(class AShooterPlayerController* NewPlayer, class UPrimalPlayerData* PlayerData, class AShooterCharacter* PlayerCharacter, bool bIsFromLogin);
	struct FTribeData GetTribeDataBlueprint(int TribeId);
	struct FString GetStringOption(const struct FString& Section, const struct FString& OptionName);
	struct FString GetSessionTimeString();
	bool GetServerSettingsFloat(const struct FString& KeyValue, float* OutFloat);
	struct FString GetServerName(bool bNumbersAndLettersOnly);
	class UPrimalPlayerData* GetPlayerDataByInt(uint64_t* PlayerDataIDInt);
	class UPrimalPlayerData* GetPlayerData(const struct FString& PlayerDataID);
	TArray<class APrimalDinoCharacter*> GetOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int DinoTeam, bool bExactClassMatch, bool bIgnoreClass);
	int GetNumDeaths(const struct FString& PlayerDataID);
	int GetNumberOfLivePlayersOnTribe(const struct FString& TribeName);
	bool GetLaunchOptionFloat(const struct FString& LaunchOptionKey, float* ReturnVal);
	double GetLastMissionDeactivatedUtcTime(class UClass* MissionType);
	int GetIntOptionIni(const struct FString& Section, const struct FString& OptionName);
	float GetFloatOptionIni(const struct FString& Section, const struct FString& OptionName);
	bool GetBoolOptionIni(const struct FString& Section, const struct FString& OptionName, bool bDefaultValue);
	void ForceRepopulateFoliageAtPoint(const struct FVector& AtPoint, float MaxRangeFromPoint, int MaxNumFoliages, class UClass* RepopulatedEmitter, const struct FVector& StructureDownTraceVector, const struct FVector& StructureUpTraceVector, bool bDontCheckForOverlaps, int TriggeredByTeamID, bool bCheckAreaAroundEachIndividualFoliage, float RadiusAroundEachIndivitualFoliageToCheck);
	int ForceCreateTribe(const struct FString& TribeName, int TeamOverride);
	int ForceAddPlayerToTribe(class AShooterPlayerState* ForPlayerState, const struct FString& TribeName);
	int CountOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int DinoTeam, bool bExactClassMatch, bool bIgnoreClass);
	void ClearLastMissionDeactivatedTime(class UClass* MissionType);
	bool CheckJoinInProgress(bool bIsFromLogin, class APlayerController* NewPlayer);
	void CharacterPossessionByPlayer__DelegateSignature(class APrimalCharacter* TheCharacter, class APlayerController* ByPlayerController);
	void BPPreSpawnedDino(class APrimalDinoCharacter* theDino);
	bool BPIsSpawnpointPreferred(class APlayerStart* SpawnPoint, class AController* Player);
	bool BPIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player);
	bool AreTribesAllied(int TribeID1, int TribeID2);
	bool AllowTaming(int ForTeam);
	bool STATIC_AllowDamage(class UWorld* ForWorld, int TargetingTeam1, int TargetingTeam2, bool bIgnoreDamageIfAllied);
	void AddToTribeLog(int TribeId, const struct FString& NewLog);
};

// Class ShooterGame.CustomGameMode
// 0x0000 (FullSize[0x3070] - InheritedSize[0x3070])
class ACustomGameMode : public AShooterGameMode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CustomGameMode");
		return ptr;
	}



	void SaveIntToConfig(int IntValue, const struct FString& KeyValue);
	void SaveFloatToConfig(float IntValue, const struct FString& KeyValue);
	void SaveBoolToConfig(bool IntValue, const struct FString& KeyValue);
	bool OnUpdateTribeData(const struct FTribeData& NewTribeData);
	bool OnRemoveTribe(int TribeId);
	bool OnPlayerCanRestart(class APlayerController* Player);
	bool OnIsUsedSpawnPointStillSupported(class APlayerStart* SpawnPoint, class AController* Player);
	bool OnIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player);
	bool OnInitOptionEvent(const struct FString& Options);
	bool OnInitGameState();
	bool OnInitGame(const struct FString& MapName, const struct FString& Options, struct FString* ErrorMessage);
	bool OnHandleLeavingMap();
	struct FString OnDoGameCommand(const struct FString& TheCommand);
	bool OnAllowRenameTribe(class AShooterPlayerState* ForPlayerState, const struct FString& TribeName);
	bool OnAllowNotifyRemotePlayerDeath(class AShooterCharacter* forChar);
	bool OnAllowModifyStatusValue(class UPrimalCharacterStatusComponent* forComp, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> ValueType, float amount);
	bool OnAllowClearTribe(class AShooterPlayerState* ForPlayerState);
	bool OnAllowAddXP(class UPrimalCharacterStatusComponent* forComp);
	bool OnAllowAddToTribe(class AShooterPlayerState* ForPlayerState, const struct FTribeData& MyNewTribe);
	float OnAdjustDamage(class AActor* Victim, float DefaultDamage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	struct FTribeData STATIC_MakeTribeData(struct FString* TribeName, int* OwnerPlayerDataID, int* TribeId, TArray<struct FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
	void KickPlayer(class APlayerController* NewPlayer);
	bool IsInAllowedToCheatList(class APlayerController* NewPlayer);
	void InitOptionFloatToINI(const struct FString& Options, float FloatValue, const struct FString& KeyValue);
	float GetValueFromINI(const struct FString& KeyValue);
	int GetIntValueFromINI(const struct FString& KeyValue);
	float STATIC_GetIniFloatValue(const struct FString& Section, const struct FString& KeyValue);
	float GetFloatValueFromINI(const struct FString& KeyValue);
	bool GetBoolValueFromINI(const struct FString& KeyValue);
	void CleanUpSotfNotificationManager();
	bool CheckForCommand(const struct FString& CommandName);
	void STATIC_BreakTribeData(const struct FTribeData& Data, struct FString* TribeName, int* OwnerPlayerDataID, int* TribeId, TArray<struct FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
};

// Class ShooterGame.ShooterGameSession
// 0x01E0 (FullSize[0x0668] - InheritedSize[0x0488])
class AShooterGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData_UK6C[0x1E0];                                   // 0x0488(0x01E0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameSession");
		return ptr;
	}



};

// Class ShooterGame.ShooterGameState
// 0x05E8 (FullSize[0x0B20] - InheritedSize[0x0538])
class AShooterGameState : public AGameState
{
public:
	unsigned char                                      UnknownData_RI55[0x8];                                     // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumNPC;                                                    // 0x0540(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NumHibernatedNPC;                                          // 0x0544(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NumActiveNPC;                                              // 0x0548(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NumDeadNPC;                                                // 0x054C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NumPlayerActors;                                           // 0x0550(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                NumPlayerConnected;                                        // 0x0554(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerUseLocalizedChat;                                   // 0x0558(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L3K4[0x3];                                     // 0x0559(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LocalizedChatRadius;                                       // 0x055C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              LocalizedChatRadiusUnconsiousScale;                        // 0x0560(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              ServerFramerate;                                           // 0x0564(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FString                                     NewStructureDestructionTag;                                // 0x0568(0x0010) (ZeroConstructor, Transient, SaveGame)
	int                                                DayNumber;                                                 // 0x0578(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              DayTime;                                                   // 0x057C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             NetworkTime;                                               // 0x0580(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	uint32_t                                           TimeUTC;                                                   // 0x0588(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsOfficialServer;                                         // 0x058C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsListenServer;                                           // 0x058D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsDediServer;                                             // 0x058E(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsServerRunningOnConsole;                                 // 0x058F(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsArkTributeAvailable;                                    // 0x0590(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsArkDownloadsAllowed;                                    // 0x0591(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowThirdPersonPlayer;                                   // 0x0592(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerHardcore;                                           // 0x0593(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerPVE;                                                // 0x0594(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAutoPvE;                                                  // 0x0595(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerCrosshair;                                          // 0x0596(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bServerForceNoHUD;                                         // 0x0597(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bFlyerPlatformAllowUnalignedDinoBasing;                    // 0x0598(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bMapPlayerLocation;                                        // 0x0599(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPvEDisableFriendlyFire;                                   // 0x059A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPvEAllowTribeWar;                                         // 0x059B(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPvEAllowTribeWarCancel;                                   // 0x059C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bEnablePvPGamma;                                           // 0x059D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisablePvEGamma;                                          // 0x059E(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9L58[0x1];                                     // 0x059F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumTamedDinos;                                             // 0x05A0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                MaxStructuresInRange;                                      // 0x05A4(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DayCycleSpeedScale;                                        // 0x05A8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DayTimeSpeedScale;                                         // 0x05AC(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NightTimeSpeedScale;                                       // 0x05B0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PvEStructureDecayPeriodMultiplier;                         // 0x05B4(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PvEDinoDecayPeriodMultiplier;                              // 0x05B8(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PerPlatformMaxStructuresMultiplier;                        // 0x05BC(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableStructureDecayPvE;                                 // 0x05C0(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableDinoDecayPvE;                                      // 0x05C1(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowCaveBuildingPvE;                                     // 0x05C2(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowCaveBuildingPvP;                                     // 0x05C3(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventDownloadSurvivors;                                 // 0x05C4(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bReachedPlatformStructureLimit;                            // 0x05C5(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAdminLogging;                                             // 0x05C6(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPvPStructureDecay;                                        // 0x05C7(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPreventDownloadDinos;                                     // 0x05C8(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventDownloadItems;                                     // 0x05C9(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventUploadDinos;                                       // 0x05CA(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventUploadItems;                                       // 0x05CB(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventUploadSurvivors;                                   // 0x05CC(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventMateBoost;                                         // 0x05CD(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventStructurePainting;                                 // 0x05CE(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowCharacterCreation;                                   // 0x05CF(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowSpawnPointSelection;                                 // 0x05D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J7I1[0x3];                                     // 0x05D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxTamedDinos;                                             // 0x05D4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisableSpawnAnimations;                                   // 0x05D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K09F[0x7];                                     // 0x05D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerListString;                                          // 0x05E0(0x0010) (Net, ZeroConstructor, Transient)
	float                                              GlobalSpoilingTimeMultiplier;                              // 0x05F0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GlobalItemDecompositionTimeMultiplier;                     // 0x05F4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                MaxNumberOfPlayersInTribe;                                 // 0x05F8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              TribeSlotReuseCooldown;                                    // 0x05FC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GlobalCorpseDecompositionTimeMultiplier;                   // 0x0600(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              EggHatchSpeedMultiplier;                                   // 0x0604(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       ActiveEvent;                                               // 0x0608(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowPaintingWithoutResources;                            // 0x0610(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEnableExtraStructurePreventionVolumes;                    // 0x0611(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JOUZ[0x6];                                     // 0x0612(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FItemCraftingCostOverride>           OverrideItemCraftingCosts;                                 // 0x0618(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FItemMaxItemQuantityOverride>        OverrideItemMaxQuantity;                                   // 0x0628(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData_KVEE[0x50];                                    // 0x0638(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastServerSaveTime;                                        // 0x0688(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              ServerSaveInterval;                                        // 0x0690(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              TribeNameChangeCooldown;                                   // 0x0694(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              PlatformSaddleBuildAreaBoundsMultiplier;                   // 0x0698(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAlwaysAllowStructurePickup;                               // 0x069C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_766E[0x3];                                     // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StructurePickupTimeAfterPlacement;                         // 0x06A0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              StructurePickupHoldDuration;                               // 0x06A4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowIntegratedSPlusStructures;                           // 0x06A8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowHideDamageSourceFromLogs;                            // 0x06A9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IO73[0x1E];                                    // 0x06AA(0x001E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             DynamicMusicAudioComponent;                                // 0x06C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             DynamicMusicAudioComponent2;                               // 0x06D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4TJ1[0x8];                                     // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLevelExperienceRamp>                LevelExperienceRampOverrides;                              // 0x06E0(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEngramEntryOverride>                OverrideEngramEntries;                                     // 0x06F0(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      CustomGameUITemplate;                                      // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             PreventDinoTameClassNames;                                 // 0x0708(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance)
	float                                              ListenServerTetherDistanceMultiplier;                      // 0x0718(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AV72[0x4];                                     // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PGMapName;                                                 // 0x0720(0x0010) (Net, ZeroConstructor, Transient)
	TArray<int>                                        SupportedSpawnRegions;                                     // 0x0730(0x0010) (Net, ZeroConstructor, Transient, RepNotify)
	class UPaintingCache*                              PaintingCache;                                             // 0x0740(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class USoundBase*                                  StaticOverrideMusic;                                       // 0x0748(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bEnableDeathTeamSpectator;                                 // 0x0750(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ABBA[0x3];                                     // 0x0751(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PlayerFloatingHUDOffset;                                   // 0x0754(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PlayerFloatingHUDOffsetScreenY;                            // 0x0760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              StructureDamageRepairCooldown;                             // 0x0764(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bForceAllStructureLocking;                                 // 0x0768(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowCustomRecipes;                                       // 0x0769(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowRaidDinoFeeding;                                     // 0x076A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JBJB[0x1];                                     // 0x076B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomRecipeEffectivenessMultiplier;                       // 0x076C(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	float                                              CustomRecipeSkillMultiplier;                               // 0x0770(0x0004) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V5TC[0x4];                                     // 0x0774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  OverrideAreaMusic;                                         // 0x0778(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     OverrideAreaMusicPosition;                                 // 0x0780(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              OverrideAreaMusicRange;                                    // 0x078C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowUnclaimDinos;                                        // 0x0790(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XGUZ[0x3];                                     // 0x0791(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FloatingHUDRange;                                          // 0x0794(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FloatingChatRange;                                         // 0x0798(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                ExtinctionEventTimeInterval;                               // 0x079C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RTSModeNumSelectableDinosScale;                            // 0x07A0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RTSMaxRangeFromPlayerCharacterScale;                       // 0x07A4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ExtinctionEventPercent;                                    // 0x07A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ExtinctionEventSecondsRemaining;                           // 0x07AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDoExtinctionEvent;                                        // 0x07B0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZG6C[0x3];                                     // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DestroyTamesOverLevelClamp;                                // 0x07B4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppends;                                 // 0x07B8(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance)
	bool                                               bPreventOfflinePvP;                                        // 0x07C8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPvPDinoDecay;                                             // 0x07C9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowUnclaimDinosConfig;                                  // 0x07CA(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bForceUseInventoryAppends;                                 // 0x07CB(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bOverideStructurePlatformPrevention;                       // 0x07CC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P0Z4[0x3];                                     // 0x07CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ItemStackSizeMultiplier;                                   // 0x07D0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AO60[0x4];                                     // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        PreventOfflinePvPLiveTeams;                                // 0x07D8(0x0010) (Net, ZeroConstructor, Transient)
	TArray<int>                                        PreventOfflinePvPExpiringTeams;                            // 0x07E8(0x0010) (Net, ZeroConstructor, Transient)
	TArray<double>                                     PreventOfflinePvPExpiringTimes;                            // 0x07F8(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData_RHEX[0xA0];                                    // 0x0808(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAllowAnyoneBabyImprintCuddle;                             // 0x08A8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisableImprintDinoBuff;                                   // 0x08A9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R2YJ[0x2];                                     // 0x08AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxPersonalTamedDinos;                                     // 0x08AC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UD56[0x18];                                    // 0x08B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ClusterId;                                                 // 0x08C8(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData_X5SN[0x30];                                    // 0x08D8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ServerSessionName;                                         // 0x0908(0x0010) (Net, ZeroConstructor, Transient)
	bool                                               bPreventTribeAlliances;                                    // 0x0918(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_54GY[0x19];                                    // 0x0919(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bServerUseDinoList;                                        // 0x0932(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPvEAllowStructuresAtSupplyDrops;                          // 0x0933(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowForceNetUpdate;                                      // 0x0934(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8UC4[0x3];                                     // 0x0935(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinimumDinoReuploadInterval;                               // 0x0938(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HairGrowthSpeedMultiplier;                                 // 0x093C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              FastDecayInterval;                                         // 0x0940(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z4NJ[0x4];                                     // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     CachedSessionOwnerId;                                      // 0x0948(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData_LH94[0x8];                                     // 0x0958(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnHTTPGetResponse;                                         // 0x0960(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHTTPPostResponse;                                        // 0x0970(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bAllowMultipleAttachedC4;                                  // 0x0980(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bCrossARKAllowForeignDinoDownloads;                        // 0x0981(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ESUO[0x16];                                    // 0x0982(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bUseCorpseLocator;                                         // 0x0998(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisableStructurePlacementCollision;                       // 0x0999(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bUseSingleplayerSettings;                                  // 0x099A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowPlatformSaddleMultiFloors;                           // 0x099B(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPreventSpawnAnimations;                                   // 0x099C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_05U5[0x3];                                     // 0x099D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxAlliancesPerTribe;                                      // 0x09A0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                MaxTribesPerAlliance;                                      // 0x09A4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsLegacyServer;                                           // 0x09A8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisableDinoDecayClaiming;                                 // 0x09A9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SLFV[0x2];                                     // 0x09AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       UseStructurePreventionVolumeTag;                           // 0x09AC(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                MaxStructuresInSmallRadius;                                // 0x09B4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RadiusStructuresInSmallRadius;                             // 0x09B8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bUseTameLimitForStructuresOnly;                            // 0x09BC(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bLimitTurretsInRange;                                      // 0x09BD(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LAPT[0x2];                                     // 0x09BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LimitTurretsRange;                                         // 0x09C0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                LimitTurretsNum;                                           // 0x09C4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bForceAllowAllStructures;                                  // 0x09C8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bShowCreativeMode;                                         // 0x09C9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IL9F[0x26];                                    // 0x09CA(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PassiveTameIntervalMultiplier;                             // 0x09F0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_II16[0x4];                                     // 0x09F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              UniqueDinos;                                               // 0x09F8(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FName>                               ActiveMissionTags;                                         // 0x0A08(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	uint32_t                                           MinimumUniqueDownloadInterval;                             // 0x0A18(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint32_t                                           MaximumUniqueDownloadInterval;                             // 0x0A1C(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreStructuresPreventionVolumes;                        // 0x0A20(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPreventOutOfTribePinCodeUse;                              // 0x0A21(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EK8X[0x6];                                     // 0x0A22(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDinoDownloadData>                   UniqueDownloads;                                           // 0x0A28(0x0010) (Net, ZeroConstructor, Transient, SaveGame)
	TArray<struct FDataSet>                            GameDataSets;                                              // 0x0A38(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	class UPrimalWorldSettingsEventOverrides*          ActiveEventOverrides;                                      // 0x0A48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreLimitMaxStructuresInRangeTypeFlag;                  // 0x0A50(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OO7M[0x7];                                     // 0x0A51(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMassTeleportData>                   MassTeleportQueue;                                         // 0x0A58(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData_DA1E[0x20];                                    // 0x0A68(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bAllowLowGravitySpin;                                      // 0x0A88(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KDX9[0x17];                                    // 0x0A89(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnDinoDownloaded;                                          // 0x0AA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDinoUploaded;                                            // 0x0AB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FWorldBuffPersistantData>            WorldBuffPersistantDatas;                                  // 0x0AC0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame)
	float                                              TurretCopySettingsCooldown;                                // 0x0AD0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              BaseHexagonRewardMultiplier;                               // 0x0AD4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HexagonRewardMultiplier;                                   // 0x0AD8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HexagonCostMultiplier;                                     // 0x0ADC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bDisableHexagonStore;                                      // 0x0AE0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHexStoreAllowOnlyEngramTradeOption;                       // 0x0AE1(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bAllowFlyerSpeedLeveling;                                  // 0x0AE2(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KKGX[0x1];                                     // 0x0AE3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LiveTuningReplicatedChunkSize;                             // 0x0AE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             LiveTuningOverloadChunks;                                  // 0x0AE8(0x0010) (Net, ZeroConstructor, Transient, RepNotify)
	unsigned char                                      UnknownData_OQTZ[0x8];                                     // 0x0AF8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             PreventTransferForClassNames;                              // 0x0B00(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance)
	int                                                EnvironmentIndex;                                          // 0x0B10(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                NextEnvironmentIndex;                                      // 0x0B14(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             NextMutagenTime;                                           // 0x0B18(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameState");
		return ptr;
	}



	bool StartMassTeleport(struct FMassTeleportData* MassTeleportData, const struct FTeleportDestination& TeleportDestination, class AActor* InitiatingActor, TArray<class AActor*> TeleportActors, class UClass* BuffToApply, float TeleportDuration, float TeleportRadius, bool bTeleportingSnapsToGround, bool bMaintainRotation);
	bool ShouldMassTeleportMoveActor(class AActor* forActor, const struct FMassTeleportData& WithMassTeleportData);
	void SetNextEnvironmentIndex(int newNextEnvironmentIndex);
	void SetEnvironmentIndex(int newEnvironmentIndex);
	void PrepareActorForMassTeleport(class AActor* PrepareActor, const struct FMassTeleportData& WithMassTeleportData);
	void OnRep_SupportedSpawnRegions();
	void OnRep_ReplicateLocalizedChatRadius();
	void OnRep_ReplicateLiveTuningOverloadChunks();
	void OnHTTPPostResponse__DelegateSignature(bool bSuccess, const struct FString& StringResult);
	void OnHTTPGetProcessed__DelegateSignature(bool bSuccess, const struct FString& StringResult);
	void OnDinoUploaded__DelegateSignature(class APrimalDinoCharacter* theDino);
	void OnDinoDownloaded__DelegateSignature(class APrimalDinoCharacter* theDino, class AShooterPlayerController* TamerController);
	void NetUpdateOfflinePvPLiveTeams(TArray<int> NewPreventOfflinePvPLiveTeams);
	void NetUpdateOfflinePvPExpiringTeams(TArray<int> NewPreventOfflinePvPExpiringTeams, TArray<double> NewPreventOfflinePvPExpiringTimes);
	void NetAddFloatingText(const struct FVector& AtLocation, const struct FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime, int OnlySendToTeamID);
	void NetAddFloatingDamageText(const struct FVector& AtLocation, int DamageAmount, int FromTeamID, int OnlySendToTeamID);
	void Multi_SpawnCosmeticActor(class UClass* SpawnActorOfClass, const struct FVector& SpawnAtLocation, const struct FRotator& SpawnWithRotation);
	void LoadedWorld();
	bool STATIC_IsValidMassTeleportData(const struct FMassTeleportData& CheckData);
	bool IsTeamIDInvincible(int TargetingTeamID, bool bInvincibleOnlyWhenOffline);
	bool IsMassTeleportInProgress(class AActor* InitiatingActor);
	bool IsEngramClassHidden(class UClass* ForItemClass);
	void HTTPPostRequest(const struct FString& InURL, const struct FString& Content);
	void HTTPGetRequest(const struct FString& InURL);
	void HandleInitializedGameState();
	double GetOfflineDamagePreventionTime(int TargetingTeamID);
	double STATIC_GetNetworkTimeDelta(class AShooterGameState* GameState, double netTime, bool bTimeUntil);
	bool GetItemMaxQuantityOverride(class UClass* ForClass, struct FMaxItemQuantityOverride* OutMaxQuantity);
	TArray<struct FGameIniData> GetIniArray(const struct FString& SectionName);
	struct FString GetDayTimeString();
	struct FString GetCleanServerSessionName();
	void DisplayWelcomeUI();
	bool CancelMassTeleport(class AActor* WithInitiatingActor);
	void BPDrawGameStateHUD(class AShooterHUD* HUD);
	class APrimalBuff* STATIC_BaseSpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints);
	struct FVector2D STATIC_BaseProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
	bool STATIC_BaseIsTribeID(int TeamId);
	class ACustomActorList* BaseGetCustomActors(const struct FName& SearchCustomTag);
	TArray<class AShooterPlayerController*> BaseGetAllShooterControllers();
	TArray<class AShooterCharacter*> BaseGetAllShooterCharactersOfTeam(int KillerTeam);
	TArray<class AShooterCharacter*> BaseGetAllShooterCharacters();
	TArray<class APrimalDinoCharacter*> BaseGetAllDinoCharactersOfTeam(int KillerTeam);
	void STATIC_BaseDrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
	bool AllowDownloadDino(class UClass* TheDinoClass);
	bool AllowDinoTame(class APrimalDinoCharacter* dinoChar, class AShooterPlayerController* ForPC);
	bool AllowDinoClassTame(class UClass* DinoCharClass, class AShooterPlayerController* ForPC);
	void AddFloatingText(const struct FVector& AtLocation, const struct FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
};

// Class ShooterGame.BattleGameState
// 0x0000 (FullSize[0x0B20] - InheritedSize[0x0B20])
class ABattleGameState : public AShooterGameState
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.BattleGameState");
		return ptr;
	}



};

// Class ShooterGame.CustomGameState
// 0x0000 (FullSize[0x0B20] - InheritedSize[0x0B20])
class ACustomGameState : public AShooterGameState
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.CustomGameState");
		return ptr;
	}



	class APrimalBuff* STATIC_SpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints);
	void SetActionReportItem(struct FActionReportItem* Data, const struct FString& PlayerName, const struct FString& TribeName, const struct FString& TimeOfDeath, const struct FString& LevelOfDeath, const struct FString& DeathMessage);
	struct FVector2D STATIC_ProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
	void OnSetHudEvent();
	class USoundBase* OnOverrideDynamicMusic(class APrimalCharacter* forCharacter);
	void OnNotifyPlayerDied(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, class AActor* DamageCauser);
	bool OnHasGameModeMatchStarted();
	void OnHandleActorEvent(class AActor* forActor, const struct FName& NameParam, const struct FVector& VecParam);
	bool OnForceOccludedFloatingHUD(class AActor* anActor, class AShooterPlayerController* ForPC);
	void OnExtraShooterCharacterTick(class AShooterCharacter* forChar, float DeltaTime);
	bool OnDrawingHUDNotifications(class AShooterHUD* HUD);
	bool OnDrawHUD(class AShooterHUD* HUD);
	void OnDrawExtraPlayerFloatingHUD(class AShooterHUD* HUD, class AShooterCharacter* theShooterChar, const struct FVector& AtLoc);
	bool OnCheckGameStateIfCanRespawn(class APlayerController* ForPC);
	bool OnAllowTribeManager(class AShooterPlayerController* ForPC);
	bool OnAllowTribeManagement();
	bool OnAllowStartSupplyCrateSpawns();
	bool OnAllowShowPlayerHudUI(class APrimalCharacter* ForPawn);
	bool OnAllowRemoveItems(class UPrimalInventoryComponent* ForInv, class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer);
	bool OnAllowPopUps();
	bool OnAllowOrbitCamera(class APrimalCharacter* forCharacter);
	bool OnAllowFastTravel(class APrimalStructureBed* ForBed, class AShooterPlayerController* ForPC);
	bool OnAllowDaytimeTransitionSounds();
	bool OnAllowCreateSurvivor();
	struct FPlayerDeathNotification STATIC_MakePlayerDeathNotification(const struct FString& PlayerDeathStringEnemy, const struct FString& PlayerDeathStringAlly, const struct FString& PlayerDeathStringYou, const struct FString& DeathReason, TArray<struct FString> DeadPlayerNames, bool bIsTribeDeath, const struct FString& DeathTribeName, int TargetingTeamID, const struct FString& LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> PlayersData);
	struct FBattleTribeData STATIC_MakeBattleTribeData(const struct FString& TribeName, int TribeId);
	struct FBattlePlayerData STATIC_MakeBattlePlayerData(const struct FString& PlayerName, bool bConnected, bool bAlive, int TribeId, const struct FString& PlayerId);
	void KickPlayer(class APlayerController* Controller, const struct FString& Reason);
	bool STATIC_IsTribeID(int TeamId);
	bool IsAuthorityRole();
	void STATIC_HideUIScene(class UClass* SceneClass);
	double GetTimeSeconds();
	TArray<struct FBattlePlayerData> GetPlayerDatasForTribe(int TribeId, TArray<struct FBattlePlayerData> AllPlayerDatas);
	struct FString GetPawnName(class APawn* Pawn);
	struct FString GetPawnKillerName(class APawn* Pawn);
	void GetDeathNotificationText(class AShooterCharacter* theShooterChar, class APawn* InstigatingPawn, struct FString* Killer, struct FString* KillerAndTribe, struct FString* theNotificationStringYou, struct FString* theNotificationStringAlly, struct FString* theNotificationStringEnemy);
	class ACustomActorList* GetCustomActors(const struct FName& SearchCustomTag);
	TArray<class AShooterPlayerController*> GetAllShooterControllers();
	TArray<class AShooterCharacter*> GetAllShooterCharactersOfTeam(int KillerTeam);
	TArray<class AShooterCharacter*> GetAllShooterCharacters();
	TArray<class APrimalDinoCharacter*> GetAllDinoCharactersOfTeam(int KillerTeam);
	void STATIC_DrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
	struct FPlayerDeathNotification CreateDeathNotification(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, int MaxNumberOfRespawns);
	struct FDamageEvent STATIC_CreateDamageEvent();
	bool CheckTimeSince(float Time, float Duration);
	void BroadcastActorCustomEvent(class AActor* Actor, const struct FName& EventCustomName, const struct FString& EventCustomString, class AActor* InstigatorActor);
	void STATIC_BreakTribeData(const struct FTribeData& InData, struct FString* TribeName, int* OwnerPlayerDataID, int* TribeId, TArray<struct FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
	void STATIC_BreakPlayerDeathNotification(const struct FPlayerDeathNotification& Data, struct FString* PlayerDeathStringEnemy, struct FString* PlayerDeathStringAlly, struct FString* PlayerDeathStringYou, struct FString* DeathReason, TArray<struct FString>* DeadPlayerNames, bool* bIsTribeDeath, struct FString* DeathTribeName, int* TargetingTeamID, struct FString* LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* PlayersData);
	void STATIC_BreakBattleTribeData(const struct FBattleTribeData& InData, struct FString* TribeName, int* TribeId);
	void STATIC_BreakBattlePlayerData(const struct FBattlePlayerData& Data, struct FString* PlayerName, bool* bConnected, bool* bAlive, int* TribeId, struct FString* PlayerId);
	void BreakActionReportItem(const struct FActionReportItem& Data, struct FString* PlayerName, struct FString* TribeName, struct FString* TimeOfDeath, struct FString* LevelOfDeath, struct FString* DeathMessage);
};

// Class ShooterGame.ShooterGameUserSettings
// 0x0130 (FullSize[0x0260] - InheritedSize[0x0130])
class UShooterGameUserSettings : public UGameUserSettings
{
public:
	float                                              MasterAudioVolume;                                         // 0x0130(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MusicAudioVolume;                                          // 0x0134(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              SFXAudioVolume;                                            // 0x0138(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              VoiceAudioVolume;                                          // 0x013C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              CharacterAudioVolume;                                      // 0x0140(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              UIScaling;                                                 // 0x0144(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              UIQuickbarScaling;                                         // 0x0148(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              CameraShakeScale;                                          // 0x014C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFirstPersonRiding;                                        // 0x0150(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bThirdPersonPlayer;                                        // 0x0151(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowStatusNotificationMessages;                           // 0x0152(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7FKJ[0x1];                                     // 0x0153(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TrueSkyQuality;                                            // 0x0154(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              FOVMultiplier;                                             // 0x0158(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              GroundClutterDensity;                                      // 0x015C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFilmGrain;                                                // 0x0160(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bMotionBlur;                                               // 0x0161(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseDFAO;                                                  // 0x0162(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseSSAO;                                                  // 0x0163(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowChatBox;                                              // 0x0164(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bCameraViewBob;                                            // 0x0165(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bInvertLookY;                                              // 0x0166(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFloatingNames;                                            // 0x0167(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bChatBubbles;                                              // 0x0168(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHideServerInfo;                                           // 0x0169(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bJoinNotifications;                                        // 0x016A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bCraftablesShowAllItems;                                   // 0x016B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bLocalInventoryItemsShowAllItems;                          // 0x016C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bLocalInventoryCraftingShowAllItems;                       // 0x016D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRemoteInventoryItemsShowAllItems;                         // 0x016E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRemoteInventoryCraftingShowAllItems;                      // 0x016F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRemoteInventoryShowEngrams;                               // 0x0170(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EC8W[0x3];                                     // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LookLeftRightSensitivity;                                  // 0x0174(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              LookUpDownSensitivity;                                     // 0x0178(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                GraphicsQuality;                                           // 0x017C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                ActiveLingeringWorldTiles;                                 // 0x0180(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                ClientNetQuality;                                          // 0x0184(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              GammaCorrection;                                           // 0x0188(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LastServerSearchType;                                      // 0x018C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LastServerSort;                                            // 0x0190(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LastPVESearchType;                                         // 0x0194(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LastDLCTypeSearchType;                                     // 0x0198(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               LastServerSortAsc;                                         // 0x019C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               LastAutoFavorite;                                          // 0x019D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               LastServerSearchHideFull;                                  // 0x019E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               LastServerSearchProtected;                                 // 0x019F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               HideItemTextOverlay;                                       // 0x01A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bQuickToggleItemNames;                                     // 0x01A1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDistanceFieldShadowing;                                   // 0x01A2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3GV9[0x1];                                     // 0x01A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LODScalar;                                                 // 0x01A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bToggleToTalk;                                             // 0x01A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               HighQualityMaterials;                                      // 0x01A9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               HighQualitySurfaces;                                       // 0x01AA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bTemperatureF;                                             // 0x01AB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDisableTorporEffect;                                      // 0x01AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bChatShowSteamName;                                        // 0x01AD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bChatShowTribeName;                                        // 0x01AE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bReverseTribeLogOrder;                                     // 0x01AF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                EmoteKeyBind1;                                             // 0x01B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                EmoteKeyBind2;                                             // 0x01B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bNoBloodEffects;                                           // 0x01B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bLowQualityVFX;                                            // 0x01B9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bSpectatorManualFloatingNames;                             // 0x01BA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bSuppressAdminIcon;                                        // 0x01BB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseSimpleDistanceMovement;                                // 0x01BC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDisableMeleeCameraSwingAnims;                             // 0x01BD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventInventoryOpeningSounds;                            // 0x01BE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventBiomeWalls;                                        // 0x01BF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventHitMarkers;                                        // 0x01C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventCrosshair;                                         // 0x01C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventColorizedItemNames;                                // 0x01C2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHighQualityLODs;                                          // 0x01C3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bExtraLevelStreamingDistance;                              // 0x01C4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bEnableColorGrading;                                       // 0x01C5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_68EX[0x2];                                     // 0x01C6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VSyncMode;                                                 // 0x01C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DOFSettingInterpTime;                                      // 0x01CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TArray<struct FDepthOfFieldSetting>                DOFSettings;                                               // 0x01D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FString>                             LastJoinedSessionPerCategory;                              // 0x01E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	bool                                               bDisableMenuTransitions;                                   // 0x01F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bEnableInventoryItemTooltips;                              // 0x01F1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRemoteInventoryShowCraftables;                            // 0x01F2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bNoTooltipDelay;                                           // 0x01F3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LocalItemSortType;                                         // 0x01F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                LocalCraftingSortType;                                     // 0x01F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                RemoteItemSortType;                                        // 0x01FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                RemoteCraftingSortType;                                    // 0x0200(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B94Z[0x4];                                     // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           VersionMetaTag;                                            // 0x0208(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               ShowExplorerNoteSubtitles;                                 // 0x020C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               DisableMenuMusic;                                          // 0x020D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               DisableDefaultCharacterItems;                              // 0x020E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRequestDefaultCharacterItemsOnce;                         // 0x020F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHasSeenGen2Intro;                                         // 0x0210(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHideFloatingPlayerNames;                                  // 0x0211(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHideGamepadItemSelectionModifier;                         // 0x0212(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bToggleExtendedHUDInfo;                                    // 0x0213(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               PlayActionWheelClickSound;                                 // 0x0214(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_04FG[0x3];                                     // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CompanionReactionVerbosity;                                // 0x0218(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableEnvironmentalReactions;                              // 0x021C(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableRespawnReactions;                                    // 0x021D(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableDeathReactions;                                      // 0x021E(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableSayHelloReactions;                                   // 0x021F(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableEmoteReactions;                                      // 0x0220(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               EnableMovementSounds;                                      // 0x0221(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               DisableSubtitles;                                          // 0x0222(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5HLL[0x1];                                     // 0x0223(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CompanionSubtitleVerbosityLevel;                           // 0x0224(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               CompanionIsHiddenState;                                    // 0x0228(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QF9E[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxAscensionLevel;                                         // 0x022C(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHostSessionHasBeenOpened;                                 // 0x0230(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bForceTPVCameraOffset;                                     // 0x0231(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDisableTPVCameraInterpolation;                            // 0x0232(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bEnableHDROutput;                                          // 0x0233(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFPVClimbingGear;                                          // 0x0234(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFPVGlidingGear;                                           // 0x0235(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9K3I[0x2];                                     // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Gamma1;                                                    // 0x0238(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              Gamma2;                                                    // 0x023C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDisableBloom;                                             // 0x0240(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDisableLightShafts;                                       // 0x0241(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseLowQualityLevelStreaming;                              // 0x0242(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseDistanceFieldAmbientOcclusion;                         // 0x0243(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bPreventItemCraftingSounds;                                // 0x0244(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bHighQualityAnisotropicFiltering;                          // 0x0245(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_345U[0x2];                                     // 0x0246(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmbientSoundVolume;                                        // 0x0248(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bAllowAnimationStaggering;                                 // 0x024C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseOldThirdPersonCameraTrace;                             // 0x024D(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bUseOldThirdPersonCameraOffset;                            // 0x024E(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bLowQualityAnimations;                                     // 0x024F(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowedGenesisDLCBackground;                               // 0x0250(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowedGenesis2DLCBackground;                              // 0x0251(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bViewedAnimatedSeriesTrailer;                              // 0x0252(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bViewedARK2Trailer;                                        // 0x0253(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowRTSKeyBinds;                                          // 0x0254(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7VWO[0x3];                                     // 0x0255(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TemporaryMusicStingerReductionMultiplier;                  // 0x0258(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bHasCompletedGen2;                                         // 0x025C(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I4O9[0x3];                                     // 0x025D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameUserSettings");
		return ptr;
	}



	class UShooterGameUserSettings* STATIC_GetUserSettings();
};

// Class ShooterGame.ShooterGameViewportClient
// 0x0098 (FullSize[0x01E0] - InheritedSize[0x0148])
class UShooterGameViewportClient : public UGameViewportClient
{
public:
	class USoundBase*                                  LoadingMusic;                                              // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFont*                                       InfoFont;                                                  // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CIR8[0x88];                                    // 0x0158(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterGameViewportClient");
		return ptr;
	}



	class UPrimalUI* IsAnyUIConsumingInput(class UClass* PrimalUIClass, class AShooterPlayerController* Owner);
	class UShooterGameViewportClient* STATIC_GetViewportClient(class UWorld* ForWorld);
	TArray<class UPrimalUI*> GetUIScenesFromClass(class UClass* PrimalUIClass);
	class UPrimalUI* GetUISceneFromClass(class UClass* PrimalUIClass, class AShooterPlayerController* Owner);
	class UWorld* STATIC_GetGameWorld();
	bool AnyScenesWithMouseCapture();
	bool AnyNonInventoryScenesWithMouseCapture(class AShooterPlayerController* ForPC);
};

// Class ShooterGame.ShooterImpactEffect
// 0x0418 (FullSize[0x0888] - InheritedSize[0x0470])
class AShooterImpactEffect : public AActor
{
public:
	class UParticleSystem*                             SurfaceImpactFX[0x10];                                     // 0x0470(0x0080) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   SurfaceImpactSound[0x10];                                  // 0x04F0(0x0080) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDecalRange;                                             // 0x0570(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NE7C[0x4];                                     // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FDecalData                                  SurfaceDecalData[0x10];                                    // 0x0578(0x0200) (Edit, DisableEditOnInstance)
	class UClass*                                      SurfaceImpactSpawnActors[0x10];                            // 0x0778(0x0080) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bOverridePawnHitDecal : 1;                                 // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOverridePawnHitFX : 1;                                    // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoHitEffectOnPawns : 1;                                   // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoSoundEffectOnPawns : 1;                                 // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoSpawnActorOnPawns : 1;                                  // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoDecalOnPawns : 1;                                       // 0x07F8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_9EO7[0x8F];                                    // 0x07F9(0x008F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterImpactEffect");
		return ptr;
	}



	class UParticleSystemComponent* STATIC_StaticSpawnImpactEffects(class UObject* WorldContextObject, class UClass* ImpactEffectClass, const struct FHitResult& SurfaceHit, const struct FVector& ShotDirection, bool useShotDirectionForImpactEffectActorClassRotation, bool attachImpactEffectActorToSurfaceHitActor);
};

// Class ShooterGame.ShooterLaserBeamComponent
// 0x0010 (FullSize[0x0840] - InheritedSize[0x0830])
class UShooterLaserBeamComponent : public UParticleSystemComponent
{
public:
	bool                                               bIsOwnerWeapon;                                            // 0x0830(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0WFY[0x3];                                     // 0x0831(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LaserBeamRange;                                            // 0x0834(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GR9V[0x8];                                     // 0x0838(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterLaserBeamComponent");
		return ptr;
	}



};

// Class ShooterGame.ShooterPersistentUser
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UShooterPersistentUser : public USaveGame
{
public:
	int                                                Kills;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                Deaths;                                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                Wins;                                                      // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                Losses;                                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                BulletsFired;                                              // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                RocketsFired;                                              // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	int                                                BotsCount;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              Gamma;                                                     // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              AimSensitivity;                                            // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	bool                                               bInvertedYAxis;                                            // 0x004C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_E64G[0x1B];                                    // 0x004D(0x001B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterPersistentUser");
		return ptr;
	}



};

// Class ShooterGame.ShooterLocalPlayer
// 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
class UShooterLocalPlayer : public ULocalPlayer
{
public:
	class UShooterPersistentUser*                      PersistentUser;                                            // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DK2F[0x8];                                     // 0x0238(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterLocalPlayer");
		return ptr;
	}



};

// Class ShooterGame.ShooterOnlineSessionClient
// 0x0000 (FullSize[0x00E8] - InheritedSize[0x00E8])
class UShooterOnlineSessionClient : public UOnlineSessionClient
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterOnlineSessionClient");
		return ptr;
	}



};

// Class ShooterGame.ShooterPlayerCameraManager
// 0x07F0 (FullSize[0x2018] - InheritedSize[0x1828])
class AShooterPlayerCameraManager : public APlayerCameraManager
{
public:
	float                                              NormalFOV;                                                 // 0x1828(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetingFOV;                                              // 0x182C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TPVZOffsetInterpSpeed;                                     // 0x1830(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H18A[0xC];                                     // 0x1834(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bHasCustomDepthStencil;                                    // 0x1840(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bCustomDepthStencilIgnoreHealth;                           // 0x1841(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bCompleteCustomDepthStencilOverride;                       // 0x1842(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2MII[0x19];                                    // 0x1843(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       LastActualCameraStyle;                                     // 0x185C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XB14[0x754];                                   // 0x1864(0x0754) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LastTPVCameraOffset;                                       // 0x1FB8(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastTPVCollisionHeight;                                    // 0x1FC4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TPVCollisionHeightInterpSpeed;                             // 0x1FC8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M0IZ[0x4C];                                    // 0x1FCC(0x004C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterPlayerCameraManager");
		return ptr;
	}



	void StartCameraTransition(float TransitionDuration, bool bUseFinalModifiedViewTarget);
	bool IsInFrustum(const struct FVector& BoxLocation, const struct FVector& BoxExtents);
	float GetTPVCollisionHeight(class AActor* forTarget, bool bIncludeHeightScalar);
	unsigned char STATIC_GetColorCodedStencil(TEnumAsByte<ShooterGame_EStencilAlliance> InAlliance, float HealthPercent);
	struct FName GetCameraStyle();
	void GetCameraAimViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot);
	class UObject* GetBlendableFromMIC(class UMaterialInterface* InInterface);
};

// Class ShooterGame.ShooterPlayerController_Menu
// 0x0008 (FullSize[0x0818] - InheritedSize[0x0810])
class AShooterPlayerController_Menu : public APlayerController
{
public:
	class UPrimalLocalProfile*                         PrimalLocalProfile;                                        // 0x0810(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterPlayerController_Menu");
		return ptr;
	}



};

// Class ShooterGame.ShooterWeapon
// 0x0920 (FullSize[0x0D90] - InheritedSize[0x0470])
class AShooterWeapon : public AActor
{
public:
	float                                              EquipTime;                                                 // 0x0470(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4O7R[0x4];                                     // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      OverridePawnTPVAnimBlueprint;                              // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OverrideProneInAnim;                                       // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OverrideProneOutAnim;                                      // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OverrideJumpAnim;                                          // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                OverrideLandedAnim;                                        // 0x0498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UAnimSequence*>                       OverrideRiderAnimSequenceFrom;                             // 0x04A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequence*>                       OverrideRiderAnimSequenceTo;                               // 0x04B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FCanvasIcon                                 PrimaryIcon;                                               // 0x04C0(0x0018) (Edit, DisableEditOnInstance)
	struct FCanvasIcon                                 SecondaryIcon;                                             // 0x04D8(0x0018) (Edit, DisableEditOnInstance)
	struct FCanvasIcon                                 PrimaryClipIcon;                                           // 0x04F0(0x0018) (Edit, DisableEditOnInstance)
	struct FCanvasIcon                                 SecondaryClipIcon;                                         // 0x0508(0x0018) (Edit, DisableEditOnInstance)
	float                                              ItemDurabilityToConsumePerMeleeHit;                        // 0x0520(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AmmoIconsCount;                                            // 0x0524(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetingTooltipCheckRange;                                // 0x0528(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseDinoRangeForTooltip : 1;                               // 0x052C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_8DB0[0x3];                                     // 0x052D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PrimaryClipIconOffset;                                     // 0x0530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SecondaryClipIconOffset;                                   // 0x0534(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TargetingInfoToolTipWidget;                                // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   TargetingInfoTooltipPadding;                               // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   TargetingInfoTooltipScale;                                 // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOnlyPassiveDurabilityWhenAccessoryActive;                 // 0x0550(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDisableShooterOnElectricStorm;                            // 0x0551(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_URSJ[0x2];                                     // 0x0552(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       OverrideAttachPoint;                                       // 0x0554(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FPVRelativeLocation;                                       // 0x055C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVRelativeRotation;                                       // 0x0568(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FPVRelativeLocation_Targeting;                             // 0x0574(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVRelativeRotation_Targeting;                             // 0x0580(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FPVEnterTargetingInterpSpeed;                              // 0x058C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FPVExitTargetingInterpSpeed;                               // 0x0590(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EndDoMeleeSwingTime;                                       // 0x0594(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtMaximumOffset;                                    // 0x0598(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtSpeedBase;                                        // 0x05A4(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtInterpSpeed;                                      // 0x05B0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtMaximumOffset_Targeting;                          // 0x05BC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtSpeedBase_Targeting;                              // 0x05C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVLookAtInterpSpeed_Targeting;                            // 0x05D4(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FPVImmobilizedLocationOffset;                              // 0x05E0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    FPVImmobilizedRotationOffset;                              // 0x05EC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FPVImmobilizedInterpSpeed;                                 // 0x05F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VZV5[0x4];                                     // 0x05FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bUseBlueprintAnimNotifications;                            // 0x0600(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CWZ9[0x7];                                     // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               MeleeSwingSockets;                                         // 0x0608(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              AllowMeleeTimeBeforeAnimationEnd;                          // 0x0618(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JE6L[0x4];                                     // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimalItem*                                 AssociatedPrimalItem;                                      // 0x0620(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	class AMissionType*                                AssociatedMission;                                         // 0x0628(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bCanBeUsedAsEquipment;                                     // 0x0630(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DY7B[0x7];                                     // 0x0631(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FItemNetInfo                                AssociatedItemNetInfo;                                     // 0x0638(0x01B0) (Net, Transient, RepNotify)
	struct FWeaponData                                 WeaponConfig;                                              // 0x07E8(0x002C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData_WYRY[0x4];                                     // 0x0814(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      Mesh3P;                                                    // 0x0818(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UClass*                                      WeaponAmmoItemTemplate;                                    // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACameraActor*                                AnimatedCamera;                                            // 0x0828(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VWLC[0x78];                                    // 0x0830(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AShooterCharacter*                           MyPawn;                                                    // 0x08A8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	class USkeletalMeshComponent*                      Mesh1P;                                                    // 0x08B0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             FireAC;                                                    // 0x08B8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	struct FName                                       MuzzleAttachPoint;                                         // 0x08C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             MuzzleFX;                                                  // 0x08C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             MuzzleFX_FPV;                                              // 0x08D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             AltMuzzleFX;                                               // 0x08D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             AltMuzzleFX_FPV;                                           // 0x08E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    MuzzlePSC;                                                 // 0x08E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    MuzzlePSCSecondary;                                        // 0x08F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UClass*                                      FireCameraShake;                                           // 0x08F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ReloadCameraShake;                                         // 0x0900(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MeleeCameraShake;                                          // 0x0908(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UForceFeedbackEffect*                        FireForceFeedback;                                         // 0x0910(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   FireSound;                                                 // 0x0918(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   AltFireSound;                                              // 0x0920(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   FireFinishSound;                                           // 0x0928(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   OutOfAmmoSound;                                            // 0x0930(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MeleeDamageAmount;                                         // 0x0938(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheMeleeSwingRadius;                                       // 0x093C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeleeDamageImpulse;                                        // 0x0940(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UIKP[0x4];                                     // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWeaponAnim                                 ReloadAnim;                                                // 0x0948(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 PartialReloadAnim;                                         // 0x0958(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                WeaponMesh3PReloadAnim;                                    // 0x0968(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 HarvestAnim;                                               // 0x0970(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 WeaponBreakAnim;                                           // 0x0980(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EquipSound;                                                // 0x0990(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 EquipAnim;                                                 // 0x0998(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 EquipNoAmmoClipAnim;                                       // 0x09A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipAnim;                                               // 0x09B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipNoAmmoClipAnim;                                     // 0x09C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                WeaponMesh3PFireAnim;                                      // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 FireAnim;                                                  // 0x09E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeAnim;                                                 // 0x09F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeNoAmmoClipAnim;                                       // 0x0A00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FWeaponAnim>                         MeleeAnimList;                                             // 0x0A10(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bOnlyUseFirstMeleeAnimWithShield : 1;                      // 0x0A20(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceShowCrosshairWhileFiring : 1;                        // 0x0A20(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_EOQA[0x7];                                     // 0x0A21(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FWeaponAnim>                         MeleeWithHitAnimList;                                      // 0x0A28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FWeaponAnim                                 ShieldHitAnim;                                             // 0x0A38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenWhenTurningMaxMoveWeaponSpeed;             // 0x0A48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenWhenTurningMinMoveWeaponSpeed;             // 0x0A4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenWhenTurningMinViewRotSpeed;                // 0x0A50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenWhenTurningMaxViewRotSpeed;                // 0x0A54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenIdleRestoreInterval;                       // 0x0A58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenIdleRestoreSpeed;                          // 0x0A5C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMoveOffscreenWhenTurningMaxOffset;                      // 0x0A60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UU0R[0xC];                                     // 0x0A64(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWeaponAnim                                 TargetingFireAnim;                                         // 0x0A70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowSubmergedFiring : 1;                                 // 0x0A80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_DWRI : 4;                                      // 0x0A80(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bHideFPVMesh : 1;                                          // 0x0A80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTargeting : 1;                                       // 0x0A80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanAltFire : 1;                                           // 0x0A80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAltFireDoesMeleeAttack : 1;                               // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAltFireDoesNotStopFire : 1;                               // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideDamageSourceFromLogs : 1;                             // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTargetingFireAnim : 1;                                 // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTargetingReloadAnim : 1;                               // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePartialReloadAnim : 1;                                 // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseEquipNoAmmoClipAnim : 1;                               // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseUnequipNoAmmoClipAnim : 1;                             // 0x0A81(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseMeleeNoAmmoClipAnim : 1;                               // 0x0A82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideLeftArmFPV : 1;                                       // 0x0A82(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bLoopedMuzzleFX : 1;                                       // 0x0A82(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bMeleeHitUseMuzzleFX : 1;                                  // 0x0A82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUsePostUpdateTickForFPVParticles : 1;                     // 0x0A82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFPVMoveOffscreenWhenTurning : 1;                          // 0x0A82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReloadAnimForceTickPoseOnServer : 1;                      // 0x0A82(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLoopedFireSound : 1;                                      // 0x0A82(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bAllowTargetingWhileReloading : 1;                         // 0x0A83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMeleeHitColorizesStructures : 1;                          // 0x0A83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bLoopedFireAnim : 1;                                       // 0x0A83(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_KU30 : 2;                                      // 0x0A83(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoRefire : 1;                                           // 0x0A83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsumeAmmoOnUseAmmo : 1;                                 // 0x0A83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTargetUnTargetWithClick : 1;                              // 0x0A83(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontActuallyConsumeItemAmmo : 1;                          // 0x0A84(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPUseWeaponCanFire : 1;                                   // 0x0A84(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPUseTargetingEvents : 1;                                 // 0x0A84(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_RVOK : 1;                                      // 0x0A84(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWantsToFire : 1;                                          // 0x0A84(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bWantsToAltFire : 1;                                       // 0x0A84(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_FAD5 : 2;                                      // 0x0A84(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_94X8 : 3;                                      // 0x0A85(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseAmmoOnFiring : 1;                                      // 0x0A85(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmmoServerOnly : 1;                                    // 0x0A85(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bListenToAppliedForeces : 1;                               // 0x0A85(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_OSK4[0x2];                                     // 0x0A86(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideAimOffsets : 1;                                   // 0x0A88(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_MJ44[0x3];                                     // 0x0A89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ItemDestructionUnequipWeaponDelay;                         // 0x0A8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              WeaponUnequipDelay;                                        // 0x0A90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y61S[0x4];                                     // 0x0A94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWeaponAnim                                 TargetingReloadAnim;                                       // 0x0A98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7Q89[0x8];                                     // 0x0AA8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastFireTime;                                              // 0x0AB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                CurrentAmmo;                                               // 0x0AB8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	int                                                CurrentAmmoInClip;                                         // 0x0ABC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	bool                                               bReplicateCurrentAmmoInClipToNonOwners;                    // 0x0AC0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPAdjustAmmoPerShot;                                   // 0x0AC1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasToggleableAccessory : 1;                               // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bToggleAccessoryUseAltMuzzleFX : 1;                        // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bToggleAccessoryUseAltFireSound : 1;                       // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanToggleAccessory : 1;                              // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnScoped : 1;                                        // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsDefaultWeapon : 1;                                      // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceKeepEquippedWhileInInventory : 1;                    // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyAllowUseWhenRidingDino : 1;                           // 0x0AC2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPrimaryFireDoesMeleeAttack : 1;                           // 0x0AC3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMeleeHitCaptureDermis : 1;                                // 0x0AC3(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	struct FName                                       FPVAccessoryToggleComponent;                               // 0x0AC4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TPVAccessoryToggleComponent;                               // 0x0ACC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsAccessoryActive : 1;                                    // 0x0AD4(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor)
	unsigned char                                      bCanAccessoryBeSetOn : 1;                                  // 0x0AD4(0x0001) BIT_FIELD (BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bConsumeAmmoItemOnReload : 1;                              // 0x0AD4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAutoReload : 1;                                        // 0x0AD4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWantsToAutoReload : 1;                                    // 0x0AD4(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bHasPlayedReload : 1;                                      // 0x0AD4(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bNetLoopedSimulatingWeaponFire : 1;                        // 0x0AD4(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_GINB : 1;                                      // 0x0AD4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBPHandleMeleeAttack : 1;                                  // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPShouldDealDamage : 1;                                // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoesntUsePrimalItem : 1;                                  // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCanAccessoryBeSetOn : 1;                               // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetActorForTargetingTooltip : 1;                     // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideAimDirection : 1;                            // 0x0AD5(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_3VU8[0x2];                                     // 0x0AD6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPIsValidUnstasisActor : 1;                            // 0x0AD8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_3AKE[0x3];                                     // 0x0AD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeToAutoReload;                                          // 0x0ADC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  ToggleAccessorySound;                                      // 0x0AE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                FiredLastNoAmmoShot;                                       // 0x0AE8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KUAZ[0x4];                                     // 0x0AEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastNotifyShotTime;                                        // 0x0AF0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseSecondaryAttachPointForTaxidermyOnly : 1;              // 0x0AF8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_71DU[0x3];                                     // 0x0AF9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SecondaryOverrideAttachPointForTaxidermyOnly;              // 0x0AFC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLoopingSimulateWeaponFire : 1;                            // 0x0B04(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_MW6A[0x3];                                     // 0x0B05(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MeleeDamageType;                                           // 0x0B08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bClientTriggersHandleFiring : 1;                           // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowUseHarvesting : 1;                                   // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventItemColors : 1;                                    // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetSelectedMeleeAttackAnim : 1;                      // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPWeaponDealDamage : 1;                                // 0x0B10(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_Z8CV[0x3];                                     // 0x0B11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPOnWeaponAnimPlayedNotify : 1;                        // 0x0B14(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_45MZ[0x3];                                     // 0x0B15(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     VRTargetingModelOffset;                                    // 0x0B18(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     VRTargetingAimOriginOffset;                                // 0x0B24(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          ScopeOverlayMI;                                            // 0x0B30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          ScopeCrosshairMI;                                          // 0x0B38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ScopeCrosshairMID;                                         // 0x0B40(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ScopeCrosshairSize;                                        // 0x0B48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ScopeCrosshairColorParameter;                              // 0x0B4C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bColorCrosshairBasedOnTarget : 1;                          // 0x0B54(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowTargeting : 1;                                       // 0x0B54(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreTargetingFOV : 1;                                   // 0x0B54(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowDropAndPickup : 1;                                   // 0x0B54(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bApplyAimDriftWhenTargeting : 1;                           // 0x0B54(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseScopeOverlay : 1;                                      // 0x0B54(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QWF2[0x3];                                     // 0x0B55(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bHideFPVMeshWhileTargeting : 1;                            // 0x0B58(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7LAM[0x3];                                     // 0x0B59(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bGamepadRightIsSecondaryAction : 1;                        // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bGamepadLeftIsPrimaryFire : 1;                             // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDirectPrimaryFireToAltFire : 1;                           // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanFire : 1;                                              // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceTargetingOnDino : 1;                                 // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDirectTargetingToPrimaryFire : 1;                         // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDirectTargetingToAltFire : 1;                             // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDirectTargetingToSecondaryAction : 1;                     // 0x0B5C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDirectAltFireToSeconaryAction : 1;                        // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventEquippingUnderwater : 1;                           // 0x0B5D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseTPVWeaponMeshMeleeSockets : 1;                         // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTargetingForceTraceFloatingHUD : 1;                       // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRunning : 1;                                         // 0x0B5D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowUseWhileRidingDino : 1;                              // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSupportsOffhandShield : 1;                                // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMeleeAttackHarvetUsableComponents : 1;                    // 0x0B5D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSettingColorizeRegions : 1;                          // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttemptToDyeWithMeleeAttack : 1;                          // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyDamagePawns : 1;                                      // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCharacterMeleeDamageModifier : 1;                      // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bConsumeZoomInOut : 1;                                     // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClipScopeInY : 1;                                         // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bScopeFullscreen : 1;                                      // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRunningWhileFiring : 1;                              // 0x0B5E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRunningWhileReloading : 1;                           // 0x0B5F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowRunningWhileMeleeAttacking : 1;                      // 0x0B5F(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              MinItemDurabilityPercentageForShot;                        // 0x0B60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bColorizeMuzzleFX : 1;                                     // 0x0B64(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceFirstPersonWhileTargeting : 1;                       // 0x0B64(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPStartEquippedNotify : 1;                             // 0x0B64(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDirectPrimaryFireToSecondaryAction : 1;                   // 0x0B64(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAlternateAimOffset : 1;                                // 0x0B64(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_9ZUD[0x3];                                     // 0x0B65(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverrideTargetingFOV;                                      // 0x0B68(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TargetingDelayTime;                                        // 0x0B6C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TargetingFOVInterpSpeed;                                   // 0x0B70(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimDriftYawAngle;                                          // 0x0B74(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimDriftPitchAngle;                                        // 0x0B78(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimDriftYawFrequency;                                      // 0x0B7C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AimDriftPitchFrequency;                                    // 0x0B80(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5BVG[0x4];                                     // 0x0B84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                AlternateInventoryEquipAnim;                               // 0x0B88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 OpenInventoryAnim;                                         // 0x0B90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MeleeHitRandomChanceToDestroyItem;                         // 0x0BA0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalFireCameraShakeScale;                                // 0x0BA4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DurabilityCostToEquip;                                     // 0x0BA8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PassiveDurabilityCostPerInterval;                          // 0x0BAC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PassiveDurabilityCostInterval;                             // 0x0BB0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalFireCameraShakeScaleTargeting;                       // 0x0BB4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeleeCameraShakeSpeedScale;                                // 0x0BB8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReloadCameraShakeSpeedScale;                               // 0x0BBC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeleeConsumesStamina;                                      // 0x0BC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MNXU[0x4];                                     // 0x0BC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MeleeHitTargetCameraShake;                                 // 0x0BC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MeleeHitTargetCameraShakeMobile;                           // 0x0BD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      MeleeHitColorizeStructuresUI;                              // 0x0BD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HypoThermiaInsulation;                                     // 0x0BE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              HyperThermiaInsulation;                                    // 0x0BE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              InsulationRange;                                           // 0x0BE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MNL4[0x1C];                                    // 0x0BEC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   TargetingSound;                                            // 0x0C08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   UntargetingSound;                                          // 0x0C10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FPVMeleeTraceFXRange;                                      // 0x0C18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T9E8[0x4];                                     // 0x0C1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MeleeAttackUsableHarvestDamageType;                        // 0x0C20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MeleeAttackHarvetUsableComponentsRadius;                   // 0x0C28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MeleeAttackUsableHarvestDamageMultiplier;                  // 0x0C2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YVCG[0x58];                                    // 0x0C30(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimMontage*                                TPVForcePlayAnim;                                          // 0x0C88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bPreventOpeningInventory;                                  // 0x0C90(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowUseOnSeatingStructure;                               // 0x0C91(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bOnlyUseOnSeatingStructure;                                // 0x0C92(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bOverrideStandingAnim : 1;                                 // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCustomSeatedAnim : 1;                                  // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPForceTPVTargetingAnimation : 1;                      // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventUseWhileRidingDino : 1;                       // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPreventSwitchingWeapon : 1;                          // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCanEquip : 1;                                        // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPRemainEquipped : 1;                                  // 0x0C93(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsInDestruction : 1;                                      // 0x0C93(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceReloadOnDestruction : 1;                             // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPModifyFOV : 1;                                       // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bServerIgnoreCheckCanFire : 1;                             // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetTPVCameraOffset : 1;                              // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideRootRotationOffset : 1;                      // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSpawnedByMission : 1;                                     // 0x0C94(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, SaveGame, NoDestructor)
	unsigned char                                      bAllowFullClipReload : 1;                                  // 0x0C94(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceAllowPassengerTPV : 1;                               // 0x0C94(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventCarriedZoomInOut : 1;                              // 0x0C95(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInstantAccuracyReset : 1;                                 // 0x0C95(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceAlwaysPlayEquipAnim : 1;                             // 0x0C95(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_5KJL[0x2];                                     // 0x0C96(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIgnoreReloadState : 1;                                    // 0x0C98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPPostSpawnMuzzleEffect : 1;                           // 0x0C98(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_VKWA[0x3];                                     // 0x0C99(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBPGetCrosshairColor : 1;                               // 0x0C9C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnorePlayerReload : 1;                                   // 0x0C9C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_WUB9[0x3];                                     // 0x0C9D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_O8Z2 : 1;                                      // 0x0CA0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseBPOnBurstStarted : 1;                                  // 0x0CA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnBurstFinished : 1;                                 // 0x0CA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBurstStartAnim : 1;                                    // 0x0CA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBurstFinishAnim : 1;                                   // 0x0CA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSecondaryActionStopsFire : 1;                             // 0x0CA0(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAmmoSupportsAdjustedAmmoPerShot : 1;                   // 0x0CA0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KFMY[0x3];                                     // 0x0CA1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bBPDoClientCheckCanFire;                                   // 0x0CA4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bRestrictTPVCameraYaw;                                     // 0x0CA5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QEOC[0x2];                                     // 0x0CA6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TPVCameraYawRange;                                         // 0x0CA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFoceSimulatedTick;                                        // 0x0CAC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bWasLastFireFromGamePad;                                   // 0x0CAD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableWeaponCrosshair;                                   // 0x0CAE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KLJ8[0x1];                                     // 0x0CAF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMesh*                               DyePreviewMeshOverrideSK;                                  // 0x0CB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 DyePreviewMeshOverrideSM;                                  // 0x0CB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bBPOverrideAspectRatio;                                    // 0x0CC0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bBPOverrideFPVMasterPoseComponent;                         // 0x0CC1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceAllowMountedWeaponry;                                // 0x0CC2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HCXO[0x1];                                     // 0x0CC3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FireCameraShakeSpreadScaleExponent;                        // 0x0CC4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FireCameraShakeSpreadScaleExponentLessThan;                // 0x0CC8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FireCameraShakeSpreadScaleMultiplierLessThan;              // 0x0CCC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FireCameraShakeSpreadScaleMultiplier;                      // 0x0CD0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseFireCameraShakeScale;                                  // 0x0CD4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceTickWithNoController;                                // 0x0CD5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WNIV[0x2];                                     // 0x0CD6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FInstantWeaponData                          InstantConfig;                                             // 0x0CD8(0x0030) (Edit, DisableEditOnInstance)
	float                                              CurrentFiringSpread;                                       // 0x0D08(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1KUB[0x4];                                     // 0x0D0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ScopedBuff;                                                // 0x0D10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0X81[0x8];                                     // 0x0D18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               OverrideTPVShieldAnimation;                                // 0x0D20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowTargetingDuringMeleeSwing;                           // 0x0D28(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MLPU[0x3];                                     // 0x0D29(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     FPVMuzzleLocationOffset;                                   // 0x0D2C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVMuzzleLocationOffset;                                   // 0x0D38(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceTPV_EquippedWhileRiding;                             // 0x0D44(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bCutsEnemyGrapplingCable;                                  // 0x0D45(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JMYS[0x2];                                     // 0x0D46(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     FPVInventoryReequipOffset;                                 // 0x0D48(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IO00[0x10];                                    // 0x0D54(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bForceTPVCameraOffset;                                     // 0x0D64(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPSpawnMeleeEffects;                                   // 0x0D65(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5GAJ[0x2];                                     // 0x0D66(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FWeaponAnim                                 StartBurstAnim;                                            // 0x0D68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 FinishBurstAnim;                                           // 0x0D78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AX3T[0x8];                                     // 0x0D88(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon");
		return ptr;
	}



	bool UsesAmmo();
	void UseAmmo(int UseAmmoAmountOverride);
	void ToggleAccessory();
	void StopWeaponAnimation(const struct FWeaponAnim& Animation, bool bReplicate, bool bReplicateToInstigator);
	void StopSecondaryActionEvent();
	void StartUnequipEvent();
	void StartUnequip();
	void StartSecondaryActionEvent();
	void SetAmmoInClip(int newAmmo);
	void SetAccessoryEnabled(bool bEnabled);
	void ServerToggleAccessory();
	void ServerStopSecondaryAction();
	void ServerStopFire();
	void ServerStopAltFire();
	void ServerStartSecondaryAction();
	void ServerStartReload();
	void ServerStartFire();
	void ServerStartAltFire();
	void ServerSetColorizeRegion(int theRegion, bool bValToUse);
	struct FWeaponAnim SelectMeleeAttackAnim();
	void ReloadWeapon();
	class UAudioComponent* PlayWeaponSound(class USoundCue* Sound);
	void PlayWeaponBreakAnimation();
	float PlayWeaponAnimationEx(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	float PlayWeaponAnimation(const struct FWeaponAnim& Animation, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	void PlayUseHarvestAnimation();
	void OnRep_NetLoopedWeaponFire();
	void OnRep_MyPawn();
	void OnRep_CurrentAmmoInClip();
	void OnRep_AccessoryToggle();
	void OnInstigatorPlayDyingEvent();
	void OnAttachedToPawn();
	bool IsPlayingWeaponAnimMontage(const struct FWeaponAnim& WeaponAnimMontage, float TimeFromEndToConsiderFinished);
	bool IsOwningClient();
	bool IsLocallyOwned();
	bool IsInMeleeAttack();
	bool IsFiring();
	bool IsClimbing();
	bool HasInfiniteAmmo();
	class USkeletalMeshComponent* GetWeaponMesh();
	float GetWeaponDamageMultiplier();
	float GetWeaponAttackPlayRate();
	class UAnimSequence* GetStandingAnimation(float* OutBlendInTime, float* OutBlendOutTime);
	class AShooterCharacter* GetPawnOwner();
	struct FVector GetMuzzleLocation();
	struct FVector GetMuzzleDirection();
	struct FString GetDebugInfoString();
	int GetCurrentAmmoInClip();
	int GetCurrentAmmo();
	struct FVector GetAdjustedAim();
	void ForceUpdateClientAmmo();
	bool ForceTPVTargetingAnimation();
	bool ForcesTPVCameraOffset();
	void ForceMeshUpdate(bool bIsFirstPerson);
	class USceneComponent* FindComponentByName(const struct FName& ComponentName);
	void DoMeleeAttack();
	void DoHandleFiring();
	void ConsumeAmmoItem(int Quantity);
	void ClientStopSimulatingWeaponFire();
	void ClientStartReload();
	void ClientStartMuzzleFX();
	void ClientSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
	void ClientSimulateWeaponFire();
	void ClientSetClipAmmo(int NewClipAmmo, bool bOnlyUpdateItem);
	void ClientPlayShieldHitAnim();
	void ClearClientReload();
	void CheckItemAssocation();
	bool CanReload();
	bool CanMeleeAttack();
	bool CanFire(bool bForceAllowSubmergedFiring);
	void BPWeaponZoom(bool bZoomingIn);
	int BPWeaponDealDamage(const struct FHitResult& Impact, const struct FVector& ShootDir, int DamageAmount, class UClass* DamageType, float Impulse);
	bool BPWeaponCanFire();
	bool BPTryFireWeapon();
	void BPToggleAccessoryFailed();
	void BPToggleAccessory();
	void BPStopMeleeAttack();
	void BPStartEquippedNotify();
	void BPSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
	bool BPShouldDealDamage(class AActor* TestActor);
	void BPRequestReload();
	bool BPRemainEquipped();
	bool BPPreventSwitchingWeapon();
	void BPPostSpawnMuzzleEffect(class UParticleSystemComponent* NewMuzzlePSC);
	struct FRotator BPOverrideRootRotationOffset(const struct FRotator& InRootRotation);
	class USkeletalMeshComponent* BPOverrideFPVMasterPoseComponent();
	struct FVector BPOverrideAimDirection(const struct FVector& DesiredAimDirection);
	void BPOnWeaponAnimPlayedNotify(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	void BPOnStopTargeting(bool bFromGamepadLeft);
	void BPOnStartTargeting(bool bFromGamepadLeft);
	void BPOnScoped();
	void BPOnBurstStarted();
	void BPOnBurstFinished();
	float BPModifyFOV(float inFOV);
	void BPMeleeAttackStarted();
	void BPLostController();
	bool BPIsValidUnStasisCaster();
	void BPHandleMeleeAttack();
	void BPGlobalFireWeapon();
	struct FVector BPGetTPVCameraOffset();
	struct FText BPGetTargetingTooltipInfoLabel();
	struct FWeaponAnim BPGetSelectedMeleeAttackAnim();
	class UAnimSequence* BPGetSeatingAnimation();
	struct FString BPGetDebugInfoString();
	struct FColor BPGetCrosshairColor();
	class AActor* BPGetActorForTargetingTooltip();
	bool BPForceTPVTargetingAnimation();
	void BPFireWeapon();
	void BPFiredWeapon();
	void BPDrawHud(class AShooterHUD* HUD);
	bool BPConstrainAspectRatio(float* OutAspectRatio);
	bool BPCanToggleAccessory();
	bool BPCanEquip(class AShooterCharacter* ByCharacter);
	void BPAppliedPrimalItemToWeapon();
	void BPAnimNotifyCustomState_End(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	bool BPAllowNativeFireWeapon();
	int BPAdjustAmmoPerShot();
	void BP_OnReloadNotify();
	bool AllowUnequip();
	bool AllowTargeting();
	bool AllowedToFire(bool bForceAllowSubmergedFiring);
};

// Class ShooterGame.ShooterWeapon_Projectile
// 0x00B0 (FullSize[0x0E40] - InheritedSize[0x0D90])
class AShooterWeapon_Projectile : public AShooterWeapon
{
public:
	bool                                               bUseAmmoOnFireProjectile;                                  // 0x0D90(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NFFI[0x7];                                     // 0x0D91(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ProjectileClass;                                           // 0x0D98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   FireProjectileSound;                                       // 0x0DA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        ProjectileMesh3P;                                          // 0x0DA8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ProjectileAttachPoint3P;                                   // 0x0DB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bSpawnProjectileOnClient;                                  // 0x0DB8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bUseBPSelectProjectileToFire;                              // 0x0DB9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_WRZV[0x2];                                     // 0x0DBA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProjectileSpreadYaw;                                       // 0x0DBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ProjectileSpreadPitch;                                     // 0x0DC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ServerMaxProjectileAngleError;                             // 0x0DC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ServerMaxProjectileOriginError;                            // 0x0DC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bServerFireProjectileForceUpdateAimActors : 1;             // 0x0DCC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseHideProjectileAnimEvents : 1;                          // 0x0DCC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_JKAC[0x3];                                     // 0x0DCD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       Mesh1PProjectileBoneName;                                  // 0x0DD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              LockOnYScreenPercentage;                                   // 0x0DD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bUseLockOn;                                                // 0x0DDC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_3O5Z[0x3];                                     // 0x0DDD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockOnTime;                                                // 0x0DE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              CurrentLockOnTime;                                         // 0x0DE4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              LockOnMaxTraceDistance;                                    // 0x0DE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LockOnTraceBoxExtent;                                      // 0x0DEC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInterface*                          ActorLockedMI;                                             // 0x0DF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    ActorLockedMID;                                            // 0x0E00(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInterface*                          ActorInLockedAreaMI;                                       // 0x0E08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    ActorInLockedAreaMID;                                      // 0x0E10(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bHasLockedTarget;                                          // 0x0E18(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_8N4E[0x27];                                    // 0x0E19(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Projectile");
		return ptr;
	}



	void SetLockedTarget(class AActor* Actor, bool bIsLocked);
	void ServerFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int RandomSeed);
	void ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void OnUnHideProjectile();
	void OnHideProjectile();
	void Listener_LockOn_Update(bool Reset);
	void Listener_LockOn_Stop();
	struct FHitResult GetTrajectoryTarget(int SubSteps, float TotalTime);
	void ClientsFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int RandomSeed);
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void CheckRefireTimer();
	void BPSelectProjectileToFire(class UClass** ProjectileClassOverride, class USoundCue** FireSoundOverride, bool* bSpawnOnClient, float* OverrideMaxSpeed);
	void BPOnSpawnedProjectile(class AShooterProjectile* Projectile);
};

// Class ShooterGame.ShooterProjectile
// 0x01F8 (FullSize[0x0668] - InheritedSize[0x0470])
class AShooterProjectile : public AActor
{
public:
	class UProjectileMovementComponent*                MovementComp;                                              // 0x0470(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	bool                                               bFragmentate;                                              // 0x0478(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LY77[0x3];                                     // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FragmentOriginOffset;                                      // 0x047C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FragmentConeHalfAngle;                                     // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NumberOfFragmentProjectiles;                               // 0x0484(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      FragmentProjectileTemplate;                                // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseOwnerProjectileLife;                                   // 0x0490(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q7TI[0x7];                                     // 0x0491(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USphereComponent*                            CollisionComp;                                             // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*                    ParticleComp;                                              // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        StaticMeshComp;                                            // 0x04A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UClass*                                      ExplosionEmitter;                                          // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      ImpactEmitter;                                             // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QCNM[0x8];                                     // 0x04C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bExploded : 1;                                             // 0x04C8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSpawnExplosionTemplateOnClient : 1;                       // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bExplodeOnClient : 1;                                      // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bExplodeOnImpact : 1;                                      // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bExplodeOnLifeTimeEnd : 1;                                 // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnExplode : 1;                                     // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceUseTickFunction : 1;                                 // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceIgnoreFriendlyFire : 1;                              // 0x04C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachOnImpact : 1;                                       // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSpawnImpactEffectOnHit : 1;                               // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateImpact : 1;                                      // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImpactSetRotationToNormal : 1;                            // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNoImpactEmitterOnCharacterHit : 1;                        // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRotateMeshWhileMoving : 1;                                // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckForNonBlockingHitImpactFX : 1;                       // 0x04C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTickedNonBlockingHitImpactFX : 1;                         // 0x04C9(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bUseTraceForBlocking : 1;                                  // 0x04CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHadAttachParent : 1;                                      // 0x04CA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_88F0 : 1;                                      // 0x04CA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bStopOnExplode : 1;                                        // 0x04CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseTraceForBlockingStopOnExplode : 1;                     // 0x04CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseMultiTraceForBlocking : 1;                             // 0x04CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QEOI : 1;                                      // 0x04CA(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bExplodeEffectOnDestroy : 1;                               // 0x04CA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImpactRequiresDinoLineOfSight : 1;                        // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bImpactPvEOnlyAlly : 1;                                    // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPProjectileBounced : 1;                               // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachOnProjectileBounced : 1;                            // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIgnoreProjectileImpact : 1;                          // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIgnoredByTurrets : 1;                                     // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bResetHasImpactedOnMultiTraceForBlocking : 1;              // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNonBlockingVolumeMustBeWater : 1;                         // 0x04CB(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	float                                              ClientSideCollisionRadius;                                 // 0x04CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TraceForBlockingRadius;                                    // 0x04D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CustomColorDesaturation;                                   // 0x04D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PP0K[0x10];                                    // 0x04D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    RotateMeshFactor;                                          // 0x04E8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J492[0x4];                                     // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ImpactTemplate;                                            // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TornOffLifeSpan;                                           // 0x0500(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PostExplosionKeepAliveLifeSpan;                            // 0x0504(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             ExplosionNetworkTime;                                      // 0x0508(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              NudgedImpactDistance;                                      // 0x0510(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreDirectImpactRadialDamage;                           // 0x0514(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceNetUpdate;                                           // 0x0515(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1A9S[0x2];                                     // 0x0516(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceNetUpdateTimeInterval;                                // 0x0518(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4VTZ[0x4];                                     // 0x051C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FProjectileWeaponData                       WeaponConfig;                                              // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	TWeakObjectPtr<class AShooterWeapon_Projectile>    weapon;                                                    // 0x0548(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ParticleColorIntensity;                                    // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ClientFailsafeLifespan;                                    // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseWeaponColorization : 1;                                // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCustomColor : 1;                                       // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoFullRadialDamage : 1;                                   // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bExplodeOnNonBlockingImpact : 1;                           // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bRadialDamageIgnoreDamageCauser : 1;                       // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMultiTraceCollideAgainstPawns : 1;                        // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTraceForBlockingDoImpactBackTrace : 1;                    // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bExplosionOrientUpwards : 1;                               // 0x0558(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bColorizeStructureOnImpact : 1;                            // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNonBlockingImpactNoExplosionEmitter : 1;                  // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDestroyOnExplodeNonBlockingImpact : 1;                    // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDontFragmentOnDamage : 1;                                 // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventReflecting : 1;                                    // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPIgnoreRadialDamageVictim : 1;                        // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoFinalTraceCheckToDirectDamageVictim : 1;                // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoFinalTraceCheckFromInstigatorToDirectDamageVictim : 1;  // 0x0559(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_II1Z[0x2];                                     // 0x055A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                CustomColor;                                               // 0x055C(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class AActor>                       DamageCauser;                                              // 0x056C(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bHasImpacted;                                              // 0x0574(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8QEH[0x3];                                     // 0x0575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FHitResult                                  ReplicatedHitInfo;                                         // 0x0578(0x0088) (Net, Transient)
	class USoundCue*                                   ProjectileBounceSound;                                     // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7YE5[0x28];                                    // 0x0608(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              ImpactedActors;                                            // 0x0630(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FVector                                     LastVelocity;                                              // 0x0640(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IEJ4[0x4];                                     // 0x064C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              IgnoreNonBlockingHitClasses;                               // 0x0650(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bForceIgnoreBlockingHitClasses;                            // 0x0660(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseProjectileTraceChannel : 1;                            // 0x0661(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_9WY6[0x6];                                     // 0x0662(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterProjectile");
		return ptr;
	}



	void UpdateTargetPhysics();
	void StopProjectileMovement();
	void SpawnImpactEffect(const struct FHitResult& Impact);
	void Reset();
	void ProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	bool PreventExplosionEmitter(const struct FHitResult& Impact);
	void OnTouch(class AActor* Actor);
	void OnProjectileStop(const struct FHitResult& HitResult);
	void OnImpact(const struct FHitResult& HitResult, bool bFromReplication);
	void OnExplode(const struct FHitResult& Result);
	void NetUpdateTimer();
	void NetResetTransformAndVelocity(const struct FVector& NewLocation, const struct FRotator& NewRotation, const struct FVector& NewVelocity, TArray<class AActor*> NewMoveIgnoreActors);
	struct FName GetSocketForFinalTraceCheckFromInstigatorToDirectDamageVictim();
	void ExplodeAtLocation(const struct FVector& AtLocation, const struct FVector& AtNormal);
	void Explode(const struct FHitResult& Impact);
	void DisableAndDestroy();
	void DeactivateProjectileEffects();
	void Colorize();
	void ClientOnImpact(const struct FVector& ProjectileLocation, const struct FRotator& ProjectileRotation, const struct FHitResult& HitResult);
	void ClientNetImpactFX(const struct FHitResult& HitResult);
	void ClientNetExplode(const struct FHitResult& HitResult);
	void ClientNetDestroy();
	void ClearHomingTarget();
	void BPSpawnedFragments(TArray<class AShooterProjectile*> FragmentArray);
	void BPProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void BPInitVelocity(const struct FVector& ShootDirection);
	void BPInitializedVelocity(const struct FVector& InVelocity, float CustomSpeed);
	bool BPIgnoreRadialDamageVictim(class AActor* Victim);
	void BPDestroyLikeDamage();
	void BPDamageScalarApplied(float Scalar);
	void BPApplyExplosionDamageAndVFX(const struct FHitResult& Impact, bool bForceSpawnExplosionEmitter);
	bool BP_IgnoreProjectileImpact(const struct FHitResult& ImpactHit);
	void ApplyDamageScalar(float Scalar);
	void AddMoveIgnoreActor(class AActor* IgnoreActor);
};

// Class ShooterGame.PrimalProjectileArrow
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class APrimalProjectileArrow : public AShooterProjectile
{
public:
	float                                              PickUpRadius;                                              // 0x0668(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_8XXV[0x4];                                     // 0x066C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PickupItemClass;                                           // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	int                                                PickUpQuantity;                                            // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              PercentChanceToBreakOnImpact;                              // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      PickItemClassApplySkin;                                    // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class USoundBase*                                  ArrowPickedUpSound;                                        // 0x0688(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileArrow");
		return ptr;
	}



	void PickUpCheck();
};

// Class ShooterGame.PrimalProjectileBoomerang
// 0x0088 (FullSize[0x0718] - InheritedSize[0x0690])
class APrimalProjectileBoomerang : public APrimalProjectileArrow
{
public:
	unsigned char                                      UnknownData_81RQ[0x8];                                     // 0x0690(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxDistanceToTravel;                                       // 0x0698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C4RM[0x74];                                    // 0x069C(0x0074) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ReturnFirstPointTravelDistanceMultiplier;                  // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              ReturnSecondPointTravelDistanceMultiplier;                 // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileBoomerang");
		return ptr;
	}



};

// Class ShooterGame.VictoryCoreHighest
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVictoryCoreHighest : public UObject
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.VictoryCoreHighest");
		return ptr;
	}



};

// Class ShooterGame.VictoryCore
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVictoryCore : public UVictoryCoreHighest
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.VictoryCore");
		return ptr;
	}



	bool STATIC_VTraceSphereBP_IgnoreActorsArray(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, float Radius, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, TEnumAsByte<Engine_ECollisionChannel> Channel, int CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const struct FName& TraceTag, float DebugDrawDuration);
	bool STATIC_VTraceSphereBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, float Radius, class AActor* ActorToIgnore, TEnumAsByte<Engine_ECollisionChannel> Channel, int CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const struct FName& TraceTag, class AActor* OtherActorToIgnore, class AActor* AnotherActorToIgnore, float DebugDrawDuration);
	bool STATIC_VTraceSingleBP_IgnoreActorsArray(class UWorld* TheWorld, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, int CollisionGroups, const struct FName& TraceTag, bool bReturnPhysMaterial, bool bTraceComplex, float DebugDrawDuration);
	bool STATIC_VTraceSingleBP(class UWorld* TheWorld, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, int CollisionGroups, const struct FName& TraceTag, bool bTraceComplex, class AActor* ActorToIgnore, float DebugDrawDuration);
	bool STATIC_VTraceShapeBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, float ShapeRadius, float ShapeHalfHeight, const struct FVector& ShapeBoxExtent, const struct FRotator& ShapeRotation, TEnumAsByte<Engine_ECollisionChannel> Channel, int CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const struct FName& TraceTag, float DebugDrawDuration);
	bool STATIC_VTraceMultiBP_IgnoreActorsArray(class UWorld* TheWorld, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, int CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, const struct FName& TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration);
	bool STATIC_VTraceMultiBP(class UWorld* TheWorld, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, class AActor* InIgnoreActor, int CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, const struct FName& TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, class AActor* AdditionalIgnoreActor, class AActor* AnotherIgnoreActor, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration);
	bool STATIC_VTraceAgainstActorExpensive(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, class AActor* ActorToTraceAgainst, TEnumAsByte<Engine_ECollisionChannel> Channel, int CollisionGroups, float SphereRadius, bool bReturnPhysMaterial, bool bTraceComplex, const struct FVector& BoxExtent, const struct FName& TraceTag, bool bSort);
	class UObject* STATIC_VNewObjectTransient(class UClass* classToUse);
	class UObject* STATIC_VNewObjectFromBlueprintOuter(class UObject* OuterObject, class UClass* classToUse);
	class UObject* STATIC_VNewObjectFromBlueprint(class UObject* WorldContextObject, class UClass* classToUse);
	void STATIC_VisualLog_Print(class AActor* Actor, const struct FString& Message, bool bIsError);
	void STATIC_VisualLog_Location(class AActor* Actor, const struct FString& Message, bool bIsError, const struct FVector& Location, const struct FLinearColor& PointColor, float Size, bool bAlsoPrintMessage);
	void STATIC_VisualLog_LineSegment(class AActor* Actor, const struct FString& Message, bool bIsError, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, float Thickness, bool bAlsoPrintMessage);
	void STATIC_VisualLog_Histogram(class AActor* Actor, const struct FVector2D& DataSample, const struct FName& GraphName, const struct FName& DataName);
	void STATIC_VisualLog_AxisAlignedBox(class AActor* Actor, const struct FString& Message, bool bIsError, const struct FVector& BoxMin, const struct FVector& BoxMax, const struct FLinearColor& BoxColor, bool bAlsoPrintMessage);
	void STATIC_ViewTrailer(bool bAnimatedSeriesTrailer, bool bARK2Trailer);
	struct FVector STATIC_ViewDirectionAngleOffset(const struct FVector& ViewDirection, const struct FVector& RightVector, float AngleOffsetDegrees, float MaxAngleDegreesBeforeInterpToUp);
	float STATIC_VectorDistance(const struct FVector& A, const struct FVector& B);
	void STATIC_UseCooldown(class UObject* WorldContextObject, double* CooldownClock);
	void STATIC_UnRegisterComponentBP(class UActorComponent* Component);
	void STATIC_TrimArray_Vector(TArray<struct FVector>* Array, int MaxLength, bool bRemoveFromEnd);
	void STATIC_TrimArray_Float(TArray<float>* Array, int MaxLength, bool bRemoveFromEnd);
	struct FVector2D STATIC_TransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec);
	bool STATIC_TraceProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime, struct FVector* ArcPeakLocation, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, float ArcTimeStep, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bTraceObjectTypeOnly, bool bDrawDebug, float DebugDrawDuration);
	float STATIC_TimeSince_Utc(double OldTime);
	float STATIC_TimeSince_Network(class UWorld* ForWorld, double OldTime);
	float STATIC_TimeSince(class UWorld* ForWorld, double OldTime);
	double STATIC_TimeSeconds(class UWorld* ForWorld);
	bool STATIC_SupportsShaderModel5();
	int STATIC_StringToIntAscii(const struct FString& SourceString, int StringIndex);
	class UClass* STATIC_StringReferenceToClass(const struct FString& StringReference);
	void STATIC_StopMusic();
	void STATIC_StopCompanionEventForPlayer(class APrimalCharacter* Player);
	void STATIC_SteamOverlayOpenURL(const struct FString& ToURL);
	float STATIC_StaticGetTimeSince(class UWorld* TheWorld, double Time);
	bool STATIC_StaticCheckForCommand(const struct FString& CommandName);
	void STATIC_StartCompanionEventForPlayer(class APrimalCharacter* Player, struct FCompanionEventData* EventData, class AActor* EventActor);
	bool STATIC_SplineLineTrace(class USplineComponent* SplineComponent, TArray<class AActor*> ActorsToIgnore, TArray<struct FHitResult>* OutHits, int NumTracesPerSegment, TEnumAsByte<Engine_ECollisionChannel> Channel, bool bStopOnBlockingHit, float DebugDrawDuration);
	bool STATIC_SphereOverlapFast(class UObject* WorldContextObject, const struct FVector& Loc, float Radius);
	class APrimalStructure* STATIC_SpawnSaddleAttachedStructure(class APrimalDinoCharacter* ParentDino, class UClass* StructureToSpawn, const struct FVector& Location, const struct FRotator& Rotation, class APrimalStructure* ParentStructure, bool bLinkToParent, int ConfigIndex, const struct FName& SKAttachmentSocketOrBoneName);
	class APrimalDinoCharacter* STATIC_SpawnCustomDino(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, bool bUseExactSpawnLocation, bool bSkipAddingTamedLevels, bool bSuppressTamingNotifications, class AMissionType* Mission, class UClass* ColorSet);
	class ABrush* STATIC_SpawnBoxBrushActorFast(class UClass* BrushType, const struct UObject_FTransform& BrushTransform, const struct FVector& BoxExtent);
	class ABrush* STATIC_SpawnBoxBrushActor(class UClass* BrushType, const struct UObject_FTransform& BrushTransform, const struct FVector& BoxExtent);
	class AActor* STATIC_SpawnActorInWorld(class UWorld* ForWorld, class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName, class AActor* OwnerActor, class APawn* InstigatorPawn);
	class AActor* STATIC_SpawnActorDeferred(class UClass* Class, class UWorld* inWorld, const struct FVector& Location, const struct FRotator& Rotation, class AActor* Owner, class APawn* Instigator, bool bNoCollisionFail);
	TArray<struct FVector> STATIC_SortPointsByDistance(const struct FVector& fromLoc, TArray<struct FVector> Points);
	TArray<class AActor*> STATIC_SortActorsByType(TArray<class AActor*> actors);
	TArray<class AActor*> STATIC_SortActorsByTag(int tagIndex, TArray<class AActor*> actors);
	class AActor* STATIC_SortActorsByDistanceReturnNearest(const struct FVector& fromLoc, TArray<class AActor*> actors, bool bRemoveNullEntries);
	TArray<class AActor*> STATIC_SortActorsByDistance(const struct FVector& fromLoc, TArray<class AActor*> actors);
	struct FString STATIC_SimpleReplaceUnicodeWithSupportedAlternatives(const struct FString& OriginalString);
	struct FString STATIC_SimpleFloatString(float inputVal);
	struct FVector STATIC_SimpleCurveInterpClampedVector(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	struct UObject_FTransform STATIC_SimpleCurveInterpClampedTransform(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	struct FRotator STATIC_SimpleCurveInterpClampedRotator(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	struct FLinearColor STATIC_SimpleCurveInterpClampedLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	float STATIC_SimpleCurveInterpClamped(float A, float B, float Alpha, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	float STATIC_SimpleCurveEval(float Value, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	void STATIC_ShowEditorNotification(class UObject* WorldContextObject, const struct FString& Message, TEnumAsByte<ShooterGame_EEditorMessageLogLevel> LogLevel, float Duration, bool bServerOnly);
	void STATIC_SetTickGroupBP(class UActorComponent* Component, TEnumAsByte<Engine_ETickingGroup> TickGroup);
	void STATIC_SetSessionPrefix(const struct FString& InPrefix);
	void STATIC_SetSelectedLevelActors(TArray<class AActor*> ActorsToSelect, bool bClearPreviousSelection);
	bool STATIC_SetMultiUseEntryPriority(TArray<struct FMultiUseEntry>* Entries, bool bFindByUseIndexInsteadOfArrayIndex, int index, int NewPriority);
	void STATIC_SetMousePosition(class APlayerController* Controller, float X, float Y);
	void STATIC_SetMaterialColorizationFromItemColors(class UPrimalItem* Item, class UMaterialInstanceDynamic* dynamicMic);
	void STATIC_SetLevelActorFolderPath(class AActor* Actor, const struct FName& FolderPath);
	void STATIC_SetLastMapPlayed(const struct FString& NewLastMapPlayed);
	void STATIC_SetDinoSetupPointsPerStat(struct FDinoSetup* DinoSetup, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatusType, int Value, bool bIsPlayerAdded, bool bAddInsteadOfSet);
	void STATIC_SetBoolArrayElemTrue(TArray<bool>* TheArray, int TheIndex);
	void STATIC_SetBoolArrayElemFalse(TArray<bool>* TheArray, int TheIndex);
	void STATIC_SetAllowControllerInputWithCursor(bool bAllow);
	void STATIC_ServerSearchFoliageByResource(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, TArray<struct FOverlappedFoliageElement>* OutFoliage, TArray<class UClass*> HarvestResources, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
	void STATIC_ServerSearchFoliage(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, TArray<struct FOverlappedFoliageElement>* OutFoliage, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
	TArray<class AActor*> STATIC_ServerOctreeOverlapActorsClassBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int OctreeTypeBitMask, class UClass* ActorClass, bool bForceActorLocationDistanceCheck);
	TArray<class AActor*> STATIC_ServerOctreeOverlapActorsClass(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, TEnumAsByte<ShooterGame_EServerOctreeGroup> OctreeType, class UClass* ActorClass, bool bForceActorLocationDistanceCheck);
	TArray<class AActor*> STATIC_ServerOctreeOverlapActorsBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int OctreeTypeBitMask, bool bForceActorLocationDistanceCheck);
	TArray<class AActor*> STATIC_ServerOctreeOverlapActors(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, TEnumAsByte<ShooterGame_EServerOctreeGroup> OctreeType, bool bForceActorLocationDistanceCheck);
	bool STATIC_ServerCheckMeshingOnActor(class AActor* OnActor, bool bForceUseActorCenterBounds);
	struct FVector STATIC_SelectVectorIfWithinRange(const struct FVector& A, const struct FVector& B, bool* PickedA, float MaxDistance);
	struct FVector STATIC_SelectCloserVector(const struct FVector& Origin, const struct FVector& A, const struct FVector& B, bool* PickedA);
	struct FVector STATIC_RotateDirToTargetWithAngleLimits(const struct FVector& RotateDir, const struct FVector& TowardsDir, const struct FRotator& WithAngleLimits, bool bForceZeroRoll);
	void STATIC_ReupdateCaptures(class UWorld* ForWorld, bool bReinitSkylights);
	void STATIC_ResetMousePositionToCenter(class APlayerController* Controller);
	void STATIC_ResetCooldown(double* CooldownClock);
	struct FRotator STATIC_RemoveRollFromRotator(const struct FRotator& FromRotator);
	struct FRotator STATIC_RemovePitchAndRollFromRotator(const struct FRotator& FromRotator);
	TArray<TWeakObjectPtr<class APrimalDinoCharacter>> STATIC_RemoveInvalidObjectsInContainer(TArray<TWeakObjectPtr<class APrimalDinoCharacter>> fContainer);
	void STATIC_RemoveFromActorList(class UWorld* ForWorld, int ActorListNum, class AActor* ActorRef);
	bool STATIC_RemoveActorFromCustomActorList(class UWorld* ForWorld, const struct FName& SearchCustomTag, class AActor* ActorToRemove);
	void STATIC_RegisterComponentBP(class UActorComponent* Component);
	void STATIC_RefreshApplySoundVolumes();
	void STATIC_RefreshApplySoundAndMusicVolumes();
	void STATIC_RecordMeshingMetrics(class AActor* forActor, bool bWasDestroyed);
	bool STATIC_ReallySupportsShaderModel5();
	struct FVector STATIC_RandomPointInBoundingBoxFromStream(const struct FVector& Origin, const struct FVector& BoxExtent, const struct FRandomStream& Stream);
	class UObject* STATIC_PureDefaultObject(class UObject* FromObjectInstance);
	class UObject* STATIC_PureClassDefaultObject(class UClass* FromClass);
	bool STATIC_ProjectWorldLocationToScreenOrScreenEdgePosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, struct FVector2D* ScreenPosition, float screenMarginPercent, bool widgetSpace, bool* OnScreen, bool bAdjustWithScreenDPI);
	struct FVector STATIC_ProjectVectorOntoInsideOfSphere(const struct FVector& ProjectVector, const struct FVector& ProjectVectorLocation, const struct FVector& SphereOrigin, bool bOnlyProjectIfVectorIsLeavingSphere);
	struct FVector STATIC_ProjectScreenLocationIntoWorld(class APlayerController* ForPC, const struct FVector2D& ScreenLocation, float ProjectionDist);
	struct FVector STATIC_ProjectLocationToEdgeOfSphere(bool* bOutDidProject, const struct FVector& ForLocation, const struct FVector& SphereOrigin, float SphereRadius, bool bOnlyProjectIfWithinRadius, bool bForceProjection2D, bool bDebug, class AActor* DebugContextActor, float DebugDuration);
	void STATIC_PrintMessageInShippingBuild(const struct FString& Msg);
	float STATIC_PrecisionRound(float inputVal, int Precision);
	TArray<struct FVector> STATIC_PointsRandomDist(const struct FVector& Location, int NumPoints, float Radius, float PointRadius);
	TArray<struct FVector> STATIC_PointsOnAGrid(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, float MinSize, int NumPoints, float DebugDrawDuration);
	TArray<struct FVector> STATIC_PointsOnACircle(const struct FVector& Center, float Radius, int NumPoints);
	struct FVector STATIC_PointOnSphere(float Radius, float DegreesI, float DegreesJ);
	struct FVector2D STATIC_PointOnCircle(float Radius, float AngleDegrees);
	void STATIC_PlayMusic(const struct FString& MusicFile, float OverrideVolume);
	bool STATIC_PlayerOwnsScorchedEarthServer(class AShooterPlayerController* Controller);
	bool STATIC_PlayerOwnsGenesisSeasonPassServer(class AShooterPlayerController* Controller);
	bool STATIC_PlayerOwnsExtinctionServer(class AShooterPlayerController* Controller);
	bool STATIC_PlayerOwnsAberrationServer(class AShooterPlayerController* Controller);
	void STATIC_PlayCompanionReactionToPlayers(TArray<class APrimalCharacter*> PlayersWhoGetReaction, struct FCompanionReactionData* ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int UniqueID);
	void STATIC_PlayCompanionReactionOnSolePlayer(class APrimalCharacter* PlayersWhoGetReaction, struct FCompanionReactionData* ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int UniqueID);
	void STATIC_PlaceStructure(class AShooterCharacter* placingPawn, class UClass* StructureToPlace, const struct FItemNetID& ItemId, bool DisplayFailMessage);
	bool STATIC_OwnsSteamAppID(int AppID);
	bool STATIC_OwnsScorchedEarth();
	bool STATIC_OwnsGenesisSeasonPass();
	bool STATIC_OwnsGenesis();
	bool STATIC_OwnsExtinction();
	bool STATIC_OwnsDLC(const struct FString& DLCName);
	bool STATIC_OwnsCrystalIsles();
	bool STATIC_OwnsAberration();
	bool STATIC_OverlappingStationaryObjectsTraceBP(class UWorld* TheWorld, class APrimalCharacter* SourceCharacter, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest);
	bool STATIC_OverlappingActorsTraceBP(class UWorld* TheWorld, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest);
	bool STATIC_OverlappingActorsBP(class UWorld* TheWorld, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, int CollisionGroups, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest);
	void STATIC_OpenStorePageForDLC(const struct FString& DLCName);
	class UClass* STATIC_ObjectRefToClassRef(class UObject* InObject);
	bool STATIC_ObjectIsChildOf(class UObject* Object, class UClass* ObjectType, bool bExactMatch);
	struct FRotator STATIC_NormalizeRotator(const struct FRotator& InRotator);
	double STATIC_NetworkTimeToRealWorldUtcTime(class UObject* WorldContextObject, double NetworkTime);
	void STATIC_MultiTraceProjectSphere(class UObject* WorldContextObject, TArray<struct FHitResult>* OutResults, const struct FVector& Origin, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, int HorizResolution, int VertResolution, float StartDistance, float EndDistance, float NorthConeSubtractAngle, float SouthConeSubtractAngle, int PctChanceToTrace, int MaxTraceCount, bool bDrawDebugLines, float DebugDrawDuration, bool bStopOnFirstHit);
	void STATIC_MultiLinePenetrationTraceByChannel(class UObject* WorldContextObject, TArray<struct FPenetrationTraceHit>* OutResults, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, TArray<class AActor*> ActorsToIgnore, bool bTraceComplex, bool bIgnoreSelf, bool bDrawDebugLines, float DebugDrawDuration);
	void STATIC_MulticastDrawDebugString(class AActor* ReplicatedActor, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void STATIC_MulticastDrawDebugSphere(class AActor* ReplicatedActor, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void STATIC_MulticastDrawDebugPoint(class AActor* ReplicatedActor, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void STATIC_MulticastDrawDebugLine(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool allowInShipping);
	void STATIC_MulticastDrawDebugCylinder(class AActor* ReplicatedActor, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void STATIC_MulticastDrawDebugCoordinateSystem(class AActor* ReplicatedActor, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void STATIC_MulticastDrawDebugCapsuleWithExtents(class AActor* ReplicatedActor, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_MulticastDrawDebugCapsule(class AActor* ReplicatedActor, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration);
	void STATIC_MulticastDrawDebugCamera(class AActor* ReplicatedActor, class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void STATIC_MulticastDrawDebugBox(class AActor* ReplicatedActor, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration);
	void STATIC_MulticastDrawDebugArrow(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration);
	struct FDinoSetup STATIC_ModifyDinoSetupTargetLevel(const struct FDinoSetup& DinoSetup, float LevelMultiplier, int MinLevel, int MaxLevel);
	void STATIC_MarkGen2IntroAsSeen(class UObject* WorldContextObject);
	float STATIC_MapRangeToCurveClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	float STATIC_MapAngleRangeToCurveClamped(float AngleDegrees, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, TEnumAsByte<ShooterGame_ESimpleCurve> CurveType);
	struct FPlane STATIC_MakePlaneWithPoints(const struct FVector& A, const struct FVector& B, const struct FVector& C);
	struct FHitResult STATIC_MakeHitResult(const struct FVector& Location, const struct FVector& Normal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, bool bBlockingHit);
	struct FVector STATIC_LeadTargetPosition(const struct FVector& ProjLocation, float ProjSpeed, const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
	struct FString STATIC_LeaderboardColumnNameToString(TEnumAsByte<ShooterGame_ELeaderboardColumnName> ColumnType);
	bool STATIC_KillTargetCharacterOrStructure(class AActor* ActorToKill, class AActor* DamageCauser, bool bTryDestroyActor);
	struct FString STATIC_JoinStringArrayWithNewlines(TArray<struct FString> SourceArray);
	bool STATIC_IsXboxOneBuild();
	bool STATIC_IsWorkshopIDSubscribed(const struct FString& WorkshopID);
	bool STATIC_IsValidItemForGrinding(class UPrimalItem* Item, class UPrimalInventoryComponent* inventory);
	bool STATIC_IsUWPBuild();
	bool STATIC_IsUndermesh(class APrimalCharacter* Character, struct FVector* CheckSevenHitLocation, bool* bOverlapping, class UActorComponent** CheckSevenResult, bool DebugDraw, float DebugDrawSeconds);
	bool STATIC_IsTimeSince_Utc(double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
	bool STATIC_IsTimeSince_Network(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
	bool STATIC_IsTimeSince(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
	bool STATIC_IsSplitscreen();
	bool STATIC_IsShipping();
	bool STATIC_IsSavingSaveGame();
	bool STATIC_IsRunningTotalConversion();
	bool STATIC_IsPVEServer(class UObject* WorldContextObject);
	bool STATIC_IsPS4Build();
	bool STATIC_IsPointStuckWithinMesh(class UWorld* TheWorld, const struct FVector& TestPoint, int hemisphereSubdivisions, float rayDistance, float percentageConsideredStuck, class AActor* ActorToIgnore);
	bool STATIC_IsPointInCone(const struct FVector& Point, const struct FVector& ConeOrigin, const struct FVector& ConeDir, float ConeLength, float ConeHalfAngle);
	bool STATIC_IsPlayInEditor(class UObject* WorldContextObject);
	bool STATIC_IsOfficialServer();
	bool STATIC_IsNonHostPlayer(class UWorld* TheWorld, class AController* PlayerController);
	bool STATIC_IsMissionTagActiveAnywhere(class AShooterPlayerController* FromPC, const struct FName& MissionTag);
	bool STATIC_IsMissionActiveAnywhere(class UClass* MissionType);
	bool STATIC_IsLowMemPlatform();
	bool STATIC_IsLoadingSaveGame();
	bool STATIC_IsLinuxOrMacBuild();
	bool STATIC_IsInsideOrIntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
	bool STATIC_IsInsideBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
	bool STATIC_IsGameWorld(class UWorld* TheWorld);
	bool STATIC_IsGamePadConnected();
	bool STATIC_IsEpicClient();
	bool STATIC_IsEditor();
	bool STATIC_IsDistanceLessThan(const struct FVector& A, const struct FVector& B, float Distance);
	bool STATIC_IsDistanceGreaterThan(const struct FVector& A, const struct FVector& B, float Distance);
	bool STATIC_IsDinoDuped(class UWorld* WorldContext, uint32_t ID1, uint32_t ID2);
	bool STATIC_IsCryopodNerfEnabled(class UObject* WorldContextObject, float* damageMult, float* Duration, float* incomingDamageMultPercent);
	bool STATIC_IsCooldownComplete(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration);
	bool STATIC_IsConsoleServerBuild();
	bool STATIC_IsConsoleBuild();
	int STATIC_IsChildOfClassesSoft(class UClass* childClass, TArray<struct FString> ParentClassesArraySoft);
	int STATIC_IsChildOfClasses(class UClass* childClass, TArray<class UClass*> ParentClassesArray);
	struct FVector2D STATIC_InverseTransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec);
	struct UObject_FTransform STATIC_InverseTransform(const struct UObject_FTransform& TransformIn);
	struct FString STATIC_IntToStringAscii(int CharValue);
	bool STATIC_IntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
	void STATIC_InlineLoadLevels(TArray<struct FName> LevelNames, TArray<struct FName> LevelNamesToUnload, bool bDisableDistanceStreamingOnLevels);
	struct FVector STATIC_Helix(float Radius, float Time);
	bool STATIC_HasPlayerSeenGen2Intro(class UObject* WorldContextObject);
	bool STATIC_HasCraftingRequirementsGreaterThanOne(class UPrimalItem* Item);
	bool STATIC_GrindItemIntoInventory(class UPrimalItem* Item, class UPrimalInventoryComponent* inventory, bool bGrindStack, int MaxQuantityToGrind, float GrindGiveItemsPercent, int MaxItemsToGivePerGrind);
	void STATIC_GrindAllItemsToInventory(class UPrimalInventoryComponent* inventory, bool bGrindStack, int MaxQuantityToGrind, float GrindGiveItemsPercent, int MaxItemsToGivePerGrind);
	void STATIC_GridTraceAroundPoint(class UObject* WorldContextObject, TArray<struct FHitResult>* OutResults, const struct FVector& Origin, const struct FRotator& GridRotation, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, int NumTracesX, int NumTracesY, float SpacingX, float SpacingY, float ZStartOffset, float ZEndOffset, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration);
	TArray<class UPrimalItem*> STATIC_GiveItemToCharacter(class APrimalCharacter* Character, class UClass* ItemType, int NumItems, float Quality, bool bAutoEquip);
	TArray<class ULevelStreaming*> STATIC_GetWorldSublevels(class UObject* WorldContextObject);
	double STATIC_GetWorldLoadedAtTime(class UObject* WorldContextObject);
	int STATIC_GetWeightedRandomIndexFromArray(TArray<float> pArray, float ForceRand);
	float STATIC_GetVolumeOfCapsule(float CapsuleRadius, float CapsuleHalfHeight);
	struct FVector STATIC_GetVelocityDeltaBetweenChars(class APrimalCharacter* CharA, class APrimalCharacter* CharB);
	struct FString STATIC_GetTwoLetterISOLanguageName();
	float STATIC_GetTimeSince(class APawn* Pawn, float Time);
	float STATIC_GetTimeSeconds(class APawn* Pawn);
	struct FColor STATIC_GetTeamColor(int TargetingTeam);
	struct FBoxSphereBounds STATIC_GetStaticMeshBounds(class UStaticMesh* ForMesh);
	void STATIC_GetSpecialActorList(class UWorld* ForWorld, TEnumAsByte<Engine_EActorListsBP> ActorListType, TArray<class AActor*>* OutActors);
	struct FString STATIC_GetSoundWaveLocalizedSpokenText(class USoundWave* InSound);
	struct FString STATIC_GetSoundCueLocalizedSpokenText(class USoundCue* InSound);
	float STATIC_GetSimpleMontageDuration(class UAnimMontage* GivenMontage, float GivenPlayRate);
	class UShooterGameUserSettings* STATIC_GetShooterGameUserSettings();
	class AShooterCharacter* STATIC_GetShooterCharacterFromPawn(class APawn* Pawn);
	class AShooterCharacter* STATIC_GetShooterCharacterFromController(class AController* Controller);
	TArray<class AActor*> STATIC_GetSelectedLevelActors();
	int STATIC_GetSecondsIntoDay();
	struct FVector2D STATIC_GetScreenPercentLocation(class APlayerController* ForPC, const struct FVector2D& ScreenPercentages);
	float STATIC_GetScreenPercentage();
	float STATIC_GetScreenFramePerfScalar();
	double STATIC_GetRealWorldUtcTimeInSeconds();
	bool STATIC_GetRandomWeightedDinoSetup(TArray<struct FDinoSetup> DinoSetupEntries, struct FDinoSetup* DinoSetup);
	float STATIC_GetProjectileArcPeakTime(class UObject* WorldContextObject, const struct FProjectileArc& Arc);
	class UWorld* STATIC_GetPrimaryWorld();
	class AShooterCharacter* STATIC_GetPlayerCharacterByIndex(class UObject* WorldContextObject, int PlayerIndex);
	class AShooterCharacter* STATIC_GetPlayerCharacterByController(class APlayerController* PC);
	struct FVector STATIC_GetPlaneNormal(const struct FPlane& ForPlane);
	bool STATIC_GetOverlappedHarvestActors(class UWorld* ForWorld, const struct FVector& AtLoc, float AtRadius, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<struct FVector>* OutHarvestLocations, TArray<int>* OutHitBodyIndices);
	struct FString STATIC_GetObjectString(class UObject* ForObject);
	void STATIC_GetObjectsReferencedBy(class UObject* ForObject, TArray<class UObject*>* OutReferencedObjects, bool bIgnoreTransient);
	struct FString STATIC_GetObjectPathName(class UObject* ForObject);
	struct FName STATIC_GetObjectName(class UObject* ForObject);
	struct FName STATIC_GetObjectFName(class UObject* ForObject);
	struct FString STATIC_GetNewlineCharacter();
	double STATIC_GetNetworkTimeInSeconds(class UObject* WorldContextObject);
	double STATIC_GetMissionNetworkStartTime(class UWorld* ForWorld, const struct FName& MissionTag);
	class AActor* STATIC_GetMissionActorOfTypes(class UWorld* World, TArray<class UClass*> theMissionTypes);
	class AActor* STATIC_GetMissionActorOfType(class UWorld* World, class UClass* theMissionType, bool bExactMatch);
	float STATIC_GetMatineeLength(class AMatineeActor* MatineeActor);
	bool STATIC_GetLocaleSpecificSoundWaveAnimTexturePairArrays(TArray<struct FLocalizedSoundWaveAnimTexturePairArrays> LocalizedSoundWaveAnimTextures, struct FLocalizedSoundWaveAnimTexturePairArrays* OutLocalizedAudio, bool* FoundLocalizedSoundWavesForThisLanguage, const struct FString& LanguageOverride);
	bool STATIC_GetLocaleSpecificAudio(TArray<struct FLocalizedSoundCueEntry> LocalizedSoundCues, struct FLocalizedSoundCueEntry* OutLocalizedAudio, const struct FString& LanguageOverride);
	TArray<struct FName> STATIC_GetLoadedStreamingLevelNames();
	void STATIC_GetLaunchVelocityAndGravity(const struct FVector& StartLocation, const struct FVector& TargetLocation, float LateralSpeed, float PeakHeightZ, struct FVector* LaunchVelocity, float* Gravity);
	struct FString STATIC_GetLastMapPlayed();
	struct FString STATIC_GetLastHostedMapPlayed();
	struct FString STATIC_GetKeyNameFromActionName(const struct FName& ActionName);
	struct FString STATIC_GetKeyName(const struct FKey& Key);
	class UClass* STATIC_GetItemClassFromItemSetup(const struct FItemSetup& ItemSetup);
	struct FName STATIC_GetHitBoneNameFromDamageEvent(class APrimalCharacter* Character, class AController* HitInstigator, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointHitResult, const struct FName& MatchCollisionPresetName);
	class UPrimalHarvestingComponent* STATIC_GetHarvestingComponentFromHitBodyIndex(class UInstancedStaticMeshComponent* FromISMC, int WithHitBodyIndex);
	bool STATIC_GetGroundLocation(class UWorld* ForWorld, struct FVector* theGroundLoc, const struct FVector& StartLoc, const struct FVector& OffsetUp, const struct FVector& OffsetDown);
	class UClass* STATIC_GetGrinderReplacementItem(class UClass* current);
	class ADirectionalLight* STATIC_GetFirstDirectionalLight(class UWorld* World);
	float STATIC_GetDistanceToCollision(class UPrimitiveComponent* Comp, const struct FVector& Point, struct FVector* closestPoint);
	class UClass* STATIC_GetDinoStaticClass(const struct FDinoSetup& DinoSetup);
	int STATIC_GetDinoSetupPointsPerStat(const struct FDinoSetup& DinoSetup, TEnumAsByte<ShooterGame_EPrimalCharacterStatusValue> StatusType, bool bGetPlayerAdded);
	bool STATIC_GetDinoSetupGroup_WeightedRandom(TArray<struct FDinoSetupGroup> DinoSetupGroups, struct FDinoSetupGroup* Group);
	bool STATIC_GetDinoSetupGroup_ByName(const struct FName& GroupName, TArray<struct FDinoSetupGroup> DinoSetupGroups, struct FDinoSetupGroup* Group);
	class UClass* STATIC_GetDinoSetupDinoType(const struct FDinoSetup& DinoSetup);
	bool STATIC_GetDinoSetupCapsuleSize(const struct FDinoSetup& DinoSetup, float* CapsuleRadius, float* CapsuleHalfHeight);
	class APrimalDinoCharacter* STATIC_GetDinoCharacterByID(class UObject* WorldContextObject, int DinoID1, int DinoID2, bool bSearchTamedOnly);
	class UObject* STATIC_GetDefaultObject(class UObject* FromObjectInstance);
	struct FVector STATIC_GetCustomDinoSpawnLocation(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bApplyRotationToSpawnOffset);
	class ACustomActorList* STATIC_GetCustomActorList(class UWorld* ForWorld, const struct FName& SearchCustomTag);
	float STATIC_GetCurrentCameraExposure();
	struct FVector2D STATIC_GetControllerMovementInputs(class APlayerController* ForPC);
	class AActor* STATIC_GetClosestActorArray(const struct FVector& ToPoint, TArray<class AActor*> ActorArray);
	struct FString STATIC_GetClassString(class UClass* ForClass);
	struct FString STATIC_GetClassPathName(class UObject* ForClass);
	struct FName STATIC_GetClassFName(class UClass* ForClass);
	class UObject* STATIC_GetClassDefaultObject(class UClass* FromClass);
	bool STATIC_GetCharacterCapsuleSize(class UClass* CharClass, float* CapsuleRadius, float* CapsuleHalfHeight);
	struct FName STATIC_GetBlockingMissionTag(class AShooterPlayerController* FromPC, const struct FName& MissionTag);
	TArray<int> STATIC_GetArrayIndicesSorted_Int(TArray<int> Array, bool bSortLowToHigh);
	TArray<int> STATIC_GetArrayIndicesSorted_Float(TArray<float> Array, bool bSortLowToHigh);
	TArray<int> STATIC_GetArrayIndicesSorted_Double(TArray<double> Array, bool bSortLowToHigh);
	float STATIC_GetAngleBetweenVectorsPure(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis);
	float STATIC_GetAngleBetweenVectors(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis);
	TArray<class AActor*> STATIC_GetAllPlayerStarts(class UWorld* World);
	TArray<class AActor*> STATIC_GetAllMissionDispatchers(class UWorld* World);
	TArray<class AActor*> STATIC_GetAllMissionDispatcherPoints(class UWorld* World);
	TArray<class AActor*> STATIC_GetAllMissionActors(class UWorld* World);
	TArray<class AShooterPlayerController*> STATIC_GetAllLocalPlayerControllers(class UObject* WorldContextObject);
	TArray<class AShooterCharacter*> STATIC_GetAllLocalPlayerCharacters(class UObject* WorldContextObject);
	TArray<class APlayerCameraManager*> STATIC_GetAllLocalPlayerCameraManagers(class UObject* WorldContextObject);
	void STATIC_GetAllClassesOfType(TArray<class UClass*>* Subclasses, class UClass* ParentClass, bool bAllowAbstract, const struct FString& Path);
	TArray<struct FName> STATIC_GetAllAvailableMissionsAsTags(class UWorld* World);
	TArray<struct FAvailableMission> STATIC_GetAllAvailableMissions(class UWorld* World);
	class UClass* STATIC_GenerateRandomLootItemFromLootTable(TArray<struct FLootTableEntry> Entries, int* ItemQuantity, float* ItemQuality);
	class UClass* STATIC_GenerateRandomLootItem(TEnumAsByte<ShooterGame_ELootItemType> LootItemType);
	struct FString STATIC_FuseChunkedFString(TArray<struct FString> InputStringArray);
	struct FString STATIC_FormatAsTimeLong(int InTime);
	struct FString STATIC_FormatAsTime(int InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds);
	void STATIC_ForceScreenColorFade(class UObject* WorldContextObject, const struct FLinearColor& FadeColor, float FullOpacityInterval, float TheFadeOutInterval);
	void STATIC_ForceLevelStreamingToBlock(class UWorld* ForWorld, float ForTime);
	double STATIC_FloatToDouble(float Value);
	struct FVector STATIC_FlattenDirectionVectorInLocalSpace(const struct FVector& Direction, const struct FRotator& Rotation);
	struct FVector STATIC_FlattenDirectionVector(const struct FVector& Direction);
	void STATIC_FinishSpawning(class AActor* Actor);
	bool STATIC_FindWorldActors(class UWorld* fWorld, TArray<class AActor*>* fContainer, class UClass* fType, const struct FName& fTag);
	bool STATIC_FindValidLocationNextToTarget(class UObject* WorldContextObject, struct FVector* OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, int MaxTraceCount, class AActor* ActorToIgnore, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration);
	bool STATIC_FindValidLocationInFrontOfTarget(struct FVector* OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bFailIfLocationNotOnGround, class AActor* ActorToIgnore, bool bTraceComplex, float DebugDrawDuration);
	struct FName STATIC_FindSocketClosestToDirection(class USkeletalMeshComponent* Mesh, const struct FVector& TargetDirection, TArray<struct FName> Sockets, TArray<float>* DotProducts, bool bOnlySocketsWithPrefix, const struct FString& SocketPrefix);
	TArray<class APrimalCharacter*> STATIC_FindNearbyCharactersOfClass(class UWorld* World, const struct FVector& AtLoc, float Radius, class UClass* CharacterClass, bool bTamedDinosOnly, bool bWildDinosOnly);
	struct FString STATIC_FindLocalizedVersionOfFilename(const struct FStringAssetReference& OriginalFile);
	class UPrimalAIState* STATIC_FindActorAIState(class UClass* fStateType, TArray<struct FDinoAttackInfo> fContainerOfStates);
	struct FVector STATIC_EvalProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float Time);
	int STATIC_ECC_TO_BITFIELD_BP(TEnumAsByte<Engine_ECollisionChannel> ConvertChannel);
	void STATIC_DisableGCM(class AActor* ShooterCharacter);
	void STATIC_DestroyAllCharactersWithinMissionTileVolumes(class UWorld* TheWorld, bool bOnlyCheckForDeadCharacters, const struct FName& ForceOnTileStreamVolumeCustomTag);
	void STATIC_DebugDrawProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float MaxArcTime, float ArcTimeStep, const struct FLinearColor& LineColor, float LineThickness, float DebugDrawDuration);
	void STATIC_DeactivateMissionForPlayerCharacter(class AShooterCharacter* PlayerPawn, bool bOverrideForcePreventLeavingMissions);
	double STATIC_DateTimeToSeconds(const struct FDateTime& DateTimeValue);
	void STATIC_CopyDinoColorSetIndicies(class APrimalDinoCharacter* src, class APrimalDinoCharacter* dest);
	float STATIC_CooldownTimeRemaining(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration);
	struct FRotator STATIC_ConvertRotatorFromWorldToLocal(const struct FRotator& ConvertRot, const struct FRotator& ToParentRotation);
	struct FRotator STATIC_ConvertRotatorFromLocalToWorld(const struct FRotator& ConvertRot, const struct FRotator& FromParentRotation);
	struct FString STATIC_ConvertIntToStringWithCommas(int GivenNumber);
	struct FVector_NetQuantizeNormal STATIC_Conv_VectorToVectorNetQuantizeNormal(const struct FVector& InVector);
	struct FVector_NetQuantize STATIC_Conv_VectorToVectorNetQuantize(const struct FVector& InVector);
	class UObject* STATIC_ConstructObjectBP(class UClass* Class, class UObject* Outer, const struct FName& Name);
	class UObject* STATIC_ConstructObjectAutoNameBP(class UClass* Class, class UObject* Outer);
	bool STATIC_ComponentBoundsEncompassesPoint(class UPrimitiveComponent* Comp, const struct FVector& Point, float BoundsMultiplier);
	bool STATIC_ClipLineInsideBox(const struct FVector& Origin, const struct FVector& Extent, const struct FVector& LineStart, const struct FVector& LineEnd, struct FVector* OutLineStart, struct FVector* OutLineEnd);
	struct FString STATIC_ClassToStringReference(class UClass* ForClass);
	class UObject* STATIC_ClassRefToObjectRef(class UClass* InClass);
	float STATIC_ClampRotAxis(float BaseAxis, float DesiredAxis, float MaxDiff);
	struct FVector STATIC_ClampLocation(const struct FVector& BaseLocation, const struct FVector& DesiredLocation, float MaxDiff, bool bTraceClampLocation, class UWorld* TraceWorld, const struct FVector& TraceFromLocation);
	TArray<struct FString> STATIC_ChunkFStringIntoArray(const struct FString& InputString, int ChunkSize);
	struct FLinearColor STATIC_ChangeSaturation(const struct FLinearColor& InColor, float NewSaturation);
	bool STATIC_CapsuleSweepProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, const struct FRotator& CapsuleRotation, float CapsuleRadius, float CapsuleHalfHeight, bool bRotateCapsuleAlongPath, bool bTraceComplex, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, float ArcTimeStep, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bDrawDebug, float DebugDrawDuration);
	bool STATIC_CapsuleSweepMulti(class UObject* WorldContextObject, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bDebugDraw, float DebugDrawDuration, bool bFindInitialOverlaps);
	bool STATIC_CapsuleSweepFast(class UObject* WorldContextObject, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration);
	bool STATIC_CapsuleOverlapFast(class UObject* WorldContextObject, class AActor** FirstOverlappedActor, const struct FVector& Origin, const struct FRotator& CapsuleRotation, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, bool bBlockingOnly);
	bool STATIC_CanTeleport(class APrimalDinoCharacter* Target);
	bool STATIC_CanSpawnCustomDino(class UWorld* World, struct FVector* OutCalculatedSpawnLocation, const struct FVector& PlayerLocation, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bDoLosCheck, bool bDoExtraSafetyChecks);
	void STATIC_CallGlobalLevelEvent(class UWorld* ForWorld, const struct FName& EventName);
	struct FIntPoint STATIC_CalculateGPSCoordinates(class UWorld* ForWorld, const struct FVector& WorldPos);
	bool STATIC_BPSweepComponent(class UPrimitiveComponent* Component, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FVector& Extent, bool bTraceComplex);
	struct FRotator STATIC_BPRTransformInverse(const struct FRotator& R, const struct FRotator& RBasis);
	struct FRotator STATIC_BPRTransform(const struct FRotator& R, const struct FRotator& RBasis);
	struct FRotator STATIC_BPRotatorLerp(const struct FRotator& A, const struct FRotator& B, float Alpha);
	bool STATIC_BPProjectWorldToScreenPositionRaw(class APlayerController* thePC, const struct FVector& WorldLocation, struct FVector2D* Out_ScreenLocation, struct FVector* Out_ViewLocation, bool* Out_bIsScreenLocationInsideViewRect, bool bIgnoreScreenProjectionGlobalTransform);
	struct FVector2D STATIC_BPProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
	class UObject* STATIC_BPLoadObject(const struct FString& PathName);
	class UClass* STATIC_BPLoadClass(const struct FString& PathName);
	bool STATIC_BPIsTemplate(class UObject* AnObject);
	bool STATIC_BPIsDinoIDEqual(int FirstDinoID1, int FirstDinoID2, int SecondDinoID1, int SecondDinoID2);
	int STATIC_BPGetWeightedRandomIndex(TArray<float> pArray, float ForceRand);
	struct FString STATIC_BPGetPrimaryMapName(class UWorld* WorldContext);
	float STATIC_BPGetBiomeWind(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalWind);
	float STATIC_BPGetBiomeTemperature(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalTemperature);
	struct FString STATIC_BPFormatAsTimeLong(int InTime);
	struct FString STATIC_BPFormatAsTime(int InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds);
	float STATIC_BPFLerpFastPure(float InMin, float InMax, float InPercent);
	float STATIC_BPFLerpFast(float InMin, float InMax, float InPercent);
	float STATIC_BPFLerp(float InMin, float InMax, float InPercent, bool bClampToMin, bool bClampToMax);
	bool STATIC_BPFastTrace(class UWorld* TheWorld, const struct FVector& TraceEnd, const struct FVector& TraceStart, class AActor* ActorToIgnore, float DebugDrawDuration);
	void STATIC_BoxFromOriginAndExtent(const struct FVector& Origin, const struct FVector& Extent, struct FVector* OutBoxMin, const struct FVector& OutBoxMax);
	bool STATIC_AreVectorsNearlyEqual(const struct FVector& VectorA, const struct FVector& VectorB, float WithinError);
	bool STATIC_AreVector2DsNearlyEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB, float WithinError);
	bool STATIC_AreVector2DsEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB);
	bool STATIC_AreTransformsNearlyEqual(const struct UObject_FTransform& TransformA, const struct UObject_FTransform& TransformB, float WithinError);
	bool STATIC_AreRotatorsNearlyEqual(const struct FRotator& RotatorA, const struct FRotator& RotatorB, float WithinError);
	void STATIC_AdjustScreenPositionWithScreenDPI(class UWorld* TheWorld, struct FVector2D* ScreenPosition);
	void STATIC_AddToEditorMessageLog(class UObject* WorldContextObject, const struct FString& Message, TEnumAsByte<ShooterGame_EEditorMessageLogLevel> LogLevel, bool bServerOnly);
	void STATIC_AddToActorList(class UWorld* ForWorld, int ActorListNum, class AActor* ActorRef);
	void STATIC_AddActorToCustomActorList(class UWorld* ForWorld, const struct FName& SearchCustomTag, class AActor* ActorToAdd);
	bool STATIC_ActorHasLineOfSightToWorldLocation(class AActor* FromActor, const struct FVector& ToLocation, class AActor** OutBlockingActor, TEnumAsByte<Engine_ECollisionChannel> Channel, float DebugDrawDuration);
	bool STATIC_ActorHasLineOfSight(class AActor* FromActor, class AActor* ToActor, class AActor** OutBlockingActor, const struct FVector& ToActorOffset, TEnumAsByte<Engine_ECollisionChannel> Channel, float DebugDrawDuration);
};

// Class ShooterGame.PrimalProjectileNetGun
// 0x00F0 (FullSize[0x0780] - InheritedSize[0x0690])
class APrimalProjectileNetGun : public APrimalProjectileArrow
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                          // 0x0690(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffToApplyToLightCharacters;                              // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      BuffToApplyToHeavyCharacters;                              // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDinoMassToInmovilize;                                   // 0x06A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BZRC[0x4];                                     // 0x06AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FManagedBoneSetup>                   ManagedBones;                                              // 0x06B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              OnInpactMaxTraceDistance;                                  // 0x06C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DissolveTime;                                              // 0x06C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_70BH[0xB8];                                    // 0x06C8(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileNetGun");
		return ptr;
	}



	struct FRotator GetManagedBoneRotation(const struct FName& InBoneName);
	void GetManagedBoneLocationsAndRotations(TArray<struct FVector>* Locations, TArray<struct FRotator>* Rotations);
	struct FVector GetManagedBoneLocation(const struct FName& InBoneName);
	void CalculateBonePositions();
};

// Class ShooterGame.PrimalProjectileDilo
// 0x0000 (FullSize[0x0668] - InheritedSize[0x0668])
class APrimalProjectileDilo : public AShooterProjectile
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileDilo");
		return ptr;
	}



};

// Class ShooterGame.PrimalProjectileFlare
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class APrimalProjectileFlare : public AShooterProjectile
{
public:
	class UParticleSystemComponent*                    SecondParticleComp;                                        // 0x0668(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	float                                              TimeToActivateSecondParticleComp;                          // 0x0670(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              RandomFallingMovementInterval;                             // 0x0674(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              RandomFallingMovementStrength;                             // 0x0678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_QHG6[0x4];                                     // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  SecondParticleSound;                                       // 0x0680(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              LightColorIntensity;                                       // 0x0688(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_K6QH[0x4];                                     // 0x068C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileFlare");
		return ptr;
	}



};

// Class ShooterGame.PrimalProjectileGrapplingHook
// 0x0040 (FullSize[0x06A8] - InheritedSize[0x0668])
class APrimalProjectileGrapplingHook : public AShooterProjectile
{
public:
	struct FVector                                     GrapHookEndPointOffset;                                    // 0x0668(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumRopeDistance;                                       // 0x0674(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PullingStrength;                                           // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ReleaseRopeSpeed;                                          // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxPullMassOverride;                                       // 0x0680(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DetachGrapHookLifespan;                                    // 0x0684(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     GrapHookDefaultOffset;                                     // 0x0688(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LF0O[0x4];                                     // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          GrapHookMaterial;                                          // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              GrapHookCableWidthOverride;                                // 0x06A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowPullSleeping;                                        // 0x06A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAllowPullFleeing;                                         // 0x06A5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V4C4[0x2];                                     // 0x06A6(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileGrapplingHook");
		return ptr;
	}



};

// Class ShooterGame.PrimalProjectileSpiderAcid
// 0x0000 (FullSize[0x0668] - InheritedSize[0x0668])
class APrimalProjectileSpiderAcid : public AShooterProjectile
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalProjectileSpiderAcid");
		return ptr;
	}



};

// Class ShooterGame.ShooterProjectile_Swarm
// 0x01C0 (FullSize[0x0828] - InheritedSize[0x0668])
class AShooterProjectile_Swarm : public AShooterProjectile
{
public:
	class USceneComponent*                             SwarmRoot;                                                 // 0x0668(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	int                                                SwarmSize;                                                 // 0x0670(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                SwarmLeaderCount;                                          // 0x0674(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BoidCollisionRadius;                                       // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2WBL[0x4];                                     // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBoidBehavior                               SwarmBehavior;                                             // 0x0680(0x0040) (Edit, BlueprintVisible)
	float                                              DynamicAvoidanceDuration;                                  // 0x06C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NRMS[0x4];                                     // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FFlockPersistentData                        SwarmPersistentData;                                       // 0x06C8(0x0038) (Edit, BlueprintVisible)
	class UParticleSystem*                             SwarmParticleSystem;                                       // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SwarmOpacityParticleParamName;                             // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bFadeOutSwarmOverProjectileLife;                           // 0x0710(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QWD4[0x3];                                     // 0x0711(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SwarmOpacityFadeTimeOnBoidImpact;                          // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LifespanAfterImpact;                                       // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwarmDelayedStartTime;                                     // 0x071C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BoidSpawnInterval;                                         // 0x0720(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BoidInitialFollowProjectileTime;                           // 0x0724(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              BoidInitialDisableCollisionTime;                           // 0x0728(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwarmLifetimeAfterPrimaryProjectileDestruction;            // 0x072C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwarmSpawnRadius;                                          // 0x0730(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SwarmInitialSpeedRange;                                    // 0x0734(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SwarmMaxSpeedRange;                                        // 0x073C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SwarmMaxForceRange;                                        // 0x0744(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                                   SwarmTurnRateRange;                                        // 0x074C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwarmTargetRadius;                                         // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwarmTargetHelixSpeed;                                     // 0x0758(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9TD7[0x4];                                     // 0x075C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBoid>                               SwarmData;                                                 // 0x0760(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<class UParticleSystemComponent*>            SwarmComps;                                                // 0x0770(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference)
	TArray<double>                                     BoidSpawnTimes;                                            // 0x0780(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<double>                                     BoidExplodeTimes;                                          // 0x0790(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<int>                                        FlockingWhitelist;                                         // 0x07A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	bool                                               bUseCrazinessMultiplier;                                   // 0x07B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MF71[0x3];                                     // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrazinessMultiplier;                                       // 0x07B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUseBPGetBoidSpawnLocationAndVelocity;                     // 0x07B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OU3N[0x3];                                     // 0x07B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FProjectileArc                              LaunchArc;                                                 // 0x07BC(0x0030) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData_4UCU[0x4];                                     // 0x07EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ProjectileSpawnTime;                                       // 0x07F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProjectilePeakTime;                                        // 0x07F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProjectileImpactTime;                                      // 0x07FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_39OG[0x28];                                    // 0x0800(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterProjectile_Swarm");
		return ptr;
	}



	float TimeSinceProjectileSpawn();
	void SpawnSwarm();
	void MultiSyncSwarm(TArray<struct FBoid> ServerSwarmData);
	void MultiPrimaryProjectileDestroyed(const struct FVector& ImpactLocation, double DestroyNetworkTime);
	int GetNumberOfBoidsInFlight();
	void DoSwarmSync();
	void BPOnBoidExplode(int BoidIndex, class UParticleSystemComponent* BoidParticles, const struct FHitResult& Hit);
	void BPGetBoidSpawnLocationAndVelocity(int BoidIndex, const struct FBoid& BoidData, struct FVector* SpawnLocation, struct FVector* SpawnVelocity);
};

// Class ShooterGame.ShooterSpectatorPawn
// 0x0050 (FullSize[0x0578] - InheritedSize[0x0528])
class AShooterSpectatorPawn : public ASpectatorPawn
{
public:
	unsigned char                                      UnknownData_XXJL[0x50];                                    // 0x0528(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterSpectatorPawn");
		return ptr;
	}



};

// Class ShooterGame.ShooterWeapon_Melee
// 0x0008 (FullSize[0x0D98] - InheritedSize[0x0D90])
class AShooterWeapon_Melee : public AShooterWeapon
{
public:
	bool                                               bUseAltFireOnNormalFire;                                   // 0x0D90(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YZ49[0x7];                                     // 0x0D91(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Melee");
		return ptr;
	}



};

// Class ShooterGame.ShooterWeapon_ChainSaw
// 0x0038 (FullSize[0x0DC8] - InheritedSize[0x0D90])
class AShooterWeapon_ChainSaw : public AShooterWeapon
{
public:
	TArray<struct FWeaponAnim>                         ShootAnimList;                                             // 0x0D90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponAnim>                         ShootWithHitAnimList;                                      // 0x0DA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USoundCue*                                   IdleSound;                                                 // 0x0DB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             IdleAC;                                                    // 0x0DB8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4YPX[0x8];                                     // 0x0DC0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_ChainSaw");
		return ptr;
	}



	void ServerStopFireAnim();
	void ServerReloadWeapon();
	void ServerHit();
	void ClientSimulateChangeFireAnim();
};

// Class ShooterGame.ShooterWeapon_Instant
// 0x0040 (FullSize[0x0DD0] - InheritedSize[0x0D90])
class AShooterWeapon_Instant : public AShooterWeapon
{
public:
	class UParticleSystem*                             TrailFX;                                                   // 0x0D90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UParticleSystem*                             TrailFX_Local;                                             // 0x0D98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       TrailTargetParam;                                          // 0x0DA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              OriginCheckDistance;                                       // 0x0DA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_3VI1[0x14];                                    // 0x0DAC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumTracesPerShot;                                          // 0x0DC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_C3BQ[0x4];                                     // 0x0DC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bPlayFireSoundOnInstantHit : 1;                            // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bExecSpread : 1;                                           // 0x0DC8(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bFireFromMuzzle : 1;                                       // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bPreventSimulatingMultipleShots : 1;                       // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bPerformObstructionCheck : 1;                              // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bSpawnTrailToHit : 1;                                      // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bClampTrailToMaxWeaponRange : 1;                           // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseBPSpawnImpactEffects : 1;                              // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bAllowNativeWithSpawnedImpacts : 1;                        // 0x0DC9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bRotateTrailFXByFireDirection : 1;                         // 0x0DC9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bAttachTrailFXToFirstPersonMuzzle : 1;                     // 0x0DC9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseBPGetCurrentSpread : 1;                                // 0x0DC9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseBPKillImpactEffects : 1;                               // 0x0DC9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_7KPI[0x6];                                     // 0x0DCA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Instant");
		return ptr;
	}



	void SimulateInstantHit(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bForceOnLocal, int ShotIndex);
	void ServerNotifyShotOrigin(const struct FVector& Origin, TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs);
	void ServerNotifyShot(TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs);
	void ServerForceShot(const struct FHitResult& Impact, const struct FVector& StartShotLoc, const struct FVector& EndShotLoc);
	void NetSimulateForceShot(const struct FVector& ShotOrigin, const struct FVector& ShootDir);
	void GetFireLocationAndDirection(struct FVector* Location, struct FVector* Direction);
	float GetCurrentSpread();
	void CheckRefireTimer();
	void BPSpawnImpactEffects(const struct FHitResult& Impact, const struct FVector& ShootDir, bool bIsEntryHit, float WeaponMaxRange);
	void BPPostSpawnTrailEffect(class UParticleSystemComponent* TrailPSC, const struct FVector& StartPoint, const struct FVector& EndPoint);
	void BPKillImpactEffects();
	float BPGetCurrentSpread();
};

// Class ShooterGame.ShooterWeapon_FlameThrower
// 0x0090 (FullSize[0x0E20] - InheritedSize[0x0D90])
class AShooterWeapon_FlameThrower : public AShooterWeapon
{
public:
	int                                                InstantDamageAmount;                                       // 0x0D90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageTestSphereRadius;                                    // 0x0D94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageTestBoxExtentSide;                                   // 0x0D98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageTestMuzzleOffset;                                    // 0x0D9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              FlameHurtMaxDistance;                                      // 0x0DA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2XR2[0x4];                                     // 0x0DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             DamageImpactPoints;                                        // 0x0DA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     MuzzleDirectionOffset;                                     // 0x0DB8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETickingGroup>                  MuzzlePSCTickGroupOverride;                                // 0x0DC4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O2YQ[0x3];                                     // 0x0DC5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseMuzzlePSCTickGroupOverride : 1;                        // 0x0DC8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_I6HM[0x3];                                     // 0x0DC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      FlameThrowerFXDefaultColor;                                // 0x0DCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageType;                                                // 0x0DD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             FlameThrowerFX;                                            // 0x0DD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             FlameThrowerFX_FPV;                                        // 0x0DE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             OnFireFX;                                                  // 0x0DE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                             HarvestFX;                                                 // 0x0DF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J1JW[0x10];                                    // 0x0DF8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShotDelay;                                                 // 0x0E08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_L86Z[0x4];                                     // 0x0E0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FXDelay;                                                   // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_EFUI[0x4];                                     // 0x0E14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bMuzzlePSC_IsTPV : 1;                                      // 0x0E18(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_MLRA[0x7];                                     // 0x0E19(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_FlameThrower");
		return ptr;
	}



	void TickShootFX();
	void StopShootFX();
	void SpawnImpactEffects();
	void ServerTickShootFX();
	void ServerStopShootFX();
	void ServerBeginShootFX();
	void EndFXDelay();
	void ClientSpawnHarvestFX(TArray<struct FVector> Impacts);
	void BPSpawnHarvestEffects(TArray<struct FVector> Impacts);
	void BeginShootFX();
};

// Class ShooterGame.ShooterWeapon_Activated
// 0x00B8 (FullSize[0x0ED8] - InheritedSize[0x0E20])
class AShooterWeapon_Activated : public AShooterWeapon_FlameThrower
{
public:
	unsigned char                                      bIsActivated : 1;                                          // 0x0E20(0x0001) BIT_FIELD (BlueprintVisible, Transient, SaveGame, NoDestructor)
	unsigned char                                      UnknownData_78IM[0xF];                                     // 0x0E21(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FWeaponAnim>                         ActivateAnim;                                              // 0x0E30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponAnim>                         DeactivateAnim;                                            // 0x0E40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FWeaponAnim                                 StopFireAnim;                                              // 0x0E50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MovementFireAnim;                                          // 0x0E60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDamagePawns;                                              // 0x0E70(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HBSA[0x7];                                     // 0x0E71(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ActivateCameraShake;                                       // 0x0E78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ActivateCameraShakeSpeedScale;                             // 0x0E80(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FireOrigin;                                                // 0x0E84(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     FireDirection;                                             // 0x0E90(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     TargetLocation;                                            // 0x0E9C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       BeamTargetParameterName;                                   // 0x0EA8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   FireLoopSound;                                             // 0x0EB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             FireLoopAC;                                                // 0x0EB8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class USoundCue*                                   IdleSound;                                                 // 0x0EC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             IdleAC;                                                    // 0x0EC8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class USoundCue*                                   EmptySound;                                                // 0x0ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Activated");
		return ptr;
	}



	void ServerPreFire(const struct FVector& Origin, const struct FVector& ShootDir);
	void ServerCancelActivation();
	void ServerActivateWeapon(bool bActivate, int nAnimIndex);
	bool IsActivationAnimPlaying();
	void HandleActivation(bool bActive);
	struct FVector GetBeamTarget();
	void EndActivationAnim();
	void ClientHandleActivation(bool bActivate);
	void ClientActivateWeapon(bool bActivate);
	void BPPreFireEvent(const struct FVector& Origin, const struct FVector& ShootDir);
	void ActivateWeapon(bool bActivate, int nAnimIndex);
};

// Class ShooterGame.ShooterWeapon_InstantCharging
// 0x0010 (FullSize[0x0DE0] - InheritedSize[0x0DD0])
class AShooterWeapon_InstantCharging : public AShooterWeapon_Instant
{
public:
	unsigned char                                      bDidFireWeapon : 1;                                        // 0x0DD0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_TOF9[0x7];                                     // 0x0DD1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ChargeStartTime;                                           // 0x0DD8(0x0008) (Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_InstantCharging");
		return ptr;
	}



	void ServerSetCharging(double StartTime);
};

// Class ShooterGame.ShooterWeapon_InstantPenetrating
// 0x0068 (FullSize[0x0E38] - InheritedSize[0x0DD0])
class AShooterWeapon_InstantPenetrating : public AShooterWeapon_Instant
{
public:
	float                                              MaxPenetrationTraceDistance;                               // 0x0DD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PenaltyPerPenetration;                                     // 0x0DD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PenaltyPerUnrealUnit;                                      // 0x0DD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseBPStopPenetratingAtHit;                                // 0x0DDC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DIPC[0x3];                                     // 0x0DDD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDebugPenetration : 1;                                     // 0x0DE0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KXSJ[0x57];                                    // 0x0DE1(0x0057) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_InstantPenetrating");
		return ptr;
	}



	void WeaponPenetrationTrace(const struct FVector& Start, const struct FVector& End, bool FilterVisuals, bool bDebugDraw, float DebugDrawDuration, TArray<struct FHitResult>* HitResults, TArray<bool>* IsEntryHit, float* MaxDistance);
	int PassiveUseAmmo(int amount);
	bool BPStopPenetratingAtHit(const struct FHitResult& CurrentHit, bool bIsEntryHit, float CurrentDistance, float CurrentMaxDistance);
};

// Class ShooterGame.PrimalWeaponElectronicBinoculars
// 0x00B0 (FullSize[0x0E48] - InheritedSize[0x0D98])
class APrimalWeaponElectronicBinoculars : public AShooterWeapon_Melee
{
public:
	float                                              YPosDistance;                                              // 0x0D98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              XPosDistance;                                              // 0x0D9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompSize;                                                  // 0x0DA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DistanceX;                                                 // 0x0DA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DistanceY;                                                 // 0x0DA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DistanceSize;                                              // 0x0DAC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      NightVisionBuff;                                           // 0x0DB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USceneComponent*                             AudioListener;                                             // 0x0DB8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          ScopeCompassMI;                                            // 0x0DC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ScopeCompassMID;                                           // 0x0DC8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          LatitudeMI;                                                // 0x0DD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    LatitudeMID;                                               // 0x0DD8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          LongitudeMI;                                               // 0x0DE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    LongitudeMID;                                              // 0x0DE8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              LatLongInterpSpeed;                                        // 0x0DF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y4EI[0x8];                                     // 0x0DF4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    CurrentCompassAngle;                                       // 0x0DFC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CompassNorthAngle;                                         // 0x0E08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompassInterpSpeed;                                        // 0x0E0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeOrigin;                                            // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeScale;                                             // 0x0E14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeOrigin;                                           // 0x0E18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeScale;                                            // 0x0E1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SoundFadeInSpeed;                                          // 0x0E20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinTargetingFOV;                                           // 0x0E24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxTargetingFOV;                                           // 0x0E28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IIOJ[0x1C];                                    // 0x0E2C(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponElectronicBinoculars");
		return ptr;
	}



	void ServerSetActivateNightVision(int8_t bActive);
	void ClientSetActivateNightVision(int8_t bActive);
};

// Class ShooterGame.PrimalWeaponGPS
// 0x02A8 (FullSize[0x1040] - InheritedSize[0x0D98])
class APrimalWeaponGPS : public AShooterWeapon_Melee
{
public:
	class USkeletalMeshComponent*                      CompassMesh1P;                                             // 0x0D98(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      CompassMesh3P;                                             // 0x0DA0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                      MapMesh3P;                                                 // 0x0DA8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 AssetSM_MarkerMesh;                                        // 0x0DB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 AssetSM_PlayerMarkerMesh;                                  // 0x0DB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 AssetSM_BalloonMarkerMesh;                                 // 0x0DC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MarkerMapScaleX;                                           // 0x0DC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MarkerMapScaleY;                                           // 0x0DCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MarkerOffsetZ;                                             // 0x0DD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    MarkerRotationMin;                                         // 0x0DD4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    MarkerRotationMax;                                         // 0x0DE0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxMapMarkers;                                             // 0x0DEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      MarkerTextColor;                                           // 0x0DF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FColor                                      PlayerMarkerTextColor;                                     // 0x0DF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UStaticMeshComponent*>                MarkerComponents;                                          // 0x0DF8(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	unsigned char                                      UnknownData_M4YF[0x10];                                    // 0x0E08(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        PlayerLocationMArkerComponent;                             // 0x0E18(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        ItemBalloonMarkerComponent;                                // 0x0E20(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	struct FName                                       MapAttachPoint3P;                                          // 0x0E28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CompassAttachPoint1P;                                      // 0x0E30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GPSBoneName1P;                                             // 0x0E38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomInMapAnim;                                             // 0x0E40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomInGPSAnim;                                             // 0x0E50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomInCompassAnim;                                         // 0x0E60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomOutMapAnim;                                            // 0x0E70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomOutGPSAnim;                                            // 0x0E80(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 ZoomOutCompassAnim;                                        // 0x0E90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 DisplayMapAnim;                                            // 0x0EA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 DisplayGPSAnim;                                            // 0x0EB0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 DisplayCompassAnim;                                        // 0x0EC0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipMapAnim;                                            // 0x0ED0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipGPSAnim;                                            // 0x0EE0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipCompassAnim;                                        // 0x0EF0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 UnequipCompassAndMapAnim;                                  // 0x0F00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeMapAnim;                                              // 0x0F10(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeGPSAnim;                                              // 0x0F20(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeCompassAnim;                                          // 0x0F30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 MeleeCompassMapAnim;                                       // 0x0F40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                TPV_MapOnlyIdle;                                           // 0x0F50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                TPV_GPSOnlyIdle;                                           // 0x0F58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                                TPV_MapAndGPSIdle;                                         // 0x0F60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DigitParameterName;                                        // 0x0F68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LatitudeMaterialIndex1;                                    // 0x0F70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LatitudeMaterialIndex2;                                    // 0x0F74(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LatitudeMaterialIndex3;                                    // 0x0F78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LongitudeMaterialIndex1;                                   // 0x0F7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LongitudeMaterialIndex2;                                   // 0x0F80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                LongitudeMaterialIndex3;                                   // 0x0F84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MapMaterialIndex;                                          // 0x0F88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeOrigin;                                            // 0x0F8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeScale;                                             // 0x0F90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeOrigin;                                           // 0x0F94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeScale;                                            // 0x0F98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                GPSCompassMaterialIndex;                                   // 0x0F9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CompassCenterParameterName;                                // 0x0FA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FogOfWarTextureParameterName;                              // 0x0FA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompassNorthAngle;                                         // 0x0FB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompassInterpSpeed;                                        // 0x0FB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingSpeed;                                                // 0x0FB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxSwingAngle;                                             // 0x0FBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     ItemBalloonLocation;                                       // 0x0FC0(0x000C) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bShowMap : 1;                                              // 0x0FCC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShowGPS : 1;                                              // 0x0FCC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseCompassInsteadOfGPS : 1;                               // 0x0FCC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	unsigned char                                      bZoomInMap : 1;                                            // 0x0FCC(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bZoomInGPS : 1;                                            // 0x0FCC(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bWasFirstPerson : 1;                                       // 0x0FCC(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_ZY3Q[0x3];                                     // 0x0FCD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    CurrentCompassAngle;                                       // 0x0FD0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              CurrentSwingAngle;                                         // 0x0FDC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              CurrentSwingFactor;                                        // 0x0FE0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              CurrentSwingTime;                                          // 0x0FE4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              PreviousPawnYaw;                                           // 0x0FE8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_3GQT[0x4];                                     // 0x0FEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInstanceDynamic*                    GPSCompassMaterialInstance;                                // 0x0FF0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	int                                                PreviousLatitudeNumber;                                    // 0x0FF8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	int                                                PreviousLongitudeNumber;                                   // 0x0FFC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	int                                                PreviousBalloonLatitudeNumber;                             // 0x1000(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	int                                                PreviousBalloonLongitudeNumber;                            // 0x1004(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LatitudeDigit1_MI;                                         // 0x1008(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LatitudeDigit2_MI;                                         // 0x1010(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LatitudeDigit3_MI;                                         // 0x1018(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LongitudeDigit1_MI;                                        // 0x1020(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LongitudeDigit2_MI;                                        // 0x1028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    LongitudeDigit3_MI;                                        // 0x1030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class UMaterialInstanceDynamic*                    Map_MI;                                                    // 0x1038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponGPS");
		return ptr;
	}



	void ServerShowNone();
	void ServerShowMapOnly();
	void ServerShowGPSOnly();
	void ServerShowBoth();
	void ServerSetUseCompassInsteadOfGPS(bool bUseCompass);
	void RefreshUseCompass();
};

// Class ShooterGame.ShooterWeapon_Climb
// 0x06D8 (FullSize[0x1470] - InheritedSize[0x0D98])
class AShooterWeapon_Climb : public AShooterWeapon_Melee
{
public:
	float                                              MinStaminaToClimb;                                         // 0x0D98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      ClimbingMode;                                              // 0x0D9C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      PreviousClimbingMode;                                      // 0x0D9D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      ClimbingType;                                              // 0x0D9E(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      CurrentClimbingMovementType;                               // 0x0D9F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bClimbingLeftArm : 1;                                      // 0x0DA0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bInitialAttach : 1;                                        // 0x0DA0(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bEarthquakeLocked : 1;                                     // 0x0DA0(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      UnknownData_FJ5W[0x3];                                     // 0x0DA1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector_NetQuantize100                      ClimbingAnchorPosition;                                    // 0x0DA4(0x000C) (BlueprintVisible, BlueprintReadOnly, Net)
	struct FVector_NetQuantizeNormal                   ClimbingAnchorNormal;                                      // 0x0DB0(0x000C) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData_WVTO[0x8];                                     // 0x0DBC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PreviousClimbingAnchorPosition;                            // 0x0DC4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviousClimbingAnchorNormal;                              // 0x0DD0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     ClimbingDirection;                                         // 0x0DDC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     ClimbingAnchorDirection;                                   // 0x0DE8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ClimbingOvershootTime;                                     // 0x0DF4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ClimbingLookingToSide;                                     // 0x0DF8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F905[0x4];                                     // 0x0DFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundCue*                                   ClimbLowStaminaLoopSC;                                     // 0x0E00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                             ClimbLowStaminaLoopAC;                                     // 0x0E08(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	float                                              ClimbLowStaminaPercentagePlaySound;                        // 0x0E10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_902T[0x4];                                     // 0x0E14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FClimbingAnims                              ClimbAnims;                                                // 0x0E18(0x0400) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 TurnLeftAnim;                                              // 0x1218(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 TurnRightAnim;                                             // 0x1228(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 TurnLeftAnimHanging;                                       // 0x1238(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 TurnRightAnimHanging;                                      // 0x1248(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               RightClimbingAnimation;                                    // 0x1258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               LeftClimbingAnimation;                                     // 0x1260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               RightClimbingHangAnimation;                                // 0x1268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               LeftClimbingHangAnimation;                                 // 0x1270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               InventoryRightClimbAnimation;                              // 0x1278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               InventoryLeftClimbAnimation;                               // 0x1280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               InventoryRightClimbHangAnimation;                          // 0x1288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequence*                               InventoryLeftClimbHangAnimation;                           // 0x1290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 SlideDownLeftAnim;                                         // 0x1298(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 SlideDownRightAnim;                                        // 0x12A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LeftMesh1PComponentName;                                   // 0x12B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RightMesh1PComponentName;                                  // 0x12C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LeftMesh3PComponentName;                                   // 0x12C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       RightMesh3PComponentName;                                  // 0x12D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       LeftPickAttachPoint3P;                                     // 0x12D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        LeftMesh1P;                                                // 0x12E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        RightMesh1P;                                               // 0x12E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        LeftMesh3P;                                                // 0x12F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        RightMesh3P;                                               // 0x12F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UClass*                                      ClimbPickHitCameraShake;                                   // 0x1300(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBiomeZoneImpactEffect                      LeftClimbImpactEffects;                                    // 0x1308(0x0080) (Edit, DisableEditOnInstance)
	struct FBiomeZoneImpactEffect                      RightClimbImpactEffects;                                   // 0x1388(0x0080) (Edit, DisableEditOnInstance)
	struct FName                                       ImpactSocketName;                                          // 0x1408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                MaxSpawnedImpactEffects;                                   // 0x1410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      ServerCurrentClimbingType;                                 // 0x1414(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TPMR[0x3];                                     // 0x1415(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ServerCurrentClimbingDirection;                            // 0x1418(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              UpdatingDirectionTime;                                     // 0x1424(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                              ActiveImpactEffects;                                       // 0x1428(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      ClimbingSettingsClass;                                     // 0x1438(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCameraModifier*                             ActiveCameraModifer;                                       // 0x1440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ClimbingMinAttachedDurationBeforeAllowingDetach;           // 0x1448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WF9G[0x4];                                     // 0x144C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ClimbingLastAttachedStartedTime;                           // 0x1450(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BH6Z[0x4];                                     // 0x1458(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bHasAValidClimbingTarget;                                  // 0x145C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JHYF[0x13];                                    // 0x145D(0x0013) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Climb");
		return ptr;
	}



	bool ShouldShowTargetingArray();
	void SetClimbingAnchorPoint(unsigned char Type, unsigned char Mode, const struct FVector_NetQuantize100& Direction, const struct FVector_NetQuantize100& Position, const struct FVector_NetQuantizeNormal& Normal);
	void ServerSetClimbingLeftArm(bool ClimbingLeftArm);
	void ServerRequestClimbMove(unsigned char Type, const struct FVector& Direction, bool ClimbingLeftArm);
	void ServerReleaseClimbingAnchor(bool bWithJump, const struct FVector_NetQuantizeNormal& InputDir, bool bForceMinTimeCheckBeforeReleasing);
	void ServerPerformTurn(bool ClimbingLeftArm);
	void ReleaseClimbingAnchor(bool bWithJump, const struct FVector& InputDir, bool bForceMinTimeCheckBeforeReleasing);
	bool IsClimbingUp();
	bool IsClimbingHanging();
	struct FVector GetViewLocation();
	struct FVector GetViewDirection();
	bool ClimbTrace(struct FHitResult* HitResult, unsigned char Type, const struct FVector& Direction, TEnumAsByte<Engine_ECollisionChannel> Channel);
	void ClientNotifyNoClimbSurface();
	bool CanLandOnSurface(const struct FHitResult& HitResult);
	bool CanClimbOnSurface(const struct FHitResult& HitResult);
	void BPUpdateClimbTarget(float DeltaSeconds, bool bClimbing, const struct FVector& AnchorPosition, const struct FVector& AnchorNormal, bool bCanClimb, bool bCanLand, const struct FVector& ClimbLocation, const struct FVector& ClimbNormal, bool bHudVisible);
};

// Class ShooterGame.ShooterWeapon_MeleeLock
// 0x0090 (FullSize[0x0E28] - InheritedSize[0x0D98])
class AShooterWeapon_MeleeLock : public AShooterWeapon_Melee
{
public:
	float                                              LockValue;                                                 // 0x0D98(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	float                                              LockVFXValue;                                              // 0x0D9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastAttackTime;                                            // 0x0DA0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastHitTime;                                               // 0x0DA8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               HitThisAttack;                                             // 0x0DB0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F9T8[0x3];                                     // 0x0DB1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockDecayValue;                                            // 0x0DB4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LockHitIncrement;                                          // 0x0DB8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LockMissDecrement;                                         // 0x0DBC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_ESimpleCurve>              AnimationRateCurve;                                        // 0x0DC0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SMSY[0x3];                                     // 0x0DC1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinAnimationRate;                                          // 0x0DC4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxAnimationRate;                                          // 0x0DC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TEnumAsByte<ShooterGame_ESimpleCurve>              DamageCurve;                                               // 0x0DCC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HV5R[0x3];                                     // 0x0DCD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDamageMultiplier;                                       // 0x0DD0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDamageMultiplier;                                       // 0x0DD4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      TargetBuff_MaxDamage;                                      // 0x0DD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      OwnerBuff_MaxDamage;                                       // 0x0DE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LockTurnRate;                                              // 0x0DE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinPullDistance;                                           // 0x0DEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxPullDistance;                                           // 0x0DF0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxTargetDistance;                                         // 0x0DF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TargetAngle;                                               // 0x0DF8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxLockTime;                                               // 0x0DFC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackMoveSpeed;                                           // 0x0E00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackAirImpulse;                                          // 0x0E04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              AttackMoveDuration;                                        // 0x0E08(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxPowerThreshold;                                         // 0x0E0C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_26QQ[0x14];                                    // 0x0E10(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bSteppingEnabled;                                          // 0x0E24(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R6JQ[0x3];                                     // 0x0E25(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_MeleeLock");
		return ptr;
	}



	void OnRep_LockValue();
	void EndMeleeAttack();
};

// Class ShooterGame.ShooterWeapon_Whip
// 0x0048 (FullSize[0x0DE0] - InheritedSize[0x0D98])
class AShooterWeapon_Whip : public AShooterWeapon_Melee
{
public:
	class UClass*                                      StunBuff;                                                  // 0x0D98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      BlockedByShieldBuff;                                       // 0x0DA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      HerdDinoBuff;                                              // 0x0DA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     HarvestingBoxExtent;                                       // 0x0DB0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     HarvestingWhipTipOffset;                                   // 0x0DBC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxDinoDragWeightToApplyBuff;                              // 0x0DC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxFlyerDinoDragWeightToApplyBuff;                         // 0x0DCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityMultiplierForFriendDinos;                        // 0x0DD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DurabilityMultiplierForHarvesting;                         // 0x0DD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZE4A[0x8];                                     // 0x0DD8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Whip");
		return ptr;
	}



};

// Class ShooterGame.ShooterWeapon_Placer
// 0x0078 (FullSize[0x0E08] - InheritedSize[0x0D90])
class AShooterWeapon_Placer : public AShooterWeapon
{
public:
	class UClass*                                      StructureToPlace;                                          // 0x0D90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FWeaponAnim                                 SecondaryActionAnim;                                       // 0x0D98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FWeaponAnim                                 UnableToPlaceAnim;                                         // 0x0DA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FWeaponAnim                                 PlaceOnSelfAnim;                                           // 0x0DB8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FWeaponAnim                                 EquipItemAnim;                                             // 0x0DC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bCanDetonateExplosives : 1;                                // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bHideLeftArmFPVWhenNoAmmo : 1;                             // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bPlaySecondaryActionAnim : 1;                              // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseAnimNotifyToPlaceStructure : 1;                        // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bModifyDetonatorMaterial : 1;                              // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bPlacingStructureConsumeItemAmmo : 1;                      // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bDontPlaceStructureOnFire : 1;                             // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseBPSecondaryAction : 1;                                 // 0x0DD8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bUseBPPreFireAction : 1;                                   // 0x0DD9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_JZUO[0x2];                                     // 0x0DDA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeToHideLeftArmFPV;                                      // 0x0DDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ExplosiveBoneName;                                         // 0x0DE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class USkeletalMeshComponent*                      ItemToPlace3P;                                             // 0x0DE8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       ItemAttachPoint3P;                                         // 0x0DF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              DetonateExplosivesMaxRadius;                               // 0x0DF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               ChangeMaterialDiffrentBehaviour;                           // 0x0DFC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bHiddenExplosive;                                          // 0x0DFD(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bWaitingForPlacement;                                      // 0x0DFE(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_Z4F8[0x1];                                     // 0x0DFF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlacementWaitTimeFromEquip;                                // 0x0E00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              MinimumTimeBetweenPlacements;                              // 0x0E04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_Placer");
		return ptr;
	}



	void ServerDetonateExplosives();
	void PlaceStructureWithSecondaryAction();
	void GetPlacementOrigin(struct FVector* OriginLocation, struct FRotator* OriginRotation);
	bool BPSecondaryAction();
	void BPPrefireAction();
};

// Class ShooterGame.ShooterWeapon_PlacerTransGPS
// 0x0040 (FullSize[0x0E48] - InheritedSize[0x0E08])
class AShooterWeapon_PlacerTransGPS : public AShooterWeapon_Placer
{
public:
	class USkeletalMeshComponent*                      DeviceMesh1P;                                              // 0x0E08(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FName                                       DeviceAttachPoint1P;                                       // 0x0E10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DetonateTransponderMaxRadius;                              // 0x0E18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ShowTranspondersCoolDown;                                  // 0x0E1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FPVBoneNameToHide;                                         // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LUZA[0x20];                                    // 0x0E28(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ShooterWeapon_PlacerTransGPS");
		return ptr;
	}



	void ServerSetFrequency(float Freq);
	void ServerAttachToSelf();
	void ClientShowTransponders(bool bValue);
};

// Class ShooterGame.PrimalWeaponBow
// 0x0080 (FullSize[0x0EC0] - InheritedSize[0x0E40])
class APrimalWeaponBow : public AShooterWeapon_Projectile
{
public:
	float                                              MinimumInitialSpeed;                                       // 0x0E40(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaximumInitialSpeed;                                       // 0x0E44(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PullingTimeForMaximumSpeed;                                // 0x0E48(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageFactorForSlowArrows;                                 // 0x0E4C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DamageFactorForFastArrows;                                 // 0x0E50(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinimumPullingTimeToFire;                                  // 0x0E54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisablePullingOnCrouch : 1;                               // 0x0E58(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisablePullingOnProne : 1;                                // 0x0E58(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_6XKA[0x7];                                     // 0x0E59(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      MaxPullCameraShake;                                        // 0x0E60(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ArrowBoneName;                                             // 0x0E68(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 PullStringAnim;                                            // 0x0E70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bHideWeaponOnLaunch : 1;                                   // 0x0E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseArrowMesh1P : 1;                                       // 0x0E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bHideOriginalArrowBone1P : 1;                              // 0x0E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachArrowToWeaponMesh3P : 1;                            // 0x0E80(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReloadOnEmptyClip : 1;                                    // 0x0E80(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JSNF[0x3];                                     // 0x0E81(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       ArrowOnWeaponAttachPoint3P;                                // 0x0E84(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1PHN[0x4];                                     // 0x0E8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMeshComponent*                        ArrowMesh3P;                                               // 0x0E90(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FName                                       ArrowAttachPoint3P;                                        // 0x0E98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        ArrowMesh1P;                                               // 0x0EA0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FName                                       ArrowAttachPoint1P;                                        // 0x0EA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bPendingPullString : 1;                                    // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected)
	unsigned char                                      bNewPullStringEvent : 1;                                   // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected)
	unsigned char                                      bIsPullingString : 1;                                      // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, RepNotify, NoDestructor, Protected)
	unsigned char                                      bIsPlayingPullStringAnim : 1;                              // 0x0EB0(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bDidFireWeapon : 1;                                        // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected)
	unsigned char                                      bIsLastArrow : 1;                                          // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected)
	unsigned char                                      bDontRequireIdleForReload : 1;                             // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected)
	unsigned char                                      bUseBPCanStartFire : 1;                                    // 0x0EB0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected)
	unsigned char                                      bForceServerCheckPullingTime : 1;                          // 0x0EB1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected)
	unsigned char                                      UnknownData_7HQA[0x2];                                     // 0x0EB2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PullingTime;                                               // 0x0EB4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected)
	float                                              ProjectileSpeed;                                           // 0x0EB8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_FSY3[0x4];                                     // 0x0EBC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponBow");
		return ptr;
	}



	void UpdateTPVBowAnimation();
	void UnHideArrow();
	void ServerSetPullString(bool bIsPulling);
	void HideArrow();
	void BPSimulatedResetSetPullingTime();
	bool BPCanStartFire();
};

// Class ShooterGame.PrimalWeaponBoomerang
// 0x0008 (FullSize[0x0EC8] - InheritedSize[0x0EC0])
class APrimalWeaponBoomerang : public APrimalWeaponBow
{
public:
	float                                              chanceToBreak;                                             // 0x0EC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bClientHideBoomerang : 1;                                  // 0x0EC4(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_2E9N[0x3];                                     // 0x0EC5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponBoomerang");
		return ptr;
	}



	void OnRep_ClientHideBoomerang();
};

// Class ShooterGame.PrimalWeaponGrapplingHook
// 0x0030 (FullSize[0x0E70] - InheritedSize[0x0E40])
class APrimalWeaponGrapplingHook : public AShooterWeapon_Projectile
{
public:
	bool                                               bDetachGrapHookOnUnequip;                                  // 0x0E40(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bPreventReeling;                                           // 0x0E41(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bPullingRope;                                              // 0x0E42(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_Q7FH[0x5];                                     // 0x0E43(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTimeWithGrapHook;                                      // 0x0E48(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	class USceneComponent*                             CableAttach1P;                                             // 0x0E50(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class USceneComponent*                             CableAttach3P;                                             // 0x0E58(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	class USoundCue*                                   ReelInSoundCue;                                            // 0x0E60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class USoundCue*                                   ReelOutSoundCue;                                           // 0x0E68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponGrapplingHook");
		return ptr;
	}



};

// Class ShooterGame.PrimalWeaponGrenade
// 0x0068 (FullSize[0x0EA8] - InheritedSize[0x0E40])
class APrimalWeaponGrenade : public AShooterWeapon_Projectile
{
public:
	struct FWeaponAnim                                 PrepareThrowAnim;                                          // 0x0E40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 QuickThrowAnim;                                            // 0x0E50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponAnim                                 OvercookHurtAnim;                                          // 0x0E60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GrenadeBoneName;                                           // 0x0E70(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       GrenadePinBoneName;                                        // 0x0E78(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxGrenadeLife;                                            // 0x0E80(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDontCookGrenade : 1;                                      // 0x0E84(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHideGrenadeOnFireProjectile : 1;                          // 0x0E84(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnablePrepareThrowAnim : 1;                               // 0x0E84(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	bool                                               bIsCookingGrenade;                                         // 0x0E85(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	bool                                               bUseBlueprintSpeed;                                        // 0x0E86(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	bool                                               bHideSkeletalMesh;                                         // 0x0E87(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              CookingTime;                                               // 0x0E88(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     ProjectileOrigin;                                          // 0x0E8C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     ProjectileShootDir;                                        // 0x0E98(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_HPJX[0x4];                                     // 0x0EA4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalWeaponGrenade");
		return ptr;
	}



	void UnHidePin();
	void UnHideGrenade();
	void HidePin();
	void HideGrenade();
	float BPGetProjectileSpeed();
};

// Class ShooterGame.SilentDamageType
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class USilentDamageType : public UDamageType
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SilentDamageType");
		return ptr;
	}



};

// Class ShooterGame.SkyBoxLoader
// 0x0078 (FullSize[0x04E8] - InheritedSize[0x0470])
class ASkyBoxLoader : public AActor
{
public:
	TArray<struct FStringAssetReference>               SkyBoxStringReferences;                                    // 0x0470(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStringAssetReference>               FogScatterStringReferences;                                // 0x0480(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStringAssetReference>               FogLossStringReferences;                                   // 0x0490(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSkyBoxLoadedStatus>                 LoadedStatus;                                              // 0x04A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UTexture2D*>                          LoadedSkyTextures;                                         // 0x04B0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UTexture2D*>                          LoadedFogScatterTextures;                                  // 0x04C0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UTexture2D*>                          LoadedFogLossTextures;                                     // 0x04D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData_4310[0x8];                                     // 0x04E0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SkyBoxLoader");
		return ptr;
	}



	bool SetSkyTextureIndices(int Texture0, int Texture1);
	bool LoadSkyTextureIndexArray(TArray<int> TextureInices);
	bool LoadSkyTextureIndex(int TextureIdx);
	void K2_OnTextureIndicesLoaded(TArray<int> TextureIndices);
};

// Class ShooterGame.SOTFNotification
// 0x0248 (FullSize[0x06B8] - InheritedSize[0x0470])
class ASOTFNotification : public AActor
{
public:
	float                                              NightBloomMultiplier;                                      // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EffectScale;                                               // 0x0474(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     BackgroundOffset;                                          // 0x0478(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FTR5[0x4];                                     // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 BackgroundMesh;                                            // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    BackgroundRotation;                                        // 0x0490(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BackgroundMeshScale;                                       // 0x049C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BackgroundMeshDoubleScale;                                 // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewImageBloom;                                         // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutInterval;                                           // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeInInterval;                                            // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAnimateScaling : 1;                                       // 0x04B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_XPGL[0x3];                                     // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LightBrightness;                                           // 0x04B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    LightRotation;                                             // 0x04B8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GapBetweenPlayerImages;                                    // 0x04C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      BannerEliminationTextColor;                                // 0x04C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      BannerVictoryTextColor;                                    // 0x04CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BannerTextBloom;                                           // 0x04D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BannerTextFontScale;                                       // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     BannerTextOffset;                                          // 0x04D8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_17SN[0x4];                                     // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     EliminationText;                                           // 0x04E8(0x0010) (Edit, ZeroConstructor)
	struct FString                                     VictoryText;                                               // 0x04F8(0x0010) (Edit, ZeroConstructor)
	float                                              ScrollingTextFadePower;                                    // 0x0508(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextSpeed;                                        // 0x050C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextBloom;                                        // 0x0510(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextInterval;                                     // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ScrollingTextOffset;                                       // 0x0518(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextLifeTime;                                     // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextDoubleMultiplier;                             // 0x0528(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScrollingTextScale;                                        // 0x052C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ScrollingTextCount;                                        // 0x0530(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      ScrollingTextColor;                                        // 0x0534(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviewCameraLocation;                                     // 0x0538(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviewCameraRotation;                                     // 0x0544(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraFOV;                                          // 0x0550(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviewMeshRotation;                                       // 0x0554(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESkyLightSourceType>            AmbientSourceType;                                         // 0x0560(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RZ0Y[0x7];                                     // 0x0561(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                AmbientCubemap;                                            // 0x0568(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      AmbientLightColor;                                         // 0x0570(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientBrightness;                                         // 0x0574(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFont*                                       TextFont;                                                  // 0x0578(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterial*                                   TextMaterial;                                              // 0x0580(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    TextRotation;                                              // 0x0588(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerNameFontSize;                                        // 0x0594(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PlayerNameOffset;                                          // 0x0598(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerNameTextBloom;                                       // 0x05A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DeathReasonOffset;                                         // 0x05A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DeathReasonFontSize;                                       // 0x05B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      DeathReasonTextColor;                                      // 0x05B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DeathReasonTextBloom;                                      // 0x05BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      PlayerNameTextColor;                                       // 0x05C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6CCS[0x4];                                     // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 PlayerImageMesh;                                           // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   DeathSound;                                                // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                                   TribeEliminatedSound;                                      // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  PlayerDeathMusic1;                                         // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  PlayerDeathMusic2;                                         // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  TribeEliminationMusic;                                     // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                                  VictoryMusic;                                              // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              DefaultNotificationInterval;                               // 0x0600(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UVRY[0x4];                                     // 0x0604(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSOTFNotificationInfo>               NotificationsQueue;                                        // 0x0608(0x0010) (ZeroConstructor, Transient)
	struct FSOTFNotificationInfo                       CurrentNotification;                                       // 0x0618(0x0070) (Transient)
	TArray<class AShooterCharacter*>                   PreviewCharacter;                                          // 0x0688(0x0010) (ZeroConstructor, Transient)
	TArray<class UPreviewImage*>                       PreviewImages;                                             // 0x0698(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_X1M6[0x10];                                    // 0x06A8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SOTFNotification");
		return ptr;
	}



};

// Class ShooterGame.SOTFNotificationDisplay
// 0x0058 (FullSize[0x04C8] - InheritedSize[0x0470])
class ASOTFNotificationDisplay : public AActor
{
public:
	class ASOTFNotification*                           NotificationSystem;                                        // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FScrollingTextInfo>                  ScrollableTexts;                                           // 0x0478(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference)
	TArray<struct FPlayerPreviewImage>                 CachedPlayerImages;                                        // 0x0488(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference)
	struct FBannerTextInfo                             BannerText;                                                // 0x0498(0x0018) (Transient, ContainsInstancedReference)
	double                                             LastScrollingTextActivationTime;                           // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SYYZ[0x10];                                    // 0x04B8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SOTFNotificationDisplay");
		return ptr;
	}



};

// Class ShooterGame.SoundNodeLocalPlayer
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeLocalPlayer : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SoundNodeLocalPlayer");
		return ptr;
	}



};

// Class ShooterGame.SoundNodeVehicleEngine
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class USoundNodeVehicleEngine : public USoundNode
{
public:
	TArray<struct FVehicleEngineDatum>                 EngineSamples;                                             // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData_TXOQ[0x4];                                     // 0x0048(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CurrentRPM;                                                // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L5VC[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SoundNodeVehicleEngine");
		return ptr;
	}



};

// Class ShooterGame.StatWidget
// 0x00A0 (FullSize[0x02E0] - InheritedSize[0x0240])
class UStatWidget : public UUserWidget
{
public:
	struct FText                                       StatName;                                                  // 0x0240(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData_W64B[0x10];                                    // 0x0240(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UTexture2D*                                  StatIcon;                                                  // 0x0268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_02SE[0x14];                                    // 0x0270(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       StatTextBlockName;                                         // 0x0284(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatValueBlockName;                                        // 0x028C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatImageName;                                             // 0x0294(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatBarName;                                               // 0x029C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FName                                       StatButtonName;                                            // 0x02A4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_UYQL[0x24];                                    // 0x02AC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UButton*                                     StatUpgradeButton;                                         // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	class UWidgetSwitcher*                             PulsatingSwitcher;                                         // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StatWidget");
		return ptr;
	}



	void ClickedButton(class UWidget* clickedWidget);
};

// Class ShooterGame.StructurePaintingComponent
// 0x00C8 (FullSize[0x01A0] - InheritedSize[0x00D8])
class UStructurePaintingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_F9Y5[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PaintingSizeX;                                             // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                PaintingSizeY;                                             // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FColor>                              ColorTable;                                                // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                PaintingTextureUVIndex;                                    // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                PaintingRevision;                                          // 0x00FC(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	int                                                UniquePaintingId;                                          // 0x0100(0x0004) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviewCameraRotation;                                     // 0x0104(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviewCameraPivotOffset;                                  // 0x0110(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDistanceScaleFactor;                          // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraDefaultZoomMultiplier;                        // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviewCameraMaxZoomMultiplier;                            // 0x0124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bMultiplicativeBlending : 1;                               // 0x0128(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMirroredTexCoordU : 1;                                    // 0x0128(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_FI9K[0x77];                                    // 0x0129(0x0077) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StructurePaintingComponent");
		return ptr;
	}



	void ClientPaint(class AShooterPlayerController* Painter, TArray<struct FPaintItem> Paints);
};

// Class ShooterGame.StructurePreventionZoneVolume
// 0x0040 (FullSize[0x04E8] - InheritedSize[0x04A8])
class AStructurePreventionZoneVolume : public AVolume
{
public:
	unsigned char                                      bOnlyPreventInPvE : 1;                                     // 0x04A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOnlyPreventInDedicated : 1;                               // 0x04A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPreventAllStructures : 1;                                 // 0x04A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisabled : 1;                                             // 0x04A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_3X9X[0x7];                                     // 0x04A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              OnlyAllowStructuresOfType;                                 // 0x04B0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      bPreventionVolumeForcePreventFlyers : 1;                   // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventionVolumePreventsFlyers : 1;                       // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventionVolumeForceAllowFlyers : 1;                     // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventStructureDamageIncrease : 1;                       // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bStructurePreventionOnly : 1;                              // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOptionallyEnabled : 1;                                    // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceEnabledWhenAllowCaveBuildingPVPIsFalse : 1;          // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOnGenesis : 1;                                       // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsMissionZone : 1;                                        // 0x04C1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_I0JF[0x2];                                     // 0x04C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StructureDamageMultiplier;                                 // 0x04C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               ForcePreventStructuresWithTheseTags;                       // 0x04C8(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              PreventUsingWeapons;                                       // 0x04D8(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StructurePreventionZoneVolume");
		return ptr;
	}



	class AStructurePreventionZoneVolume* STATIC_BPIsWithinAnyStructurePreventionVolume(class UWorld* ForWorld, const struct FVector& AtPoint, bool bCheckDisabled, bool bIsForDamageCheck, bool bIgnoreOptionalVolumes);
};

// Class ShooterGame.StructuresPlus
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UStructuresPlus : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.StructuresPlus");
		return ptr;
	}



	void STATIC_SP_SetGlassModelEdgeVisibility(int index, class UStaticMeshComponent* Top, class UStaticMeshComponent* Bottom, class UStaticMeshComponent* Left, class UStaticMeshComponent* Right, bool bIsTriangle);
	int STATIC_SP_SafeRemoveFromInventory(class UClass* ItemClass, class UPrimalInventoryComponent* inventory, int ToRemove, bool bExactClassMatch, bool bIgnoreHotbar);
	void STATIC_SP_MessageClient(class APlayerController* PC, const struct FString& Message, TEnumAsByte<ShooterGame_ESPMessageType> MsgType);
	bool STATIC_SP_IsValidStructureForConnection(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes);
	bool STATIC_SP_IsSuitablePullTarget(class AActor* TargetActor, class APlayerController* PC);
	bool STATIC_SP_IsLinkedToPowerOrWater(class APrimalStructure* Structure);
	bool STATIC_SP_IsFuel(class UPrimalInventoryComponent* inventory, class UClass* ItemClass);
	bool STATIC_SP_IsFlexibleConnectionLinked(TArray<class APrimalStructure*> Structures, class APrimalStructure* NewStructure);
	bool STATIC_SP_IsConnectedToInfiniteWaterSource(class APrimalStructure* Structure);
	struct FLinearColor STATIC_SP_GetSpecialMenuColor();
	TArray<class APrimalStructure*> STATIC_SP_GetNearbyStructuresForFlexibleConnection(class APrimalStructure* Structure, class UClass* SearchClass, float Range);
	struct FLinearColor STATIC_SP_GetMessageTypeColor(TEnumAsByte<ShooterGame_ESPMessageType> MsgType);
	float STATIC_SP_GetInventoryWeightMultiplier(class UClass* ItemClass, class UPrimalInventoryComponent* inventory);
	int STATIC_SP_GetInventoryCapacityForItem(class UClass* ItemClass, class AActor* TargetActor);
	float STATIC_SP_GetFloatOption(class AGameMode* GameMode, const struct FString& OptionName, float Default, float Max);
	int STATIC_SP_GetEmptyInventorySlotCount(class UPrimalInventoryComponent* inventory, bool bIsDino);
	void STATIC_SP_GetCharacterWeights(class APrimalCharacter* Character, float* MaxWeight, float* CurrentWeight);
	void STATIC_SP_GetCentralPointForFlexibleConnection(TArray<class APrimalStructure*> Structures, class APrimalStructure* ThisStructure, bool bDrawDebug, TArray<struct FVector>* ConnectionPoints, struct FVector* CentralPoint);
	bool STATIC_SP_GetBoolOption(class AGameMode* GameMode, const struct FString& OptionName);
	TArray<class APrimalStructure*> STATIC_SP_GetAllConnectedStructuresOfTypes(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes);
	void STATIC_SP_GetAccessibleInventoriesInRange(class APlayerController* PC, const struct FVector& Location, float PullRange, class AActor* ActorToIgnore, TArray<class APrimalDinoCharacter*>* Dinos, TArray<class APrimalStructureItemContainer*>* Structures);
	void STATIC_SP_AlterGlassTransparency(TEnumAsByte<ShooterGame_EGlassTransparencyType> GlassSettingsTransparencyType, float GlassSettingsTransparency, class UMaterialInstanceDynamic* InsideMIC, class UMaterialInstanceDynamic* OutsideMIC);
	TArray<struct FMultiUseEntry> STATIC_SP_AddMenuEntries(TArray<struct FMultiUseEntry> EntriesIn, class APlayerController* PC, class APrimalStructure* Structure, bool bIsGlass);
};

// Class ShooterGame.SupplyCrateSpawningVolume
// 0x00A0 (FullSize[0x0548] - InheritedSize[0x04A8])
class ASupplyCrateSpawningVolume : public AVolume
{
public:
	TArray<struct FSupplyCrateSpawnEntry>              LinkedSupplyCrateEntries;                                  // 0x04A8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_XMWK[0x10];                                    // 0x04B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupplyCrateSpawnPointEntry>         LinkedSpawnPointEntries;                                   // 0x04C8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      bIsEnabled : 1;                                            // 0x04D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseSpawnPointWeights : 1;                                 // 0x04D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDoSpawnCrateOnTopOfStructures : 1;                        // 0x04D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForcePreventCrateOnTopOfStructures : 1;                   // 0x04D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReallyUseCrateRequiresLoadedLevel : 1;                    // 0x04D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GQQ3[0x3];                                     // 0x04D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxNumCrates;                                              // 0x04DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DelayBeforeFirstCrate;                                     // 0x04E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDelayBeforeFirstCrate;                                  // 0x04E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ZoneVolumeMaxNumberOfNPCBuffer;                            // 0x04E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalBetweenCrateSpawns;                                // 0x04EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxIntervalBetweenCrateSpawns;                             // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalBetweenMaxedCrateSpawns;                           // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxIntervalBetweenMaxedCrateSpawns;                        // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_IntervalBetweenCrateSpawns;                             // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_MaxIntervalBetweenCrateSpawns;                          // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_IntervalBetweenMaxedCrateSpawns;                        // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_MaxIntervalBetweenMaxedCrateSpawns;                     // 0x0508(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_NoValidSpawnRecheckInterval;                            // 0x050C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_DelayBeforeFirstCrate;                                  // 0x0510(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SP_MaxDelayBeforeFirstCrate;                               // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinCrateDistanceFromPlayer;                                // 0x0518(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinCrateDistanceFromStructure;                             // 0x051C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoValidSpawnReCheckInterval;                               // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTimeBetweenCrateSpawnsAtSamePoint;                      // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinDistanceFromOtherCrate;                                 // 0x0528(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       CrateSpawningRequiresLoadedSublevel;                       // 0x052C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceRandomSupplyCratePoints;                             // 0x0534(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L3O2[0x3];                                     // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APrimalStructureItemContainer_SupplyCrate*> MyCrates;                                                  // 0x0538(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SupplyCrateSpawningVolume");
		return ptr;
	}



	void STATIC_SpawnCratesFromAllVolumes(class UWorld* TheWorld);
	void SpawnCratesFromAllPoints();
	void SetSpawnEnabled(bool bEnable);
	void CheckForSupplyCrateStart();
	void CheckCrateSpawn();
};

// Class ShooterGame.SupplyCrateSpawningSettings
// 0x0048 (FullSize[0x04B8] - InheritedSize[0x0470])
class ASupplyCrateSpawningSettings : public AActor
{
public:
	TArray<struct FSupplyCrateSpawnEntry>              LinkedSupplyCrateEntries;                                  // 0x0470(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bUseSpawnPointWeights : 1;                                 // 0x0480(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_T7FZ[0x3];                                     // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxNumCrates;                                              // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DelayBeforeFirstCrate;                                     // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDelayBeforeFirstCrate;                                  // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ZoneVolumeMaxNumberOfNPCBuffer;                            // 0x0490(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalBetweenCrateSpawns;                                // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxIntervalBetweenCrateSpawns;                             // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IntervalBetweenMaxedCrateSpawns;                           // 0x049C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxIntervalBetweenMaxedCrateSpawns;                        // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinCrateDistanceFromPlayer;                                // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinCrateDistanceFromStructure;                             // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoValidSpawnReCheckInterval;                               // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTimeBetweenCrateSpawnsAtSamePoint;                      // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FB52[0x4];                                     // 0x04B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.SupplyCrateSpawningSettings");
		return ptr;
	}



};

// Class ShooterGame.TargetArea
// 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
class ATargetArea : public AActor
{
public:
	float                                              Radius;                                                    // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8E7F[0x4];                                     // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USphereComponent*                            MySphereComponent;                                         // 0x0478(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TargetArea");
		return ptr;
	}



};

// Class ShooterGame.TestItemWidget
// 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
class UTestItemWidget : public UUserWidget
{
public:
	struct FString                                     ItemLabelName;                                             // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TestItemWidget");
		return ptr;
	}



};

// Class ShooterGame.TickingHelperComponent
// 0x0040 (FullSize[0x0118] - InheritedSize[0x00D8])
class UTickingHelperComponent : public UActorComponent
{
public:
	struct FTimeRange                                  ThrottledTickTimeRange;                                    // 0x00D8(0x0008) (Edit, BlueprintVisible)
	TEnumAsByte<Engine_ETickingGroup>                  InitWithTickGroup;                                         // 0x00E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bUsePerFrameTickEvents;                                    // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseThrottledTickEvents;                                   // 0x00E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PAFA[0x5];                                     // 0x00E3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnPerFrameTickEvent;                                       // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnThrottledTickEvent;                                      // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_AJ0R[0x10];                                    // 0x0108(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TickingHelperComponent");
		return ptr;
	}



	void TickingHelperDelegate__DelegateSignature(class UTickingHelperComponent* TickingComponent, float DeltaTime);
	void SetComponentTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void OnThrottledTick(float DeltaTime);
};

// Class ShooterGame.TogglePainVolume
// 0x0100 (FullSize[0x05A8] - InheritedSize[0x04A8])
class ATogglePainVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_HWO4[0x50];                                    // 0x04A8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bEnabled;                                                  // 0x04F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NZUP[0x7];                                     // 0x04F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ActorClassesToExclude;                                     // 0x0500(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UClass*>                              ActorClassesToInclude;                                     // 0x0510(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AEmitter*>                            ToggleEmitters;                                            // 0x0520(0x0010) (Edit, ZeroConstructor)
	TArray<class AActor*>                              StructureDamageOverlapPoints;                              // 0x0530(0x0010) (Edit, ZeroConstructor)
	float                                              StructureDamageOverlapRadius;                              // 0x0540(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPainCausing : 1;                                          // 0x0544(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_ASA9[0x3];                                     // 0x0545(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamagePerSec;                                              // 0x0548(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StructureDamagePerSec;                                     // 0x054C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageType;                                                // 0x0550(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      StructureDamageType;                                       // 0x0558(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PainInterval;                                              // 0x0560(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEntryPain : 1;                                            // 0x0564(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPainWalkingOnly : 1;                                      // 0x0564(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBeginOverlapEvent : 1;                                 // 0x0564(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseEndOverlapEvent : 1;                                   // 0x0564(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseCausedPainEvent : 1;                                   // 0x0564(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreWildDinos : 1;                                      // 0x0564(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTriggerUndermeshDetection : 1;                            // 0x0564(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_30B4[0x3];                                     // 0x0565(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 DamageInstigator;                                          // 0x0568(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    BeginOverlapEvent;                                         // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EndOverlapEvent;                                           // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CausedPainEvent;                                           // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              DelayTogglePainActive;                                     // 0x05A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_212K[0x4];                                     // 0x05A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TogglePainVolume");
		return ptr;
	}



	void TogglePainVolumeEvent__DelegateSignature(class ATogglePainVolume* ForPainVolume, class AActor* VictimActor);
	void SetPainVolumeEnabled(bool bEnable);
	void OnInterpToggle(bool bEnable);
	void OnEndOverlap(class AActor* Actor);
	void OnBeginOverlap(class AActor* Actor);
	void GetOverlappedActors(TArray<class AActor*>* OutActors);
	int GetOverlappedActorNum();
};

// Class ShooterGame.ToolTipWidget
// 0x0068 (FullSize[0x02A8] - InheritedSize[0x0240])
class UToolTipWidget : public UUserWidget
{
public:
	struct FString                                     ToolTipLabelName;                                          // 0x0240(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                WidgetWidth;                                               // 0x0250(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                WidgetHeight;                                              // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bDoOverlayFade : 1;                                        // 0x0258(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_9KSS[0x4F];                                    // 0x0259(0x004F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ToolTipWidget");
		return ptr;
	}



	void BPUpdateToolTip(float DeltaSeconds);
	void BPInitToolTip(class AShooterPlayerController* HUDOwner, const struct FString& ToolTipString, class UObject* DataListEntry);
};

// Class ShooterGame.MissionDispatcherToolTipWidget
// 0x0058 (FullSize[0x0300] - InheritedSize[0x02A8])
class UMissionDispatcherToolTipWidget : public UToolTipWidget
{
public:
	struct FString                                     MissionNameLabelName;                                      // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     TitleLabelName;                                            // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MissionStatusLabelName;                                    // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData_OR5G[0x28];                                    // 0x02D8(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.MissionDispatcherToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.PrimalDinoToolTipWidget
// 0x01F8 (FullSize[0x04A0] - InheritedSize[0x02A8])
class UPrimalDinoToolTipWidget : public UToolTipWidget
{
public:
	struct FString                                     DinoNameLabelName;                                         // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     TamedLabelName;                                            // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     GenderLabelName;                                           // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     InfoLabelName;                                             // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     InfoLabel2Name;                                            // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     DinoIconImageName;                                         // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DinoUnconsciousPanelName;                                  // 0x0308(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DinoTamingPanelName;                                       // 0x0310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TorpidityProgressBarName;                                  // 0x0318(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       CustomProgressBarName;                                     // 0x0320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TamingProgressBarName;                                     // 0x0328(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       HealthBarName;                                             // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       StaminaBarName;                                            // 0x0338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       FoodBarName;                                               // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       WeightBarName;                                             // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       XPBarName;                                                 // 0x0350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       TorpidityBarName;                                          // 0x0358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       OxygenBarName;                                             // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       DamageBarName;                                             // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpeedBarName;                                              // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowExtendedInfo;                                         // 0x0378(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LQ3B[0x3];                                     // 0x0379(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                FemaleColor;                                               // 0x037C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MaleColor;                                                 // 0x038C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                NoGenderColor;                                             // 0x039C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C6U6[0xE4];                                    // 0x03AC(0x00E4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  FoodBarDefaultBackground;                                  // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  FoodBarDefaultForeground;                                  // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalDinoToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.PrimalEggToolTipWidget
// 0x0258 (FullSize[0x0500] - InheritedSize[0x02A8])
class UPrimalEggToolTipWidget : public UToolTipWidget
{
public:
	struct FLinearColor                                TemperatureColor_Perfect;                                  // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TemperatureColor_Boosted;                                  // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TemperatureColor_Cool;                                     // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TemperatureColor_TooCold;                                  // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TemperatureColor_Warm;                                     // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TemperatureColor_TooHot;                                   // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GenderColor_Female;                                        // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GenderColor_Male;                                          // 0x0318(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                GenderColor_Unknown;                                       // 0x0328(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GenderIcon_Female;                                         // 0x0338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GenderIcon_Male;                                           // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GenderIcon_Unknown;                                        // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              RightColumnWidth;                                          // 0x0350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TemperatureGaugeTotalDegreesToDisplay;                     // 0x0354(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              TemperatureGaugeIndicatorHorizontalOffset;                 // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SLLQ[0x1A4];                                   // 0x035C(0x01A4) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalEggToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.PrimalItemToolTipWidget
// 0x0248 (FullSize[0x04F0] - InheritedSize[0x02A8])
class UPrimalItemToolTipWidget : public UToolTipWidget
{
public:
	struct FString                                     ItemNameLabelName;                                         // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemQuantityLabelName;                                     // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemDescriptionLabelName;                                  // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemTypeLabelName;                                         // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemSubTypeLabelName;                                      // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemIconImageName;                                         // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemWeightLabelName;                                       // 0x0308(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemStatsLabelName;                                        // 0x0318(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemDurabilityLabelName;                                   // 0x0328(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemQualityImageName;                                      // 0x0338(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemSubtypePanelName;                                      // 0x0348(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ItemStatsPanelName;                                        // 0x0358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftingPanelName;                                     // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftingRequirementsLabelName;                         // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftingTitleLabelName;                                // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftingQueueLabelName;                                // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftingProgressBarName;                               // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       ItemCraftRepairInvReqLabelName;                            // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpoilIntoItemPanelName;                                    // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpoilIntoItemNameLabelName;                                // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpoilIntoItemTimeLabelName;                                // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       SpoilIntoItemIconName;                                     // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  EngramBg;                                                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BlueprintBg;                                               // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TekgramBg;                                                 // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemQualityOverlay;                                        // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QQ1Q[0x120];                                   // 0x03D0(0x0120) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItemToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem
// 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
class UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem : public UUserWidget
{
public:
	unsigned char                                      UnknownData_E8MZ[0x10];                                    // 0x0240(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem");
		return ptr;
	}



};

// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplay
// 0x0018 (FullSize[0x0258] - InheritedSize[0x0240])
class UToolTipWidgetPrimalStructureModuleItemsToDisplay : public UUserWidget
{
public:
	class UClass*                                      DisplayItemListEntryTemplate;                              // 0x0240(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8KII[0x10];                                    // 0x0248(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplay");
		return ptr;
	}



};

// Class ShooterGame.PrimalStructureToolTipWidget
// 0x0060 (FullSize[0x0308] - InheritedSize[0x02A8])
class UPrimalStructureToolTipWidget : public UToolTipWidget
{
public:
	class UClass*                                      ItemsToDisplayModuleTemplate;                              // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RQS6[0x58];                                    // 0x02B0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalStructureToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.TargetingInfoToolTipWidget
// 0x0050 (FullSize[0x02F8] - InheritedSize[0x02A8])
class UTargetingInfoToolTipWidget : public UToolTipWidget
{
public:
	unsigned char                                      UnknownData_E5P5[0x50];                                    // 0x02A8(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TargetingInfoToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.TooltipSmartLayoutWidget
// 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
class UTooltipSmartLayoutWidget : public UToolTipWidget
{
public:


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.TooltipSmartLayoutWidget");
		return ptr;
	}



};

// Class ShooterGame.DinoListItemTooltip
// 0x01B0 (FullSize[0x0458] - InheritedSize[0x02A8])
class UDinoListItemTooltip : public UTooltipSmartLayoutWidget
{
public:
	struct FName                                       fnameTitleBar_NameLabel;                                   // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_LevelLabel;                                  // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameInfo_ImageName;                                       // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               fnameInfo_LabelNames;                                      // 0x02C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               fnameInfo_GroupNames;                                      // 0x02D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              Info_GroupFreq;                                            // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4NDU[0x164];                                   // 0x02E4(0x0164) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  EnabledDinoTexture;                                        // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          EnabledDinoMaterial;                                       // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.DinoListItemTooltip");
		return ptr;
	}



};

// Class ShooterGame.PrimalCryopodTooltipWidget
// 0x0188 (FullSize[0x0430] - InheritedSize[0x02A8])
class UPrimalCryopodTooltipWidget : public UTooltipSmartLayoutWidget
{
public:
	class UTexture2D*                                  FemaleIcon;                                                // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  MaleIcon;                                                  // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                FemaleColor;                                               // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                                MaleColor;                                                 // 0x02C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z866[0x158];                                   // 0x02D8(0x0158) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalCryopodTooltipWidget");
		return ptr;
	}



};

// Class ShooterGame.PrimalItemInventoryToolTipWidget
// 0x0298 (FullSize[0x0540] - InheritedSize[0x02A8])
class UPrimalItemInventoryToolTipWidget : public UTooltipSmartLayoutWidget
{
public:
	struct FName                                       fnameTitleBar_EngramTypeLabel;                             // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_EngramTypeSeparator;                         // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_ItemNameLabel;                               // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_ItemTypeSeparator;                           // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_ItemTypeLabel;                               // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_ItemQualitySeparator;                        // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameTitleBar_ItemQualityLabel;                            // 0x02D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameMainInfo_Switcher;                                    // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameMainInfo_Full_Icon;                                   // 0x02E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameMainInfo_Full_DescriptionLabel;                       // 0x02F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameMainInfo_DescOnly_DescriptionLabel;                   // 0x02F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               fnameGeneral_LabelNames;                                   // 0x0300(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               fnameGeneral_GroupNames;                                   // 0x0310(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              General_GroupFreq;                                         // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FFLQ[0x4];                                     // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               fnameStat_LabelNames;                                      // 0x0328(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               fnameStat_GroupNames;                                      // 0x0338(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              Stat_GroupFreq;                                            // 0x0348(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameCraftPanel;                                           // 0x034C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       fnameCraftTitleLabel;                                      // 0x0354(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QL3T[0x4];                                     // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               fnameCraft_RequirementLabels;                              // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               fnameCraft_RequirementIcons;                               // 0x0370(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               fnameCraft_GroupNames;                                     // 0x0380(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              Craft_GroupFreq;                                           // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TCOP[0x4];                                     // 0x0394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSlateColor                                 Craft_RequirementsMet;                                     // 0x0398(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 Craft_RequirementsUnmet;                                   // 0x03C0(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 NormalTextColor;                                           // 0x03E8(0x0028) (Edit, DisableEditOnInstance)
	class UTexture2D*                                  EngramBg;                                                  // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  BlueprintBg;                                               // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  TekgramBg;                                                 // 0x0420(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  ItemQualityOverlay;                                        // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FFHB[0x110];                                   // 0x0430(0x0110) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.PrimalItemInventoryToolTipWidget");
		return ptr;
	}



};

// Class ShooterGame.UI_Compass
// 0x0090 (FullSize[0x02D0] - InheritedSize[0x0240])
class UUI_Compass : public UUserWidget
{
public:
	unsigned char                                      UnknownData_HUUW[0x8];                                     // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LatitudeOrigin;                                            // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LatitudeScale;                                             // 0x024C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeOrigin;                                           // 0x0250(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              LongitudeScale;                                            // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompassNorthAngle;                                         // 0x0258(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              CompassInterpSpeed;                                        // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              SwingSpeed;                                                // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MaxSwingAngle;                                             // 0x0264(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                                    CurrentCompassAngle;                                       // 0x0268(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CurrentSwingAngle;                                         // 0x0274(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CurrentSwingFactor;                                        // 0x0278(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CurrentSwingTime;                                          // 0x027C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       CompassCenterParameterName;                                // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              PreviousPawnYaw;                                           // 0x0288(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OX1X[0x4];                                     // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          CompassMI;                                                 // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    CompassMID;                                                // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                      buffRequiredForVisibility;                                 // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       longitudeText;                                             // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                       latitudeText;                                              // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5QVD[0x18];                                    // 0x02B8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.UI_Compass");
		return ptr;
	}



};

// Class ShooterGame.VRBattleGroupDataAsset
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UVRBattleGroupDataAsset : public UDataAsset
{
public:
	TArray<struct FVRBattleWaveUnit>                   Units;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	bool                                               bForceSpawnEntireGroup;                                    // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_811F[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.VRBattleGroupDataAsset");
		return ptr;
	}



};

// Class ShooterGame.WaterVolumeWithFlow
// 0x00A8 (FullSize[0x0570] - InheritedSize[0x04C8])
class AWaterVolumeWithFlow : public APhysicsVolume
{
public:
	float                                              CellSize;                                                  // 0x04C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   FlowMagnitudeMinMax;                                       // 0x04CC(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LINZ[0x54];                                    // 0x04D4(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGridIndex>                          GridIDs;                                                   // 0x0528(0x0010) (ZeroConstructor)
	TArray<struct FVector2D>                           FlowVectors;                                               // 0x0538(0x0010) (ZeroConstructor)
	bool                                               bHasValidGridSize;                                         // 0x0548(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VNCP[0x3];                                     // 0x0549(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGridIndex                                  CachedGridSize;                                            // 0x054C(0x0008)
	unsigned char                                      UnknownData_2P9P[0x4];                                     // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              BuffsToApply;                                              // 0x0558(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bApplyBuffsOnClient : 1;                                   // 0x0568(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KZG5[0x7];                                     // 0x0569(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.WaterVolumeWithFlow");
		return ptr;
	}



	void SetStrengthFromSplineActor(class AActor* InSplineActor);
	void SetPaintValueAtGridIndex(const struct FGridIndex& Grid, const struct FColor& InColor, TEnumAsByte<ShooterGame_EColorChannelTarget> Channel);
	void SetDestinationsFromSplineActor(class AActor* InSplineActor);
	void SetDefaultPaintColors();
	void SetCellSize(float NewCellSize);
	void PaintStrengthFromSpline();
	void PaintObstruction();
	void PaintDestinationFromSpline();
	bool IsGridIndexValid(const struct FGridIndex& Grid);
	struct FColor GetPaintValueAtGridIndex(const struct FGridIndex& Grid);
	struct FVector GetLocationForGridIndex(const struct FGridIndex& ForIndex);
	struct FGridIndex GetGridSize();
	bool GetGridIndexForLocation(const struct FVector& Location, struct FGridIndex* Grid);
	struct FVector GetFlowVectorAtLocation(const struct FVector& Location, bool bInterpFlowVector);
	void GenerateFlowField();
	void ClearAllPaintChannels();
	void BuildEverything();
};

// Class ShooterGame.WorldBuffEntryWidget
// 0x00C0 (FullSize[0x0300] - InheritedSize[0x0240])
class UWorldBuffEntryWidget : public UUserWidget
{
public:
	float                                              DefaultDisplayTime;                                        // 0x0240(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              ExpiringSoonDisplayTime;                                   // 0x0244(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z66K[0xB8];                                    // 0x0248(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.WorldBuffEntryWidget");
		return ptr;
	}



	void SyncData(const struct FWorldBuffPersistantData& WorldBuffPersistantData, bool bIsListEntry, bool bShouldReinit, bool bDurationIsStopped);
	void Initialize(bool bIsListEntry);
	void FadeOut();
	void Collapse();
	void BeginExpiring();
};

// Class ShooterGame.WorldModifiersContainer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UWorldModifiersContainer : public UObject
{
public:
	TArray<struct FPrimalWorldModifierList>            WorldModifiers;                                            // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShooterGame.WorldModifiersContainer");
		return ptr;
	}



};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
